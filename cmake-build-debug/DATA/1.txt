using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro1 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help;
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro1()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Цветовая тема";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            MakeContent();
            dark.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
                MakeContent();
            };
            light.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
                MakeContent();
            };
        }

        string t = "\nЦветовая тема\n";
        Button dark = new Button { Text="     ", BackgroundColor = Color.FromRgb(30, 30, 30), BorderColor = Color.FromRgb(255,255,255), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };
        Button light = new Button { Text = "     ", BackgroundColor = Color.FromRgb(255, 255, 255), BorderColor = Color.FromRgb(30, 30, 30), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };

        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери цветовую тему приложения", "Хорошо!");
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            help = new Button
            {
                Text = "?",
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro2());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new Frame
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                                    BorderColor = Styles.UserColor,
                                    HorizontalOptions = LayoutOptions.End,
                                    BackgroundColor = Styles.UserColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                },
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size },
                                    BorderColor = Styles.BotColor,
                                    HorizontalOptions = LayoutOptions.Start,
                                    BackgroundColor = Styles.BotColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                }
                            }
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        HasShadow = false,
                        BackgroundColor = Styles.BackColor
                    },
                    new StackLayout
                    {
                        Children =
                        {
                            light,
                            dark
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro2 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери тематику, по которой будет проводиться поиск", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nТематика новостей\n";
        public Intro2()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro3());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro3 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери временной интервал поиска новостей", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nОбласть поиска\n";
        public Intro3()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro4());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro4 : ContentPage
    {
        string t = "\nРазмер шрифта\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        int size = (int)App.Current.Properties["size"];
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери размер шрифта в диалоге", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro4()
        {
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["size"] = size;
                Navigation.PushAsync(new Intro5());
            };

            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    new StackLayout
                    {
                        Children = { ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        private void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)e.NewValue + 8;
            my.FontSize = size;
            bot.FontSize = size;
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro5 : ContentPage
    {
        Picker entry = new Picker();
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери валюту, курс которой ты хотел бы получать", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nВалюта\n";

        public Intro5()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro6());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in Currency.CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }

                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro6 : ContentPage
    {
        Entry entry = new Entry();

        string t = "\nМои подписки\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери ключевые слова, по которым ты хотел бы получать нвоости", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro6()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro7());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
            Display();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        async void Display()
        {
            await DisplayAlert("Важная информация!", "Выбери ключевые слова, по которым будет производиться поиск", "Понятно!");
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro7 : ContentPage
    {
        Button ok = new Button
        {
            Text = "Начать!",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Intro7()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Моя настройка закончена и я готов к работе!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            for (int i = 0; i < 8; i++)
                Navigation.RemovePage(Navigation.NavigationStack[0]);

        }

    }
}

using System;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using System.Drawing;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.IO;

[assembly: XamlCompilation(XamlCompilationOptions.Compile)]
namespace XBot
{
    public partial class App : Application
    {
    
        public App()
        {
            object obj;
            if (!App.Current.Properties.TryGetValue("messages", out obj))
                App.Current.Properties["messages"] = "";
            if (!App.Current.Properties.TryGetValue("subscribes", out obj))
                App.Current.Properties["subscribes"] = "";
            if (!App.Current.Properties.TryGetValue("count", out obj))
                App.Current.Properties["count"] = 5;
            if (!App.Current.Properties.TryGetValue("onstart", out obj))
                App.Current.Properties["onstart"] = "news";
            if (!App.Current.Properties.TryGetValue("back", out obj))
                App.Current.Properties["back"] = "255 255 255";
            if (!App.Current.Properties.TryGetValue("user", out obj))
                App.Current.Properties["user"] = "0 0 255";
            if (!App.Current.Properties.TryGetValue("bot", out obj))
                App.Current.Properties["bot"] = "128 0 128";
            if (!App.Current.Properties.TryGetValue("control", out obj))
                App.Current.Properties["control"] = "";
            if (!App.Current.Properties.TryGetValue("blocked", out obj))
                App.Current.Properties["blocked"] = false;
            if (!App.Current.Properties.TryGetValue("welcome", out obj))
                App.Current.Properties["welcome"] = true;
            if (!App.Current.Properties.TryGetValue("subscribes_intro", out obj))
                App.Current.Properties["subscribes_intro"] = true;
            if (!App.Current.Properties.TryGetValue("control_intro", out obj))
                App.Current.Properties["control_intro"] = true;
            if (!App.Current.Properties.TryGetValue("hint", out obj))
                App.Current.Properties["hint"] = true;
            if (!App.Current.Properties.TryGetValue("frequency", out obj))
                App.Current.Properties["frequency"] = "online";
            if (!App.Current.Properties.TryGetValue("frequency_intro", out obj))
                App.Current.Properties["frequency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("size", out obj))
                App.Current.Properties["size"] = 14;
            if (!App.Current.Properties.TryGetValue("size_intro", out obj))
                App.Current.Properties["size_intro"] = true;
            if (!App.Current.Properties.TryGetValue("type", out obj))
                App.Current.Properties["type"] = "";
            if (!App.Current.Properties.TryGetValue("type_intro", out obj))
                App.Current.Properties["type_intro"] = true;
            if (!App.Current.Properties.TryGetValue("currency", out obj))
                App.Current.Properties["currency"] = "";
            if (!App.Current.Properties.TryGetValue("currency_intro", out obj))
                App.Current.Properties["currency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("save", out obj))
                App.Current.Properties["save"] = "";
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            else
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            MainPage = (bool)App.Current.Properties["welcome"] ? new NavigationPage(new Welcome()) : (bool)App.Current.Properties["hint"] ? new NavigationPage(new Hint()) : new NavigationPage(new MainPage());
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Http;
using System.Threading.Tasks;
using System.Threading;

namespace XBot
{
    static class Bot
    {
     
        public static readonly HttpClient client = new HttpClient();

        async public static void GetNews(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mess = "";
            int count = 0;
            try
            {
                line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=1&update=1401216280");
                string[] elems = line.Split('\n');
                for (int i = 1; count < (int)App.Current.Properties["count"] && i < elems.Length; i++)
                {
                    string[] first = elems[i].Split('\t');
                    string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                    string[] elems1 = info.Split('\t');
                    if (!Denied(elems1[1]))
                    {
                        mess += $"{elems1[1]}\n֍{elems1[0]}֍";
                        count++;
                    }
                }
            }
            catch (IndexOutOfRangeException) { }
            catch (Exception ex) 
            { 
                string a = ex.ToString();
                line = "";
            }
            mess += '\b';
            Chat.Remove();
            mess = $"Топ-{count} новостей на {Now} за {Period}\n\n֍֍" + mess;
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0 || count == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(mess.Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Search(MainPage m, IEnumerable<string> requests, bool type)
        {
            m.Active(false);
            int count = 1;
            int amount = 0;
            string mess = "";
            string line = "";
            try
            {
                while (count != 4 && amount < (int)App.Current.Properties["count"])
                {
                    line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=" + count.ToString() + "&update=1401216280");
                    string[] elems = line.Split('\n');
                    for (int i = 1; i < elems.Length; i++)
                    {
                        string[] first = elems[i].Split('\t');
                        string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                        string[] elems1 = info.Split('\t');
                        foreach (string str in requests)
                        {
                            if (IsSubString(elems1[1].ToLower(), str.ToLower()) && !Denied(elems1[1]))
                            {
                                mess += elems1[1] + "\n֍" + elems1[0] + "֍";
                                amount++;
                            }
                            if (amount == (int)App.Current.Properties["count"])
                                goto go;
                        }
                        count++;
                    }
                }
            }
            catch { }
            go:
            Chat.Remove();
            string name = "";
            if (type)
                name = "подписок";
            else
                name = $"новостей по запросу \"{FromIEnumerable(requests)}\"";
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(($"Топ-{amount} {name} на {Now} за {Period}\n\n֍֍" + mess + "\b\b\b").Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Currency(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mes = $"CКурс валют на {Now}\n";
            List<string> cur = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            try
            {
                byte[] s = await client.GetByteArrayAsync("https://www.cbr-xml-daily.ru/daily_json.js");
                line = Encoding.UTF8.GetString(s, 0, s.Length);
                string[] vl = line.Split('\n');
                for (int i = cur.Count - 1; i >= 0; i--)
                {
                    int num = XBot.Currency.CurrencyNum[cur[i]];
                    string[] ss = vl[num].Split(':')[1].Split(' ')[1].Split(',')[0].Split('.');
                    string p = vl[num - 2].Split(':')[1].Split(' ')[1].Split(',')[0];
                    double val = double.Parse(ss[0]) + double.Parse(ss[1]) / 10000; 
                    int a = int.Parse(p);
                    val = val / a + 0.005;
                    mes += $"{XBot.Currency.CurrencyId[cur[i]]}: {val:f2}\n";
                }
            }
            catch(Exception ex) { string a = ex.ToString(); }
            Chat.Remove();
            if (line == "")
                Chat.Add("Отсутствует подключение к интернету", true);
            else
                Chat.Add(mes, true);
            m.Display();
            m.Active(true);
        }


        static string FromIEnumerable(IEnumerable<string> arr)
        {
            string line = "";
            foreach (string s in arr)
                line += s + " ";
            return line.Substring(0, line.Length - 1);
        }

        static bool IsSubString(string name, string str)
        {
            if (str.Length > 5)
                str = str.Substring(0, str.Length - 2);
            return name.Contains(str);
        }

        static bool Denied(string news)
        {
            if (!(bool)App.Current.Properties["blocked"])
                return false;
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            foreach (string str in subs)
                if (news.ToLower().Contains(str.ToLower()))
                    return true;
            return false;
        }

        static string Period
        {
            get 
            {
                switch ((string)App.Current.Properties["frequency"])
                {
                    case "online":
                        return "последние 10 минут";
                    case "hour":
                        return "последний час";
                    case "day":
                        return "последние сутки";
                    case "week":
                        return "последнюю неделю";
                    default:
                        return "последний месяц";
                }
            }
        }

        static string Now
        {
            get {
                string datetime = DateTime.Now.ToString();
                string line = "";
                if (datetime[0] == '0')
                    datetime = datetime.Substring(1);
                string[] d1 = datetime.Split(' ');
                string[] date;
                if (!DateTime.Now.ToString().Contains("/"))
                {
                    date = d1[0].Split('.');
                    line += $"{date[0]} {Month(date[1])} ";
                }
                else
                {
                    date = d1[0].Split('/');
                    line += $"{date[1]} {Month(date[0])} ";
                }
                string[] time = d1[1].Split(':');
                line += time[0] + ":" + time[1];
                return line;
            }
        }

        static string Month(string num)
        {
            if (num[0] == '0')
                num = num.Substring(1);
            switch (int.Parse(num))
            {
                case 1:
                    return "января";
                case 2:
                    return "февраля";
                case 3:
                    return "марта";
                case 4:
                    return "апреля";
                case 5:
                    return "мая";
                case 6:
                    return "июня";
                case 7:
                    return "июля";
                case 8:
                    return "августа";
                case 9:
                    return "сентбря";
                case 10:
                    return "октября";
                case 11:
                    return "ноября";
                default:
                    return "декабря";
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace XBot
{
    static class Chat
    {
        public static void Add(string message, bool sender)
        {
            string mess = "";
            if (sender)
                mess += "B";
            else
                mess += "U";
            mess += message;
            Formats.Add(mess, "messages");
        }

        public static void Remove()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            mes.RemoveAt(mes.Count - 1);
            App.Current.Properties["messages"] = Formats.FromListIntoString(mes);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public partial class MainPage : ContentPage
    {
        async void Command()
        {
            Chat.Add(message.Text, false);
            switch (message.Text.Split(' ')[0])
            {
                case "/light":
                    App.Current.Properties["back"] = "255 255 255";
                    App.Current.Properties["user"] = "0 0 255";
                    App.Current.Properties["bot"] = "128 0 128";
                    Chat.Add("Тема сменена на светлую", true);
                    break;
                case "/dark":
                    App.Current.Properties["back"] = "30 30 30";
                    App.Current.Properties["user"] = "86 156 214";
                    App.Current.Properties["bot"] = "80 80 80";
                    Chat.Add("Тема сменена на темную", true);
                    break;
                case "/news":
                    NewsClick(new object(), new EventArgs());
                    break;
                default:
                    Chat.Add("Неизвестная команда!", true);
                    break;

            }
            Display();
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Control : ContentPage
    {

        Entry entry = new Entry();
        string t = "\nРодительский контроль\n";

        public Control()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительный запрет",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Button exit = new Button
            {
                Text = "Отключить контоль",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            exit.Clicked += Deny;
            Button apply = new Button
            {
                Text = "Применить",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            apply.Clicked += Apply;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    exit,
                    apply
                }
            };
        }

        async void Apply(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        async void Deny(object sender, EventArgs e)
        {
            App.Current.Properties["blocked"] = false;
            App.Current.Properties["control"] = "";
            await Navigation.PopAsync();
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class ControlIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public ControlIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Родительский контроль";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Родительский контроль\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет игнорироваться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["control_intro"] = false;
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class Currency : ContentPage
    {
        Picker entry = new Picker();

        string t = "\nВалюта\n";

        public Currency()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };             
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        public static Dictionary<string, int> CurrencyNum = new Dictionary<string, int>
        {
            {"Австралийский доллар", 12},
            {"Азербайджанский манат", 21},
            {"Фунт стерлингов Соединенного королевства", 30},
            {"Армянский драм", 39},
            {"Белорусский рубль", 48},
            {"Болгарский лев", 57},
            {"Бразильский реал", 66},
            {"Венгерский форинт", 75},
            {"Гонконгский доллар", 84},
            {"Датская крона", 93},
            {"Доллар США", 102},
            {"Евро", 111},
            {"Индийская рупия", 120},
            {"Казахстанский тенге", 129},
            {"Канадский доллар", 138},
            {"Киргизский сом", 147},
            {"Китайский юань", 156},
            {"Молдавский лей", 165},
            {"Норвежская крона", 174},
            {"Польский злотый", 183},
            {"Румынский лей", 192},
            {"Сингапурский доллар", 210},
            {"Таджикский сомони", 219},
            {"Турецкая лира", 228},
            {"Новый туркменский манат", 237},
            {"Узбекский сум", 246},
            {"Украинская гривна", 255},
            {"Чешская крона", 264},
            {"Шведская крона", 273},
            {"Швейцарский франк", 282},
            {"Южноафриканский рэнд", 291},
            {"Вон Республики Корея", 300},
            {"Японская иена", 309}
        };

        public static Dictionary<string, string> CurrencyId = new Dictionary<string, string>
        {
            {"Австралийский доллар", "AUD"},
            {"Азербайджанский манат", "AZN"},
            {"Фунт стерлингов Соединенного королевства", "GBP"},
            {"Армянский драм", "AMD"},
            {"Белорусский рубль", "BYN"},
            {"Болгарский лев", "BGN"},
            {"Бразильский реал", "BRL"},
            {"Венгерский форинт", "HUF"},
            {"Гонконгский доллар", "HKD"},
            {"Датская крона", "DKK"},
            {"Доллар США", "USD"},
            {"Евро", "EUR"},
            {"Индийская рупия", "INR"},
            {"Казахстанский тенге", "KZT"},
            {"Канадский доллар", "CAD"},
            {"Киргизский сом", "KGS"},
            {"Китайский юань", "CNY"},
            {"Молдавский лей", "MDL"},
            {"Норвежская крона", "NOK"},
            {"Польский злотый", "PLN"},
            {"Румынский лей", "RON"},
            {"Сингапурский доллар", "SGD"},
            {"Таджикский сомони", "TJS"},
            {"Турецкая лира", "TRY"},
            {"Новый туркменский манат", "TMT"},
            {"Узбекский сум", "UZS"},
            {"Украинская гривна", "UAH"},
            {"Чешская крона", "CZK"},
            {"Шведская крона", "SEK"},
            {"Швейцарский франк", "CHF"},
            {"Южноафриканский рэнд", "ZAR"},
            {"Вон Республики Корея", "KRW"},
            {"Японская иена", "JPY"}
        };
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class CurrencyIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public CurrencyIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Валюта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Валюта\"!\n\n" +
                                "В этом разделе можно добавить валюты, по которым будет проводиться поиск.\n\n",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["currency_intro"] = false;
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{

    public static class Elements
    {
        public static Frame LabelAndElement(string labeltext, View element)
        {
            return new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Label
                        {
                            TextColor = Styles.UserColor,
                            Text = labeltext,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            VerticalOptions = LayoutOptions.Center,
                            HorizontalTextAlignment = TextAlignment.Start
                        },
                        element
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Frame ButtonInFrame(Button b)
        {
            return new Frame
            {
                Content = b,
                BorderColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Button Button(string text, bool fill)
        {
            Button b = new Button
            {
                Text = text,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor
            };
            if (fill)
                b.HorizontalOptions = LayoutOptions.FillAndExpand;
            return b;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XBot
{
    static class Formats
    {

        public const char parse = '÷';

        public static string FromListIntoString(List<string> l)
        {
            if (l.Count == 0)
                return "";
            string line = "";
            for (int i = 0; i < l.Count; i++)
                line += l[i].Replace(parse.ToString(), parse.ToString() + parse.ToString()) + parse;
            return line.Substring(0, line.Length - 1);
        }

        public static List<string> FromStringIntoList(string line)
        {
            if (line == null || line.Length == 0)
                return new List<string>();
            string word = "";
            List<string> l = new List<string>();
            int i = 0;
            while (i < line.Length)
            {
                if (line[i] != parse)
                    word += line[i];
                else if (line[i + 1] == parse)
                    word += line[i++];
                else
                {
                    l.Add(word);
                    word = "";
                }
                i++;
            }
            l.Add(word);
            return l;
        }

        public static void Add(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Add(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

        public static void Remove(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Remove(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Hint : ContentPage
    {
        Button ok = new Button
        {
            Text = "Спасибо",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        string[] hints =
        {
            "При нажатии на кнопку 📈 я расскажу тебе о курсе валют",
            "При нажатии на кнопку 🤵 я расскажу тебе о последних новостях из твоих подписок",
            "При нажатии на кнопку 🔝 я расскажу тебе о последних новостях",
            "При нажатии на кнопку ⭐ я выведу избранные статьи",
            "В настройках можно указать количество новостей выводимых за раз",
            "В настройках можно сменить цветовую схему",
            "В настройках можно сменить контент, показываемый при запуске",
            "В настройках можно сохранить ключевые слова для поиска в разделе \"Мои подписки\"",
            "В настройках можно запретить показывать нежелательный контент в разделе \"Родительский контроль\"",
            "В настройках можно очистить диалоговое окно",
            "В настройках можно указать период времени, по которому будет проводиться поиск",
            "В настройках можно выбрать размер шрифта в чате",
            "Любимые статьи можно добавить в избранное"
        };

        public Hint()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text = hints[(new Random()).Next(hints.Length)],
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Xamarin.Forms;
using System.Drawing;



namespace XBot
{

    public partial class MainPage : ContentPage
    {
        Frame frame;
        Entry message;
        ScrollView scroll;
        StackLayout stack;
        Button settings;
        Button news;
        Button subscribes;
        Button currency;
        Button favs;

        public MainPage()
        {
            Title = "Диалог";
            NavigationPage.SetHasNavigationBar(this, false);
            message = new Entry
            {
                Placeholder = "Сообщение",
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                FontSize = 20,
                BackgroundColor = Styles.BackColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor
            };
            message.Completed += ButtonClick;
            settings = new Button
            {
                Text = "⚙️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            subscribes = new Button
            {
                Text = "🤵",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news = new Button
            {
                Text = "🔝",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            currency = new Button
            {
                Text = "📈",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            favs = new Button
            {
                Text = "⭐️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news.Clicked += NewsClick;
            settings.Clicked += SettingsClick;
            subscribes.Clicked += SubscribesClick;
            currency.Clicked += CurrencyClick;
            favs.Clicked += FavsClick;
            string line = (string)App.Current.Properties["messages"];
            if (line.Length == 0)
                frame = new Frame { HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            else
                MakeFrame();
            MakeContent();
            if ((string)App.Current.Properties["onstart"] == "news")
                NewsClick(new object(), new EventArgs());
            else if ((string)App.Current.Properties["onstart"] == "subscribes")
                SubscribesClick(new object(), new EventArgs());
            else
                CurrencyClick(new object(), new EventArgs());
        }

        private void FavsClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["save"] == "")
                Chat.Add("Список избранного пуст!", true);
            else
            {
                if ((string)App.Current.Properties["messages"] != "")
                    App.Current.Properties["messages"] += Formats.parse.ToString();
                App.Current.Properties["messages"] += $"BИзбранное:\n\n֍֍{((string)App.Current.Properties["save"]).Replace(Formats.parse.ToString(), "֍")}";
            }
            Display();
        }

        public void Active(bool act)
        {
            message.IsEnabled = act;
            settings.IsEnabled = act;
            subscribes.IsEnabled = act;  
            news.IsEnabled = act;
            currency.IsEnabled = act;
            favs.IsEnabled = act;
        }

        private void SubscribesClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["subscribes"] == "")
            {
                Chat.Add("Список подписок пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                Chat.Add("Ищу подписки...", true);
                Display();
                Bot.Search(this, Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]), true);
            }

        }

        private void SettingsClick(object sender, EventArgs e)
        {
            Navigation.PushAsync(new Settings(this));
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["currency"] == "")
            {
                Chat.Add("Список валют пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                try
                {
                    Chat.Add("Вычисляю курс валют...", true);
                    Display();
                    Bot.Currency(this);
                }
                catch { }
            }
        }

        private void NewsClick(object sender, EventArgs e)
        {
            try
            {
                Chat.Add("Ищу новости...", true);
                Display();
                Bot.GetNews(this);
            }
            catch { }
        }

        private void ButtonClick(object sender, EventArgs e)
        {
            if (message.Text == null || message.Text.Length == 0)
                return;
            else
            {
                Chat.Add(message.Text, false);
                Chat.Add($"Выполняю поиск по запросу \"{message.Text}\"...", true);
                Display();
                Bot.Search(this, message.Text.Split(' '), false);
            }
            message.Text = "";
        }

        public void Display()
        {
            MakeFrame();
            MakeContent();
        }

        public void MakeContent()
        {
            Content = new StackLayout
            {
                Children =
                {
                    frame,
                    message,
                    new StackLayout
                    {
                        Children =
                        {
                            settings,
                            subscribes,
                            news,
                            currency,
                            favs
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                }
            };
            BackgroundColor = Styles.BackColor;
            message.TextColor = Styles.UserColor;
            message.BackgroundColor = Styles.BackColor;
            settings.BackgroundColor = Styles.BackColor;
            subscribes.BackgroundColor = Styles.BackColor;
            news.BackgroundColor = Styles.BackColor;
            currency.BackgroundColor = Styles.BackColor;
            favs.BackgroundColor = Styles.BackColor;
            if (scroll != null)
                scroll.ScrollToAsync(stack, ScrollToPosition.End, false);
        }

        public void MakeFrame()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            frame = new Frame { HasShadow = false, HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            stack = new StackLayout { VerticalOptions = LayoutOptions.End };
            for (int i = 0; i < mes.Count; i++)
            {
                Frame f = new Frame { BackgroundColor = Styles.BotColor, CornerRadius = 30, HasShadow = false };
                if (mes[i][0] == 'U')
                    f = new Frame
                    {
                        Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                        BorderColor = Styles.UserColor,
                        HorizontalOptions = LayoutOptions.End,
                        BackgroundColor = Styles.UserColor,
                        CornerRadius = 30,
                        HasShadow = false
                    };
                else
                {
                    if (mes[i][1] == 'C')
                    {
                        string[] cur = mes[i].Substring(2, mes[i].Length - 3).Split('\n');
                        StackLayout sl = new StackLayout();
                        sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[0], BackgroundColor = Styles.BotColor, FontSize = Styles.Size, FontAttributes = FontAttributes.Bold });
                        for (int j = 1; j < cur.Length; j++)
                            sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[j], BackgroundColor = Styles.BotColor, FontSize = Styles.Size * 3 / 2 });
                        f.Content = sl;
                    }
                    else if (mes[i].Split('֍').Length == 1)
                    {
                        Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
                        f.Content = l;
                    }
                    else
                    {
                        string[] info = mes[i].Substring(1).Split('֍');
                        StackLayout sl = new StackLayout();
                        Dictionary<string, string> dict = new Dictionary<string, string>();
                        for (int j = 0; j < info.Length / 2; j++)
                        {
                            dict[info[2 * j]] = info[2 * j + 1];
                            Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = info[2 * j], FontSize = Styles.Size, BackgroundColor = Styles.BotColor };
                            if (j > 0)
                            {
                                var tapGestureRecognizer = new TapGestureRecognizer();
                                tapGestureRecognizer.Tapped += (s, e) =>
                                {
                                    string tmp = dict[l.Text];
                                    Navigation.PushAsync(new ShowContent(tmp, l.Text));
                                };
                                l.GestureRecognizers.Add(tapGestureRecognizer);
                            }
                            else
                                l.FontAttributes = FontAttributes.Bold;
                            sl.Children.Add(l);
                        }
                        f.Content = sl;
                    }
                    f.BorderColor = Styles.BotColor;
                    f.HorizontalOptions = LayoutOptions.Start;
                }
                f.VerticalOptions = LayoutOptions.End;
                stack.Children.Add(new Label { FontSize = Styles.Size / 2, Text = "\n" });
                stack.Children.Add(f);
            }
            scroll = new ScrollView { Content = stack };
            frame.Content = scroll;
        }

    }
}

using System;
namespace XBot
{
    public partial class Settings
    {

        void MakeDark(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            else
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            main.Display();
            MakeContent();
        }

        void TimeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["frequency_intro"])
                Navigation.PushAsync(new TimingIntro());
            else
                Navigation.PushAsync(new Timing());
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["currency_intro"])
                Navigation.PushAsync(new CurrencyIntro());
            else
                Navigation.PushAsync(new Currency());
        }

        void TypeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["type_intro"])
                Navigation.PushAsync(new TypeIntro());
            else
                Navigation.PushAsync(new Type());
        }

        void ClearClick(object sender, EventArgs e)
        {
            App.Current.Properties["messages"] = "";
            main.Display();
        }

        void SubsClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["subscribes_intro"])
                Navigation.PushAsync(new SubscribesIntro());
            else
                Navigation.PushAsync(new Subscribes());
        }

        void ControlClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["control_intro"])
                Navigation.PushAsync(new ControlIntro());
            else
                Navigation.PushAsync(new Password());
        }

        void SizeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["size_intro"])
                Navigation.PushAsync(new SizeIntro(main));
            else
                Navigation.PushAsync(new Size(main));
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Password : ContentPage
    {

        Entry pass = new Entry
        {
            Placeholder = "Пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Entry repeat = new Entry
        {
            Placeholder = "Повторите пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Button enter = new Button
        {
            Text = "Войти",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End
        };

        string t = "\nРодительский контроль\n";

        public Password()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            StackLayout sl = new StackLayout();
            sl.Children.Add
                (new Label
                {
                    Text = t,
                    HorizontalTextAlignment = TextAlignment.Center,
                    FontSize = 20,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    VerticalOptions = LayoutOptions.Start,
                    TextColor = Styles.UserColor,
                    FontAttributes = FontAttributes.Bold,
                    BackgroundColor = Styles.BackColor
                });
            if (!(bool)App.Current.Properties["blocked"])
            {
                pass.Placeholder = "Придумайте пароль";
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                sl.Children.Add
                    (new Frame
                    {
                        Content = repeat,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Register;
            }
            else
            {
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Login;
                pass.Completed += Login;
            }
            sl.Children.Add(enter);
            Content = sl;
        }

        async void Register(object sender, EventArgs e)
        {
            if (pass.Text == "" || pass.Text == null)
                await DisplayAlert("Ошибка!", "Поле пароля пустое!", "Ок");
            else if (pass.Text != repeat.Text)
                await DisplayAlert("Ошибка!", "Пароли не совпадают!", "Ок");
            else
            {
                App.Current.Properties["password"] = pass.Text;
                App.Current.Properties["blocked"] = true;
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
        }

        async void Login(object sender, EventArgs e)
        {
            if (pass.Text == (string)App.Current.Properties["password"])
            {
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
            else
                await DisplayAlert("Ошибка!", "Неверно введен пароль!", "Ок");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace XBot
{
    public partial class Settings : ContentPage
    {
        Picker OnStart = new Picker { Items = { "🔝Последние новости", "🤵Мои подписки", "📈Курс валют" }, WidthRequest = 30 };
        Switch Hints = new Switch();
        Picker amount = new Picker { Items = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }, WidthRequest = 30, TextColor = Styles.UserColor };
        MainPage main;
        string t = "\nНастройки\n";

        public Settings(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Настройки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            amount.SelectedIndex = (int)App.Current.Properties["count"] - 1;
            amount.SelectedIndexChanged += (object sender, EventArgs e) => { App.Current.Properties["count"] = amount.SelectedIndex + 1; };
            OnStart.SelectedIndex = (string)App.Current.Properties["onstart"] == "news" ? 0 : (string)App.Current.Properties["onstart"] == "subscribes" ? 1 : 2;
            Hints.IsToggled = (bool)App.Current.Properties["hint"];
            Hints.Toggled += (object sender, ToggledEventArgs e) => App.Current.Properties["hint"] = !(bool)App.Current.Properties["hint"];
            OnStart.SelectedIndexChanged += (object sender, EventArgs e) =>
            {
                if (OnStart.SelectedIndex == 0)
                    App.Current.Properties["onstart"] = "news";
                else if (OnStart.SelectedIndex == 1)
                    App.Current.Properties["onstart"] = "subscribes";
                else
                    App.Current.Properties["onstart"] = "currency";
            };
            MakeContent();
        }

        void MakeContent()
        {
            BackgroundColor = Styles.BackColor;
            Button Dark = Elements.Button("Сменить", false);
            Button Time = Elements.Button("Область поиска", true);
            Button Size = Elements.Button("Размер шрифта", true);
            Button Type = Elements.Button("Тематика новостей", true);
            Button Clear = Elements.Button("Очистить диалоговое окно", true);
            Button Subs = Elements.Button("Мои подписки", true);
            Button Control = Elements.Button("Родительский контроль", true);
            Button Support = Elements.Button("Поддержать", true);
            Button Currency = Elements.Button("Валюта", true);
            Time.Clicked += TimeClick;
            Clear.Clicked += ClearClick;
            Subs.Clicked += SubsClick;
            Control.Clicked += ControlClick;
            Size.Clicked += SizeClick;
            Type.Clicked += TypeClick;
            Currency.Clicked += CurrencyClick;
            Support.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Support());
            Dark.Clicked += MakeDark;
            amount.TextColor = Styles.UserColor;
            OnStart.BackgroundColor = Styles.BackColor;
            amount.BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                Elements.LabelAndElement("Количество новостей за раз", amount),
                                Elements.LabelAndElement("При старте показывать", OnStart),
                                Elements.LabelAndElement("Цветовая тема", Dark),
                                Elements.LabelAndElement("Показывать подсказки", Hints),
                                Elements.ButtonInFrame(Type),
                                Elements.ButtonInFrame(Time),
                                Elements.ButtonInFrame(Currency),
                                Elements.ButtonInFrame(Size),
                                Elements.ButtonInFrame(Subs),
                                Elements.ButtonInFrame(Control),
                                Elements.ButtonInFrame(Clear),
                                Elements.ButtonInFrame(Support)
                            }
                        }
                    }
                }
            };
            
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class ShowContent : ContentPage
    {

        string title;
        string url;

        Button save = new Button
        {
            Text = "☆",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand,
            FontSize = 20
        };

        Button back = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        Button internet = new Button
        {
            Text = "🌎",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        public ShowContent(string url, string title)
        {
            this.title = title;
            this.url = url;
            BackgroundColor = Styles.BackColor;
            back.Clicked += BackClick;
            internet.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("http://" + url));
            if (Device.RuntimePlatform == "iOS")
                Title = title;
            else
                NavigationPage.SetHasNavigationBar(this, false);
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (PositionInList(favs, $"{title}֍{url}") != -1)
                save = new Button
                {
                    Text = "★",
                    BackgroundColor = Styles.BackColor,
                    TextColor = Color.Yellow,
                    BorderColor = Color.Yellow,
                    VerticalOptions = LayoutOptions.End,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    FontSize = 20
                };
            save.Clicked += SaveClick;
            Content = new StackLayout { Children = { new WebView { Source = "http://" + url, VerticalOptions = LayoutOptions.FillAndExpand }, new StackLayout { Children = { back, internet, save }, Orientation = StackOrientation.Horizontal } } };
        }

        void SaveClick(object sender, EventArgs e)
        {
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (save.Text == "☆")
            {
                favs.Add($"{title}֍{url}");
                save.Text = "★";
                save.TextColor = Color.Yellow;
            }
            else
            {
                favs.Remove($"{title}֍{url}");
                save.Text = "☆";
                save.TextColor = Styles.UserColor;
            }
            App.Current.Properties["save"] = Formats.FromListIntoString(favs);
        }

        async void BackClick(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        static int PositionInList(List<string> list, string line)
        {
            for (int i = 0; i < list.Count; i++)
                if (list[i] == line)
                    return i;
            return -1;
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Size : ContentPage
    {

        MainPage main;
        string t = "\nРазмер шрифта\n";
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Button ok = new Button
        {
            Text = "Применить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        int size = Styles.Size;
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        public Size(MainPage m)
        {
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            main = m;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += Ok_Clicked;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    ok
                }
            };
        }

        async void Ok_Clicked(object sender, EventArgs e)
        {
            App.Current.Properties["size"] = size;
            main.Display();
            await Navigation.PopAsync();
        }


        void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)(e.NewValue + 8);
            my.FontSize = size;
            bot.FontSize = size;
        }


        

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SizeIntro : ContentPage
    {
        MainPage main;
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SizeIntro(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Размер шрифта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Размер шрифта\"!\n\n" +
                                "В этом разделе можно выбрать размер шрифта сообщений в чате.\n\n" +
                                "Обратите внимание, что размер шрифта в первую очередь зависит от разрешения экрана.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["size_intro"] = false;
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{
    static class Styles
    {

        public static Xamarin.Forms.Color BackColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["back"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color UserColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["user"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color BotColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["bot"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static int Size
        {
            get => (int)App.Current.Properties["size"];
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Subscribes : ContentPage
    {

        Entry entry = new Entry();

        string t = "\nМои подписки\n";

        public Subscribes()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SubscribesIntro : ContentPage
    {

        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SubscribesIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Мои подписки";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Мои подписки\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет автоматически проводиться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["subscribes_intro"] = false;
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Support : ContentPage
    {
        Button ok = new Button
        {
            Text = "Поддержать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public Support()
        {
            ok.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("https://money.yandex.ru/to/410014676758208"));
            if (Device.RuntimePlatform == "iOS")
                Title = "Поддержать";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Большое спасибо за скачивание и использование моего приложения!\n\n" +
                                "Я верю в то, что оно тебе нравится, и ты поставил ему оценку в магазине приложений.\n\n" +
                                "Если хочешь поддержать меня материально, а также сделать вклад в будущие проекты, нажми на кнопку ниже😉",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    Elements.ButtonInFrame(ok)
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Timing : ContentPage
    {

        string t = "\nОбласть поиска\n";
        public Timing()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class TimingIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TimingIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Область поиска";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Область поиска\"!\n\n" +
                                "В этом разделе можно выбрать промежуток времени, в который будет проводиться поиск.\n\n" +
                                "Обратите внимание, что при выборе большого промежутка, новости могут быть устаревшими.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["frequency_intro"] = false;
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Type : ContentPage
    {
        string t = "\nТематика новостей\n";
        public Type()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class TypeIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TypeIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Тематика новостей";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Тематика новостей\"!\n\n" +
                                "В этом разделе можно выбрать тематику, по которой будет проводиться поиск.\n\n",                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["type_intro"] = false;
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Welcome : ContentPage
    {
        Button ok = new Button
        {
            Text = "Настроить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Button ignore = new Button
        {
            Text = "Пропустить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Welcome()
        {
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Привет, я XBot! Я буду присылать тебе новости, но на этом мои функции не ограничиваются!\n\n" +
                                "Еще я умею обрабатывать запросы, сохранять их, вычислять курс валют, а также ограничивать доступ к ненужному контенту.\n\n" +
                                "Я использую открытое API Mediametrics и центрального банка России, за что им огромное спасибо!\n\n" +
                                "Я являюсь некоммерческим проектом и создан в образовательных целях. Если у тебя возникли замечания или предложения, напиши моему создателю: emmtvv@icloud.com.\n\n" +
                                "Нажми на кнопку \"Настроить\", чтобы я работал максимально комфортно для тебя!\n\n" +
                                "Приятного пользования!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new XBot.SettingsOnStart.Intro1());
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro1 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help;
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro1()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Цветовая тема";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            MakeContent();
            dark.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
                MakeContent();
            };
            light.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
                MakeContent();
            };
        }

        string t = "\nЦветовая тема\n";
        Button dark = new Button { Text="     ", BackgroundColor = Color.FromRgb(30, 30, 30), BorderColor = Color.FromRgb(255,255,255), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };
        Button light = new Button { Text = "     ", BackgroundColor = Color.FromRgb(255, 255, 255), BorderColor = Color.FromRgb(30, 30, 30), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };

        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери цветовую тему приложения", "Хорошо!");
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            help = new Button
            {
                Text = "?",
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro2());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new Frame
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                                    BorderColor = Styles.UserColor,
                                    HorizontalOptions = LayoutOptions.End,
                                    BackgroundColor = Styles.UserColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                },
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size },
                                    BorderColor = Styles.BotColor,
                                    HorizontalOptions = LayoutOptions.Start,
                                    BackgroundColor = Styles.BotColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                }
                            }
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        HasShadow = false,
                        BackgroundColor = Styles.BackColor
                    },
                    new StackLayout
                    {
                        Children =
                        {
                            light,
                            dark
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro2 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери тематику, по которой будет проводиться поиск", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nТематика новостей\n";
        public Intro2()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro3());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro3 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери временной интервал поиска новостей", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nОбласть поиска\n";
        public Intro3()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro4());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro4 : ContentPage
    {
        string t = "\nРазмер шрифта\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        int size = (int)App.Current.Properties["size"];
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери размер шрифта в диалоге", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro4()
        {
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["size"] = size;
                Navigation.PushAsync(new Intro5());
            };

            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    new StackLayout
                    {
                        Children = { ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        private void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)e.NewValue + 8;
            my.FontSize = size;
            bot.FontSize = size;
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro5 : ContentPage
    {
        Picker entry = new Picker();
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери валюту, курс которой ты хотел бы получать", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nВалюта\n";

        public Intro5()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro6());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in Currency.CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }

                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro6 : ContentPage
    {
        Entry entry = new Entry();

        string t = "\nМои подписки\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери ключевые слова, по которым ты хотел бы получать нвоости", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro6()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro7());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
            Display();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        async void Display()
        {
            await DisplayAlert("Важная информация!", "Выбери ключевые слова, по которым будет производиться поиск", "Понятно!");
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro7 : ContentPage
    {
        Button ok = new Button
        {
            Text = "Начать!",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Intro7()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Моя настройка закончена и я готов к работе!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            for (int i = 0; i < 8; i++)
                Navigation.RemovePage(Navigation.NavigationStack[0]);

        }

    }
}

using System;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using System.Drawing;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.IO;

[assembly: XamlCompilation(XamlCompilationOptions.Compile)]
namespace XBot
{
    public partial class App : Application
    {
    
        public App()
        {
            object obj;
            if (!App.Current.Properties.TryGetValue("messages", out obj))
                App.Current.Properties["messages"] = "";
            if (!App.Current.Properties.TryGetValue("subscribes", out obj))
                App.Current.Properties["subscribes"] = "";
            if (!App.Current.Properties.TryGetValue("count", out obj))
                App.Current.Properties["count"] = 5;
            if (!App.Current.Properties.TryGetValue("onstart", out obj))
                App.Current.Properties["onstart"] = "news";
            if (!App.Current.Properties.TryGetValue("back", out obj))
                App.Current.Properties["back"] = "255 255 255";
            if (!App.Current.Properties.TryGetValue("user", out obj))
                App.Current.Properties["user"] = "0 0 255";
            if (!App.Current.Properties.TryGetValue("bot", out obj))
                App.Current.Properties["bot"] = "128 0 128";
            if (!App.Current.Properties.TryGetValue("control", out obj))
                App.Current.Properties["control"] = "";
            if (!App.Current.Properties.TryGetValue("blocked", out obj))
                App.Current.Properties["blocked"] = false;
            if (!App.Current.Properties.TryGetValue("welcome", out obj))
                App.Current.Properties["welcome"] = true;
            if (!App.Current.Properties.TryGetValue("subscribes_intro", out obj))
                App.Current.Properties["subscribes_intro"] = true;
            if (!App.Current.Properties.TryGetValue("control_intro", out obj))
                App.Current.Properties["control_intro"] = true;
            if (!App.Current.Properties.TryGetValue("hint", out obj))
                App.Current.Properties["hint"] = true;
            if (!App.Current.Properties.TryGetValue("frequency", out obj))
                App.Current.Properties["frequency"] = "online";
            if (!App.Current.Properties.TryGetValue("frequency_intro", out obj))
                App.Current.Properties["frequency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("size", out obj))
                App.Current.Properties["size"] = 14;
            if (!App.Current.Properties.TryGetValue("size_intro", out obj))
                App.Current.Properties["size_intro"] = true;
            if (!App.Current.Properties.TryGetValue("type", out obj))
                App.Current.Properties["type"] = "";
            if (!App.Current.Properties.TryGetValue("type_intro", out obj))
                App.Current.Properties["type_intro"] = true;
            if (!App.Current.Properties.TryGetValue("currency", out obj))
                App.Current.Properties["currency"] = "";
            if (!App.Current.Properties.TryGetValue("currency_intro", out obj))
                App.Current.Properties["currency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("save", out obj))
                App.Current.Properties["save"] = "";
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            else
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            MainPage = (bool)App.Current.Properties["welcome"] ? new NavigationPage(new Welcome()) : (bool)App.Current.Properties["hint"] ? new NavigationPage(new Hint()) : new NavigationPage(new MainPage());
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Http;
using System.Threading.Tasks;
using System.Threading;

namespace XBot
{
    static class Bot
    {
     
        public static readonly HttpClient client = new HttpClient();

        async public static void GetNews(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mess = "";
            int count = 0;
            try
            {
                line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=1&update=1401216280");
                string[] elems = line.Split('\n');
                for (int i = 1; count < (int)App.Current.Properties["count"] && i < elems.Length; i++)
                {
                    string[] first = elems[i].Split('\t');
                    string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                    string[] elems1 = info.Split('\t');
                    if (!Denied(elems1[1]))
                    {
                        mess += $"{elems1[1]}\n֍{elems1[0]}֍";
                        count++;
                    }
                }
            }
            catch (IndexOutOfRangeException) { }
            catch (Exception ex) 
            { 
                string a = ex.ToString();
                line = "";
            }
            mess += '\b';
            Chat.Remove();
            mess = $"Топ-{count} новостей на {Now} за {Period}\n\n֍֍" + mess;
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0 || count == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(mess.Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Search(MainPage m, IEnumerable<string> requests, bool type)
        {
            m.Active(false);
            int count = 1;
            int amount = 0;
            string mess = "";
            string line = "";
            try
            {
                while (count != 4 && amount < (int)App.Current.Properties["count"])
                {
                    line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=" + count.ToString() + "&update=1401216280");
                    string[] elems = line.Split('\n');
                    for (int i = 1; i < elems.Length; i++)
                    {
                        string[] first = elems[i].Split('\t');
                        string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                        string[] elems1 = info.Split('\t');
                        foreach (string str in requests)
                        {
                            if (IsSubString(elems1[1].ToLower(), str.ToLower()) && !Denied(elems1[1]))
                            {
                                mess += elems1[1] + "\n֍" + elems1[0] + "֍";
                                amount++;
                            }
                            if (amount == (int)App.Current.Properties["count"])
                                goto go;
                        }
                        count++;
                    }
                }
            }
            catch { }
            go:
            Chat.Remove();
            string name = "";
            if (type)
                name = "подписок";
            else
                name = $"новостей по запросу \"{FromIEnumerable(requests)}\"";
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(($"Топ-{amount} {name} на {Now} за {Period}\n\n֍֍" + mess + "\b\b\b").Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Currency(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mes = $"CКурс валют на {Now}\n";
            List<string> cur = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            try
            {
                byte[] s = await client.GetByteArrayAsync("https://www.cbr-xml-daily.ru/daily_json.js");
                line = Encoding.UTF8.GetString(s, 0, s.Length);
                string[] vl = line.Split('\n');
                for (int i = cur.Count - 1; i >= 0; i--)
                {
                    int num = XBot.Currency.CurrencyNum[cur[i]];
                    string[] ss = vl[num].Split(':')[1].Split(' ')[1].Split(',')[0].Split('.');
                    string p = vl[num - 2].Split(':')[1].Split(' ')[1].Split(',')[0];
                    double val = double.Parse(ss[0]) + double.Parse(ss[1]) / 10000; 
                    int a = int.Parse(p);
                    val = val / a + 0.005;
                    mes += $"{XBot.Currency.CurrencyId[cur[i]]}: {val:f2}\n";
                }
            }
            catch(Exception ex) { string a = ex.ToString(); }
            Chat.Remove();
            if (line == "")
                Chat.Add("Отсутствует подключение к интернету", true);
            else
                Chat.Add(mes, true);
            m.Display();
            m.Active(true);
        }


        static string FromIEnumerable(IEnumerable<string> arr)
        {
            string line = "";
            foreach (string s in arr)
                line += s + " ";
            return line.Substring(0, line.Length - 1);
        }

        static bool IsSubString(string name, string str)
        {
            if (str.Length > 5)
                str = str.Substring(0, str.Length - 2);
            return name.Contains(str);
        }

        static bool Denied(string news)
        {
            if (!(bool)App.Current.Properties["blocked"])
                return false;
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            foreach (string str in subs)
                if (news.ToLower().Contains(str.ToLower()))
                    return true;
            return false;
        }

        static string Period
        {
            get 
            {
                switch ((string)App.Current.Properties["frequency"])
                {
                    case "online":
                        return "последние 10 минут";
                    case "hour":
                        return "последний час";
                    case "day":
                        return "последние сутки";
                    case "week":
                        return "последнюю неделю";
                    default:
                        return "последний месяц";
                }
            }
        }

        static string Now
        {
            get {
                string datetime = DateTime.Now.ToString();
                string line = "";
                if (datetime[0] == '0')
                    datetime = datetime.Substring(1);
                string[] d1 = datetime.Split(' ');
                string[] date;
                if (!DateTime.Now.ToString().Contains("/"))
                {
                    date = d1[0].Split('.');
                    line += $"{date[0]} {Month(date[1])} ";
                }
                else
                {
                    date = d1[0].Split('/');
                    line += $"{date[1]} {Month(date[0])} ";
                }
                string[] time = d1[1].Split(':');
                line += time[0] + ":" + time[1];
                return line;
            }
        }

        static string Month(string num)
        {
            if (num[0] == '0')
                num = num.Substring(1);
            switch (int.Parse(num))
            {
                case 1:
                    return "января";
                case 2:
                    return "февраля";
                case 3:
                    return "марта";
                case 4:
                    return "апреля";
                case 5:
                    return "мая";
                case 6:
                    return "июня";
                case 7:
                    return "июля";
                case 8:
                    return "августа";
                case 9:
                    return "сентбря";
                case 10:
                    return "октября";
                case 11:
                    return "ноября";
                default:
                    return "декабря";
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace XBot
{
    static class Chat
    {
        public static void Add(string message, bool sender)
        {
            string mess = "";
            if (sender)
                mess += "B";
            else
                mess += "U";
            mess += message;
            Formats.Add(mess, "messages");
        }

        public static void Remove()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            mes.RemoveAt(mes.Count - 1);
            App.Current.Properties["messages"] = Formats.FromListIntoString(mes);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public partial class MainPage : ContentPage
    {
        async void Command()
        {
            Chat.Add(message.Text, false);
            switch (message.Text.Split(' ')[0])
            {
                case "/light":
                    App.Current.Properties["back"] = "255 255 255";
                    App.Current.Properties["user"] = "0 0 255";
                    App.Current.Properties["bot"] = "128 0 128";
                    Chat.Add("Тема сменена на светлую", true);
                    break;
                case "/dark":
                    App.Current.Properties["back"] = "30 30 30";
                    App.Current.Properties["user"] = "86 156 214";
                    App.Current.Properties["bot"] = "80 80 80";
                    Chat.Add("Тема сменена на темную", true);
                    break;
                case "/news":
                    NewsClick(new object(), new EventArgs());
                    break;
                default:
                    Chat.Add("Неизвестная команда!", true);
                    break;

            }
            Display();
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Control : ContentPage
    {

        Entry entry = new Entry();
        string t = "\nРодительский контроль\n";

        public Control()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительный запрет",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Button exit = new Button
            {
                Text = "Отключить контоль",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            exit.Clicked += Deny;
            Button apply = new Button
            {
                Text = "Применить",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            apply.Clicked += Apply;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    exit,
                    apply
                }
            };
        }

        async void Apply(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        async void Deny(object sender, EventArgs e)
        {
            App.Current.Properties["blocked"] = false;
            App.Current.Properties["control"] = "";
            await Navigation.PopAsync();
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class ControlIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public ControlIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Родительский контроль";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Родительский контроль\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет игнорироваться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["control_intro"] = false;
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class Currency : ContentPage
    {
        Picker entry = new Picker();

        string t = "\nВалюта\n";

        public Currency()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };             
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        public static Dictionary<string, int> CurrencyNum = new Dictionary<string, int>
        {
            {"Австралийский доллар", 12},
            {"Азербайджанский манат", 21},
            {"Фунт стерлингов Соединенного королевства", 30},
            {"Армянский драм", 39},
            {"Белорусский рубль", 48},
            {"Болгарский лев", 57},
            {"Бразильский реал", 66},
            {"Венгерский форинт", 75},
            {"Гонконгский доллар", 84},
            {"Датская крона", 93},
            {"Доллар США", 102},
            {"Евро", 111},
            {"Индийская рупия", 120},
            {"Казахстанский тенге", 129},
            {"Канадский доллар", 138},
            {"Киргизский сом", 147},
            {"Китайский юань", 156},
            {"Молдавский лей", 165},
            {"Норвежская крона", 174},
            {"Польский злотый", 183},
            {"Румынский лей", 192},
            {"Сингапурский доллар", 210},
            {"Таджикский сомони", 219},
            {"Турецкая лира", 228},
            {"Новый туркменский манат", 237},
            {"Узбекский сум", 246},
            {"Украинская гривна", 255},
            {"Чешская крона", 264},
            {"Шведская крона", 273},
            {"Швейцарский франк", 282},
            {"Южноафриканский рэнд", 291},
            {"Вон Республики Корея", 300},
            {"Японская иена", 309}
        };

        public static Dictionary<string, string> CurrencyId = new Dictionary<string, string>
        {
            {"Австралийский доллар", "AUD"},
            {"Азербайджанский манат", "AZN"},
            {"Фунт стерлингов Соединенного королевства", "GBP"},
            {"Армянский драм", "AMD"},
            {"Белорусский рубль", "BYN"},
            {"Болгарский лев", "BGN"},
            {"Бразильский реал", "BRL"},
            {"Венгерский форинт", "HUF"},
            {"Гонконгский доллар", "HKD"},
            {"Датская крона", "DKK"},
            {"Доллар США", "USD"},
            {"Евро", "EUR"},
            {"Индийская рупия", "INR"},
            {"Казахстанский тенге", "KZT"},
            {"Канадский доллар", "CAD"},
            {"Киргизский сом", "KGS"},
            {"Китайский юань", "CNY"},
            {"Молдавский лей", "MDL"},
            {"Норвежская крона", "NOK"},
            {"Польский злотый", "PLN"},
            {"Румынский лей", "RON"},
            {"Сингапурский доллар", "SGD"},
            {"Таджикский сомони", "TJS"},
            {"Турецкая лира", "TRY"},
            {"Новый туркменский манат", "TMT"},
            {"Узбекский сум", "UZS"},
            {"Украинская гривна", "UAH"},
            {"Чешская крона", "CZK"},
            {"Шведская крона", "SEK"},
            {"Швейцарский франк", "CHF"},
            {"Южноафриканский рэнд", "ZAR"},
            {"Вон Республики Корея", "KRW"},
            {"Японская иена", "JPY"}
        };
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class CurrencyIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public CurrencyIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Валюта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Валюта\"!\n\n" +
                                "В этом разделе можно добавить валюты, по которым будет проводиться поиск.\n\n",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["currency_intro"] = false;
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{

    public static class Elements
    {
        public static Frame LabelAndElement(string labeltext, View element)
        {
            return new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Label
                        {
                            TextColor = Styles.UserColor,
                            Text = labeltext,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            VerticalOptions = LayoutOptions.Center,
                            HorizontalTextAlignment = TextAlignment.Start
                        },
                        element
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Frame ButtonInFrame(Button b)
        {
            return new Frame
            {
                Content = b,
                BorderColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Button Button(string text, bool fill)
        {
            Button b = new Button
            {
                Text = text,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor
            };
            if (fill)
                b.HorizontalOptions = LayoutOptions.FillAndExpand;
            return b;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XBot
{
    static class Formats
    {

        public const char parse = '÷';

        public static string FromListIntoString(List<string> l)
        {
            if (l.Count == 0)
                return "";
            string line = "";
            for (int i = 0; i < l.Count; i++)
                line += l[i].Replace(parse.ToString(), parse.ToString() + parse.ToString()) + parse;
            return line.Substring(0, line.Length - 1);
        }

        public static List<string> FromStringIntoList(string line)
        {
            if (line == null || line.Length == 0)
                return new List<string>();
            string word = "";
            List<string> l = new List<string>();
            int i = 0;
            while (i < line.Length)
            {
                if (line[i] != parse)
                    word += line[i];
                else if (line[i + 1] == parse)
                    word += line[i++];
                else
                {
                    l.Add(word);
                    word = "";
                }
                i++;
            }
            l.Add(word);
            return l;
        }

        public static void Add(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Add(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

        public static void Remove(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Remove(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Hint : ContentPage
    {
        Button ok = new Button
        {
            Text = "Спасибо",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        string[] hints =
        {
            "При нажатии на кнопку 📈 я расскажу тебе о курсе валют",
            "При нажатии на кнопку 🤵 я расскажу тебе о последних новостях из твоих подписок",
            "При нажатии на кнопку 🔝 я расскажу тебе о последних новостях",
            "При нажатии на кнопку ⭐ я выведу избранные статьи",
            "В настройках можно указать количество новостей выводимых за раз",
            "В настройках можно сменить цветовую схему",
            "В настройках можно сменить контент, показываемый при запуске",
            "В настройках можно сохранить ключевые слова для поиска в разделе \"Мои подписки\"",
            "В настройках можно запретить показывать нежелательный контент в разделе \"Родительский контроль\"",
            "В настройках можно очистить диалоговое окно",
            "В настройках можно указать период времени, по которому будет проводиться поиск",
            "В настройках можно выбрать размер шрифта в чате",
            "Любимые статьи можно добавить в избранное"
        };

        public Hint()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text = hints[(new Random()).Next(hints.Length)],
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Xamarin.Forms;
using System.Drawing;



namespace XBot
{

    public partial class MainPage : ContentPage
    {
        Frame frame;
        Entry message;
        ScrollView scroll;
        StackLayout stack;
        Button settings;
        Button news;
        Button subscribes;
        Button currency;
        Button favs;

        public MainPage()
        {
            Title = "Диалог";
            NavigationPage.SetHasNavigationBar(this, false);
            message = new Entry
            {
                Placeholder = "Сообщение",
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                FontSize = 20,
                BackgroundColor = Styles.BackColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor
            };
            message.Completed += ButtonClick;
            settings = new Button
            {
                Text = "⚙️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            subscribes = new Button
            {
                Text = "🤵",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news = new Button
            {
                Text = "🔝",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            currency = new Button
            {
                Text = "📈",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            favs = new Button
            {
                Text = "⭐️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news.Clicked += NewsClick;
            settings.Clicked += SettingsClick;
            subscribes.Clicked += SubscribesClick;
            currency.Clicked += CurrencyClick;
            favs.Clicked += FavsClick;
            string line = (string)App.Current.Properties["messages"];
            if (line.Length == 0)
                frame = new Frame { HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            else
                MakeFrame();
            MakeContent();
            if ((string)App.Current.Properties["onstart"] == "news")
                NewsClick(new object(), new EventArgs());
            else if ((string)App.Current.Properties["onstart"] == "subscribes")
                SubscribesClick(new object(), new EventArgs());
            else
                CurrencyClick(new object(), new EventArgs());
        }

        private void FavsClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["save"] == "")
                Chat.Add("Список избранного пуст!", true);
            else
            {
                if ((string)App.Current.Properties["messages"] != "")
                    App.Current.Properties["messages"] += Formats.parse.ToString();
                App.Current.Properties["messages"] += $"BИзбранное:\n\n֍֍{((string)App.Current.Properties["save"]).Replace(Formats.parse.ToString(), "֍")}";
            }
            Display();
        }

        public void Active(bool act)
        {
            message.IsEnabled = act;
            settings.IsEnabled = act;
            subscribes.IsEnabled = act;  
            news.IsEnabled = act;
            currency.IsEnabled = act;
            favs.IsEnabled = act;
        }

        private void SubscribesClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["subscribes"] == "")
            {
                Chat.Add("Список подписок пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                Chat.Add("Ищу подписки...", true);
                Display();
                Bot.Search(this, Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]), true);
            }

        }

        private void SettingsClick(object sender, EventArgs e)
        {
            Navigation.PushAsync(new Settings(this));
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["currency"] == "")
            {
                Chat.Add("Список валют пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                try
                {
                    Chat.Add("Вычисляю курс валют...", true);
                    Display();
                    Bot.Currency(this);
                }
                catch { }
            }
        }

        private void NewsClick(object sender, EventArgs e)
        {
            try
            {
                Chat.Add("Ищу новости...", true);
                Display();
                Bot.GetNews(this);
            }
            catch { }
        }

        private void ButtonClick(object sender, EventArgs e)
        {
            if (message.Text == null || message.Text.Length == 0)
                return;
            else
            {
                Chat.Add(message.Text, false);
                Chat.Add($"Выполняю поиск по запросу \"{message.Text}\"...", true);
                Display();
                Bot.Search(this, message.Text.Split(' '), false);
            }
            message.Text = "";
        }

        public void Display()
        {
            MakeFrame();
            MakeContent();
        }

        public void MakeContent()
        {
            Content = new StackLayout
            {
                Children =
                {
                    frame,
                    message,
                    new StackLayout
                    {
                        Children =
                        {
                            settings,
                            subscribes,
                            news,
                            currency,
                            favs
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                }
            };
            BackgroundColor = Styles.BackColor;
            message.TextColor = Styles.UserColor;
            message.BackgroundColor = Styles.BackColor;
            settings.BackgroundColor = Styles.BackColor;
            subscribes.BackgroundColor = Styles.BackColor;
            news.BackgroundColor = Styles.BackColor;
            currency.BackgroundColor = Styles.BackColor;
            favs.BackgroundColor = Styles.BackColor;
            if (scroll != null)
                scroll.ScrollToAsync(stack, ScrollToPosition.End, false);
        }

        public void MakeFrame()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            frame = new Frame { HasShadow = false, HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            stack = new StackLayout { VerticalOptions = LayoutOptions.End };
            for (int i = 0; i < mes.Count; i++)
            {
                Frame f = new Frame { BackgroundColor = Styles.BotColor, CornerRadius = 30, HasShadow = false };
                if (mes[i][0] == 'U')
                    f = new Frame
                    {
                        Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                        BorderColor = Styles.UserColor,
                        HorizontalOptions = LayoutOptions.End,
                        BackgroundColor = Styles.UserColor,
                        CornerRadius = 30,
                        HasShadow = false
                    };
                else
                {
                    if (mes[i][1] == 'C')
                    {
                        string[] cur = mes[i].Substring(2, mes[i].Length - 3).Split('\n');
                        StackLayout sl = new StackLayout();
                        sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[0], BackgroundColor = Styles.BotColor, FontSize = Styles.Size, FontAttributes = FontAttributes.Bold });
                        for (int j = 1; j < cur.Length; j++)
                            sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[j], BackgroundColor = Styles.BotColor, FontSize = Styles.Size * 3 / 2 });
                        f.Content = sl;
                    }
                    else if (mes[i].Split('֍').Length == 1)
                    {
                        Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
                        f.Content = l;
                    }
                    else
                    {
                        string[] info = mes[i].Substring(1).Split('֍');
                        StackLayout sl = new StackLayout();
                        Dictionary<string, string> dict = new Dictionary<string, string>();
                        for (int j = 0; j < info.Length / 2; j++)
                        {
                            dict[info[2 * j]] = info[2 * j + 1];
                            Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = info[2 * j], FontSize = Styles.Size, BackgroundColor = Styles.BotColor };
                            if (j > 0)
                            {
                                var tapGestureRecognizer = new TapGestureRecognizer();
                                tapGestureRecognizer.Tapped += (s, e) =>
                                {
                                    string tmp = dict[l.Text];
                                    Navigation.PushAsync(new ShowContent(tmp, l.Text));
                                };
                                l.GestureRecognizers.Add(tapGestureRecognizer);
                            }
                            else
                                l.FontAttributes = FontAttributes.Bold;
                            sl.Children.Add(l);
                        }
                        f.Content = sl;
                    }
                    f.BorderColor = Styles.BotColor;
                    f.HorizontalOptions = LayoutOptions.Start;
                }
                f.VerticalOptions = LayoutOptions.End;
                stack.Children.Add(new Label { FontSize = Styles.Size / 2, Text = "\n" });
                stack.Children.Add(f);
            }
            scroll = new ScrollView { Content = stack };
            frame.Content = scroll;
        }

    }
}

using System;
namespace XBot
{
    public partial class Settings
    {

        void MakeDark(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            else
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            main.Display();
            MakeContent();
        }

        void TimeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["frequency_intro"])
                Navigation.PushAsync(new TimingIntro());
            else
                Navigation.PushAsync(new Timing());
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["currency_intro"])
                Navigation.PushAsync(new CurrencyIntro());
            else
                Navigation.PushAsync(new Currency());
        }

        void TypeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["type_intro"])
                Navigation.PushAsync(new TypeIntro());
            else
                Navigation.PushAsync(new Type());
        }

        void ClearClick(object sender, EventArgs e)
        {
            App.Current.Properties["messages"] = "";
            main.Display();
        }

        void SubsClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["subscribes_intro"])
                Navigation.PushAsync(new SubscribesIntro());
            else
                Navigation.PushAsync(new Subscribes());
        }

        void ControlClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["control_intro"])
                Navigation.PushAsync(new ControlIntro());
            else
                Navigation.PushAsync(new Password());
        }

        void SizeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["size_intro"])
                Navigation.PushAsync(new SizeIntro(main));
            else
                Navigation.PushAsync(new Size(main));
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Password : ContentPage
    {

        Entry pass = new Entry
        {
            Placeholder = "Пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Entry repeat = new Entry
        {
            Placeholder = "Повторите пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Button enter = new Button
        {
            Text = "Войти",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End
        };

        string t = "\nРодительский контроль\n";

        public Password()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            StackLayout sl = new StackLayout();
            sl.Children.Add
                (new Label
                {
                    Text = t,
                    HorizontalTextAlignment = TextAlignment.Center,
                    FontSize = 20,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    VerticalOptions = LayoutOptions.Start,
                    TextColor = Styles.UserColor,
                    FontAttributes = FontAttributes.Bold,
                    BackgroundColor = Styles.BackColor
                });
            if (!(bool)App.Current.Properties["blocked"])
            {
                pass.Placeholder = "Придумайте пароль";
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                sl.Children.Add
                    (new Frame
                    {
                        Content = repeat,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Register;
            }
            else
            {
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Login;
                pass.Completed += Login;
            }
            sl.Children.Add(enter);
            Content = sl;
        }

        async void Register(object sender, EventArgs e)
        {
            if (pass.Text == "" || pass.Text == null)
                await DisplayAlert("Ошибка!", "Поле пароля пустое!", "Ок");
            else if (pass.Text != repeat.Text)
                await DisplayAlert("Ошибка!", "Пароли не совпадают!", "Ок");
            else
            {
                App.Current.Properties["password"] = pass.Text;
                App.Current.Properties["blocked"] = true;
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
        }

        async void Login(object sender, EventArgs e)
        {
            if (pass.Text == (string)App.Current.Properties["password"])
            {
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
            else
                await DisplayAlert("Ошибка!", "Неверно введен пароль!", "Ок");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace XBot
{
    public partial class Settings : ContentPage
    {
        Picker OnStart = new Picker { Items = { "🔝Последние новости", "🤵Мои подписки", "📈Курс валют" }, WidthRequest = 30 };
        Switch Hints = new Switch();
        Picker amount = new Picker { Items = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }, WidthRequest = 30, TextColor = Styles.UserColor };
        MainPage main;
        string t = "\nНастройки\n";

        public Settings(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Настройки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            amount.SelectedIndex = (int)App.Current.Properties["count"] - 1;
            amount.SelectedIndexChanged += (object sender, EventArgs e) => { App.Current.Properties["count"] = amount.SelectedIndex + 1; };
            OnStart.SelectedIndex = (string)App.Current.Properties["onstart"] == "news" ? 0 : (string)App.Current.Properties["onstart"] == "subscribes" ? 1 : 2;
            Hints.IsToggled = (bool)App.Current.Properties["hint"];
            Hints.Toggled += (object sender, ToggledEventArgs e) => App.Current.Properties["hint"] = !(bool)App.Current.Properties["hint"];
            OnStart.SelectedIndexChanged += (object sender, EventArgs e) =>
            {
                if (OnStart.SelectedIndex == 0)
                    App.Current.Properties["onstart"] = "news";
                else if (OnStart.SelectedIndex == 1)
                    App.Current.Properties["onstart"] = "subscribes";
                else
                    App.Current.Properties["onstart"] = "currency";
            };
            MakeContent();
        }

        void MakeContent()
        {
            BackgroundColor = Styles.BackColor;
            Button Dark = Elements.Button("Сменить", false);
            Button Time = Elements.Button("Область поиска", true);
            Button Size = Elements.Button("Размер шрифта", true);
            Button Type = Elements.Button("Тематика новостей", true);
            Button Clear = Elements.Button("Очистить диалоговое окно", true);
            Button Subs = Elements.Button("Мои подписки", true);
            Button Control = Elements.Button("Родительский контроль", true);
            Button Support = Elements.Button("Поддержать", true);
            Button Currency = Elements.Button("Валюта", true);
            Time.Clicked += TimeClick;
            Clear.Clicked += ClearClick;
            Subs.Clicked += SubsClick;
            Control.Clicked += ControlClick;
            Size.Clicked += SizeClick;
            Type.Clicked += TypeClick;
            Currency.Clicked += CurrencyClick;
            Support.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Support());
            Dark.Clicked += MakeDark;
            amount.TextColor = Styles.UserColor;
            OnStart.BackgroundColor = Styles.BackColor;
            amount.BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                Elements.LabelAndElement("Количество новостей за раз", amount),
                                Elements.LabelAndElement("При старте показывать", OnStart),
                                Elements.LabelAndElement("Цветовая тема", Dark),
                                Elements.LabelAndElement("Показывать подсказки", Hints),
                                Elements.ButtonInFrame(Type),
                                Elements.ButtonInFrame(Time),
                                Elements.ButtonInFrame(Currency),
                                Elements.ButtonInFrame(Size),
                                Elements.ButtonInFrame(Subs),
                                Elements.ButtonInFrame(Control),
                                Elements.ButtonInFrame(Clear),
                                Elements.ButtonInFrame(Support)
                            }
                        }
                    }
                }
            };
            
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class ShowContent : ContentPage
    {

        string title;
        string url;

        Button save = new Button
        {
            Text = "☆",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand,
            FontSize = 20
        };

        Button back = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        Button internet = new Button
        {
            Text = "🌎",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        public ShowContent(string url, string title)
        {
            this.title = title;
            this.url = url;
            BackgroundColor = Styles.BackColor;
            back.Clicked += BackClick;
            internet.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("http://" + url));
            if (Device.RuntimePlatform == "iOS")
                Title = title;
            else
                NavigationPage.SetHasNavigationBar(this, false);
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (PositionInList(favs, $"{title}֍{url}") != -1)
                save = new Button
                {
                    Text = "★",
                    BackgroundColor = Styles.BackColor,
                    TextColor = Color.Yellow,
                    BorderColor = Color.Yellow,
                    VerticalOptions = LayoutOptions.End,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    FontSize = 20
                };
            save.Clicked += SaveClick;
            Content = new StackLayout { Children = { new WebView { Source = "http://" + url, VerticalOptions = LayoutOptions.FillAndExpand }, new StackLayout { Children = { back, internet, save }, Orientation = StackOrientation.Horizontal } } };
        }

        void SaveClick(object sender, EventArgs e)
        {
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (save.Text == "☆")
            {
                favs.Add($"{title}֍{url}");
                save.Text = "★";
                save.TextColor = Color.Yellow;
            }
            else
            {
                favs.Remove($"{title}֍{url}");
                save.Text = "☆";
                save.TextColor = Styles.UserColor;
            }
            App.Current.Properties["save"] = Formats.FromListIntoString(favs);
        }

        async void BackClick(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        static int PositionInList(List<string> list, string line)
        {
            for (int i = 0; i < list.Count; i++)
                if (list[i] == line)
                    return i;
            return -1;
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Size : ContentPage
    {

        MainPage main;
        string t = "\nРазмер шрифта\n";
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Button ok = new Button
        {
            Text = "Применить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        int size = Styles.Size;
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        public Size(MainPage m)
        {
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            main = m;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += Ok_Clicked;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    ok
                }
            };
        }

        async void Ok_Clicked(object sender, EventArgs e)
        {
            App.Current.Properties["size"] = size;
            main.Display();
            await Navigation.PopAsync();
        }


        void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)(e.NewValue + 8);
            my.FontSize = size;
            bot.FontSize = size;
        }


        

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SizeIntro : ContentPage
    {
        MainPage main;
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SizeIntro(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Размер шрифта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Размер шрифта\"!\n\n" +
                                "В этом разделе можно выбрать размер шрифта сообщений в чате.\n\n" +
                                "Обратите внимание, что размер шрифта в первую очередь зависит от разрешения экрана.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["size_intro"] = false;
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{
    static class Styles
    {

        public static Xamarin.Forms.Color BackColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["back"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color UserColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["user"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color BotColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["bot"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static int Size
        {
            get => (int)App.Current.Properties["size"];
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Subscribes : ContentPage
    {

        Entry entry = new Entry();

        string t = "\nМои подписки\n";

        public Subscribes()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SubscribesIntro : ContentPage
    {

        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SubscribesIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Мои подписки";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Мои подписки\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет автоматически проводиться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["subscribes_intro"] = false;
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Support : ContentPage
    {
        Button ok = new Button
        {
            Text = "Поддержать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public Support()
        {
            ok.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("https://money.yandex.ru/to/410014676758208"));
            if (Device.RuntimePlatform == "iOS")
                Title = "Поддержать";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Большое спасибо за скачивание и использование моего приложения!\n\n" +
                                "Я верю в то, что оно тебе нравится, и ты поставил ему оценку в магазине приложений.\n\n" +
                                "Если хочешь поддержать меня материально, а также сделать вклад в будущие проекты, нажми на кнопку ниже😉",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    Elements.ButtonInFrame(ok)
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Timing : ContentPage
    {

        string t = "\nОбласть поиска\n";
        public Timing()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class TimingIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TimingIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Область поиска";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Область поиска\"!\n\n" +
                                "В этом разделе можно выбрать промежуток времени, в который будет проводиться поиск.\n\n" +
                                "Обратите внимание, что при выборе большого промежутка, новости могут быть устаревшими.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["frequency_intro"] = false;
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Type : ContentPage
    {
        string t = "\nТематика новостей\n";
        public Type()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class TypeIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TypeIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Тематика новостей";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Тематика новостей\"!\n\n" +
                                "В этом разделе можно выбрать тематику, по которой будет проводиться поиск.\n\n",                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["type_intro"] = false;
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Welcome : ContentPage
    {
        Button ok = new Button
        {
            Text = "Настроить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Button ignore = new Button
        {
            Text = "Пропустить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Welcome()
        {
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Привет, я XBot! Я буду присылать тебе новости, но на этом мои функции не ограничиваются!\n\n" +
                                "Еще я умею обрабатывать запросы, сохранять их, вычислять курс валют, а также ограничивать доступ к ненужному контенту.\n\n" +
                                "Я использую открытое API Mediametrics и центрального банка России, за что им огромное спасибо!\n\n" +
                                "Я являюсь некоммерческим проектом и создан в образовательных целях. Если у тебя возникли замечания или предложения, напиши моему создателю: emmtvv@icloud.com.\n\n" +
                                "Нажми на кнопку \"Настроить\", чтобы я работал максимально комфортно для тебя!\n\n" +
                                "Приятного пользования!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new XBot.SettingsOnStart.Intro1());
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro1 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help;
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro1()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Цветовая тема";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            MakeContent();
            dark.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
                MakeContent();
            };
            light.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
                MakeContent();
            };
        }

        string t = "\nЦветовая тема\n";
        Button dark = new Button { Text="     ", BackgroundColor = Color.FromRgb(30, 30, 30), BorderColor = Color.FromRgb(255,255,255), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };
        Button light = new Button { Text = "     ", BackgroundColor = Color.FromRgb(255, 255, 255), BorderColor = Color.FromRgb(30, 30, 30), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };

        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери цветовую тему приложения", "Хорошо!");
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            help = new Button
            {
                Text = "?",
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro2());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new Frame
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                                    BorderColor = Styles.UserColor,
                                    HorizontalOptions = LayoutOptions.End,
                                    BackgroundColor = Styles.UserColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                },
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size },
                                    BorderColor = Styles.BotColor,
                                    HorizontalOptions = LayoutOptions.Start,
                                    BackgroundColor = Styles.BotColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                }
                            }
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        HasShadow = false,
                        BackgroundColor = Styles.BackColor
                    },
                    new StackLayout
                    {
                        Children =
                        {
                            light,
                            dark
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro2 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери тематику, по которой будет проводиться поиск", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nТематика новостей\n";
        public Intro2()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro3());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro3 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери временной интервал поиска новостей", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nОбласть поиска\n";
        public Intro3()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro4());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro4 : ContentPage
    {
        string t = "\nРазмер шрифта\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        int size = (int)App.Current.Properties["size"];
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери размер шрифта в диалоге", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro4()
        {
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["size"] = size;
                Navigation.PushAsync(new Intro5());
            };

            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    new StackLayout
                    {
                        Children = { ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        private void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)e.NewValue + 8;
            my.FontSize = size;
            bot.FontSize = size;
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro5 : ContentPage
    {
        Picker entry = new Picker();
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери валюту, курс которой ты хотел бы получать", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nВалюта\n";

        public Intro5()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro6());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in Currency.CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }

                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro6 : ContentPage
    {
        Entry entry = new Entry();

        string t = "\nМои подписки\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери ключевые слова, по которым ты хотел бы получать нвоости", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro6()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro7());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
            Display();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        async void Display()
        {
            await DisplayAlert("Важная информация!", "Выбери ключевые слова, по которым будет производиться поиск", "Понятно!");
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro7 : ContentPage
    {
        Button ok = new Button
        {
            Text = "Начать!",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Intro7()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Моя настройка закончена и я готов к работе!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            for (int i = 0; i < 8; i++)
                Navigation.RemovePage(Navigation.NavigationStack[0]);

        }

    }
}

using System;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using System.Drawing;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.IO;

[assembly: XamlCompilation(XamlCompilationOptions.Compile)]
namespace XBot
{
    public partial class App : Application
    {
    
        public App()
        {
            object obj;
            if (!App.Current.Properties.TryGetValue("messages", out obj))
                App.Current.Properties["messages"] = "";
            if (!App.Current.Properties.TryGetValue("subscribes", out obj))
                App.Current.Properties["subscribes"] = "";
            if (!App.Current.Properties.TryGetValue("count", out obj))
                App.Current.Properties["count"] = 5;
            if (!App.Current.Properties.TryGetValue("onstart", out obj))
                App.Current.Properties["onstart"] = "news";
            if (!App.Current.Properties.TryGetValue("back", out obj))
                App.Current.Properties["back"] = "255 255 255";
            if (!App.Current.Properties.TryGetValue("user", out obj))
                App.Current.Properties["user"] = "0 0 255";
            if (!App.Current.Properties.TryGetValue("bot", out obj))
                App.Current.Properties["bot"] = "128 0 128";
            if (!App.Current.Properties.TryGetValue("control", out obj))
                App.Current.Properties["control"] = "";
            if (!App.Current.Properties.TryGetValue("blocked", out obj))
                App.Current.Properties["blocked"] = false;
            if (!App.Current.Properties.TryGetValue("welcome", out obj))
                App.Current.Properties["welcome"] = true;
            if (!App.Current.Properties.TryGetValue("subscribes_intro", out obj))
                App.Current.Properties["subscribes_intro"] = true;
            if (!App.Current.Properties.TryGetValue("control_intro", out obj))
                App.Current.Properties["control_intro"] = true;
            if (!App.Current.Properties.TryGetValue("hint", out obj))
                App.Current.Properties["hint"] = true;
            if (!App.Current.Properties.TryGetValue("frequency", out obj))
                App.Current.Properties["frequency"] = "online";
            if (!App.Current.Properties.TryGetValue("frequency_intro", out obj))
                App.Current.Properties["frequency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("size", out obj))
                App.Current.Properties["size"] = 14;
            if (!App.Current.Properties.TryGetValue("size_intro", out obj))
                App.Current.Properties["size_intro"] = true;
            if (!App.Current.Properties.TryGetValue("type", out obj))
                App.Current.Properties["type"] = "";
            if (!App.Current.Properties.TryGetValue("type_intro", out obj))
                App.Current.Properties["type_intro"] = true;
            if (!App.Current.Properties.TryGetValue("currency", out obj))
                App.Current.Properties["currency"] = "";
            if (!App.Current.Properties.TryGetValue("currency_intro", out obj))
                App.Current.Properties["currency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("save", out obj))
                App.Current.Properties["save"] = "";
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            else
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            MainPage = (bool)App.Current.Properties["welcome"] ? new NavigationPage(new Welcome()) : (bool)App.Current.Properties["hint"] ? new NavigationPage(new Hint()) : new NavigationPage(new MainPage());
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Http;
using System.Threading.Tasks;
using System.Threading;

namespace XBot
{
    static class Bot
    {
     
        public static readonly HttpClient client = new HttpClient();

        async public static void GetNews(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mess = "";
            int count = 0;
            try
            {
                line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=1&update=1401216280");
                string[] elems = line.Split('\n');
                for (int i = 1; count < (int)App.Current.Properties["count"] && i < elems.Length; i++)
                {
                    string[] first = elems[i].Split('\t');
                    string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                    string[] elems1 = info.Split('\t');
                    if (!Denied(elems1[1]))
                    {
                        mess += $"{elems1[1]}\n֍{elems1[0]}֍";
                        count++;
                    }
                }
            }
            catch (IndexOutOfRangeException) { }
            catch (Exception ex) 
            { 
                string a = ex.ToString();
                line = "";
            }
            mess += '\b';
            Chat.Remove();
            mess = $"Топ-{count} новостей на {Now} за {Period}\n\n֍֍" + mess;
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0 || count == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(mess.Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Search(MainPage m, IEnumerable<string> requests, bool type)
        {
            m.Active(false);
            int count = 1;
            int amount = 0;
            string mess = "";
            string line = "";
            try
            {
                while (count != 4 && amount < (int)App.Current.Properties["count"])
                {
                    line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=" + count.ToString() + "&update=1401216280");
                    string[] elems = line.Split('\n');
                    for (int i = 1; i < elems.Length; i++)
                    {
                        string[] first = elems[i].Split('\t');
                        string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                        string[] elems1 = info.Split('\t');
                        foreach (string str in requests)
                        {
                            if (IsSubString(elems1[1].ToLower(), str.ToLower()) && !Denied(elems1[1]))
                            {
                                mess += elems1[1] + "\n֍" + elems1[0] + "֍";
                                amount++;
                            }
                            if (amount == (int)App.Current.Properties["count"])
                                goto go;
                        }
                        count++;
                    }
                }
            }
            catch { }
            go:
            Chat.Remove();
            string name = "";
            if (type)
                name = "подписок";
            else
                name = $"новостей по запросу \"{FromIEnumerable(requests)}\"";
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(($"Топ-{amount} {name} на {Now} за {Period}\n\n֍֍" + mess + "\b\b\b").Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Currency(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mes = $"CКурс валют на {Now}\n";
            List<string> cur = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            try
            {
                byte[] s = await client.GetByteArrayAsync("https://www.cbr-xml-daily.ru/daily_json.js");
                line = Encoding.UTF8.GetString(s, 0, s.Length);
                string[] vl = line.Split('\n');
                for (int i = cur.Count - 1; i >= 0; i--)
                {
                    int num = XBot.Currency.CurrencyNum[cur[i]];
                    string[] ss = vl[num].Split(':')[1].Split(' ')[1].Split(',')[0].Split('.');
                    string p = vl[num - 2].Split(':')[1].Split(' ')[1].Split(',')[0];
                    double val = double.Parse(ss[0]) + double.Parse(ss[1]) / 10000; 
                    int a = int.Parse(p);
                    val = val / a + 0.005;
                    mes += $"{XBot.Currency.CurrencyId[cur[i]]}: {val:f2}\n";
                }
            }
            catch(Exception ex) { string a = ex.ToString(); }
            Chat.Remove();
            if (line == "")
                Chat.Add("Отсутствует подключение к интернету", true);
            else
                Chat.Add(mes, true);
            m.Display();
            m.Active(true);
        }


        static string FromIEnumerable(IEnumerable<string> arr)
        {
            string line = "";
            foreach (string s in arr)
                line += s + " ";
            return line.Substring(0, line.Length - 1);
        }

        static bool IsSubString(string name, string str)
        {
            if (str.Length > 5)
                str = str.Substring(0, str.Length - 2);
            return name.Contains(str);
        }

        static bool Denied(string news)
        {
            if (!(bool)App.Current.Properties["blocked"])
                return false;
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            foreach (string str in subs)
                if (news.ToLower().Contains(str.ToLower()))
                    return true;
            return false;
        }

        static string Period
        {
            get 
            {
                switch ((string)App.Current.Properties["frequency"])
                {
                    case "online":
                        return "последние 10 минут";
                    case "hour":
                        return "последний час";
                    case "day":
                        return "последние сутки";
                    case "week":
                        return "последнюю неделю";
                    default:
                        return "последний месяц";
                }
            }
        }

        static string Now
        {
            get {
                string datetime = DateTime.Now.ToString();
                string line = "";
                if (datetime[0] == '0')
                    datetime = datetime.Substring(1);
                string[] d1 = datetime.Split(' ');
                string[] date;
                if (!DateTime.Now.ToString().Contains("/"))
                {
                    date = d1[0].Split('.');
                    line += $"{date[0]} {Month(date[1])} ";
                }
                else
                {
                    date = d1[0].Split('/');
                    line += $"{date[1]} {Month(date[0])} ";
                }
                string[] time = d1[1].Split(':');
                line += time[0] + ":" + time[1];
                return line;
            }
        }

        static string Month(string num)
        {
            if (num[0] == '0')
                num = num.Substring(1);
            switch (int.Parse(num))
            {
                case 1:
                    return "января";
                case 2:
                    return "февраля";
                case 3:
                    return "марта";
                case 4:
                    return "апреля";
                case 5:
                    return "мая";
                case 6:
                    return "июня";
                case 7:
                    return "июля";
                case 8:
                    return "августа";
                case 9:
                    return "сентбря";
                case 10:
                    return "октября";
                case 11:
                    return "ноября";
                default:
                    return "декабря";
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace XBot
{
    static class Chat
    {
        public static void Add(string message, bool sender)
        {
            string mess = "";
            if (sender)
                mess += "B";
            else
                mess += "U";
            mess += message;
            Formats.Add(mess, "messages");
        }

        public static void Remove()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            mes.RemoveAt(mes.Count - 1);
            App.Current.Properties["messages"] = Formats.FromListIntoString(mes);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public partial class MainPage : ContentPage
    {
        async void Command()
        {
            Chat.Add(message.Text, false);
            switch (message.Text.Split(' ')[0])
            {
                case "/light":
                    App.Current.Properties["back"] = "255 255 255";
                    App.Current.Properties["user"] = "0 0 255";
                    App.Current.Properties["bot"] = "128 0 128";
                    Chat.Add("Тема сменена на светлую", true);
                    break;
                case "/dark":
                    App.Current.Properties["back"] = "30 30 30";
                    App.Current.Properties["user"] = "86 156 214";
                    App.Current.Properties["bot"] = "80 80 80";
                    Chat.Add("Тема сменена на темную", true);
                    break;
                case "/news":
                    NewsClick(new object(), new EventArgs());
                    break;
                default:
                    Chat.Add("Неизвестная команда!", true);
                    break;

            }
            Display();
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Control : ContentPage
    {

        Entry entry = new Entry();
        string t = "\nРодительский контроль\n";

        public Control()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительный запрет",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Button exit = new Button
            {
                Text = "Отключить контоль",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            exit.Clicked += Deny;
            Button apply = new Button
            {
                Text = "Применить",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            apply.Clicked += Apply;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    exit,
                    apply
                }
            };
        }

        async void Apply(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        async void Deny(object sender, EventArgs e)
        {
            App.Current.Properties["blocked"] = false;
            App.Current.Properties["control"] = "";
            await Navigation.PopAsync();
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class ControlIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public ControlIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Родительский контроль";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Родительский контроль\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет игнорироваться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["control_intro"] = false;
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class Currency : ContentPage
    {
        Picker entry = new Picker();

        string t = "\nВалюта\n";

        public Currency()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };             
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        public static Dictionary<string, int> CurrencyNum = new Dictionary<string, int>
        {
            {"Австралийский доллар", 12},
            {"Азербайджанский манат", 21},
            {"Фунт стерлингов Соединенного королевства", 30},
            {"Армянский драм", 39},
            {"Белорусский рубль", 48},
            {"Болгарский лев", 57},
            {"Бразильский реал", 66},
            {"Венгерский форинт", 75},
            {"Гонконгский доллар", 84},
            {"Датская крона", 93},
            {"Доллар США", 102},
            {"Евро", 111},
            {"Индийская рупия", 120},
            {"Казахстанский тенге", 129},
            {"Канадский доллар", 138},
            {"Киргизский сом", 147},
            {"Китайский юань", 156},
            {"Молдавский лей", 165},
            {"Норвежская крона", 174},
            {"Польский злотый", 183},
            {"Румынский лей", 192},
            {"Сингапурский доллар", 210},
            {"Таджикский сомони", 219},
            {"Турецкая лира", 228},
            {"Новый туркменский манат", 237},
            {"Узбекский сум", 246},
            {"Украинская гривна", 255},
            {"Чешская крона", 264},
            {"Шведская крона", 273},
            {"Швейцарский франк", 282},
            {"Южноафриканский рэнд", 291},
            {"Вон Республики Корея", 300},
            {"Японская иена", 309}
        };

        public static Dictionary<string, string> CurrencyId = new Dictionary<string, string>
        {
            {"Австралийский доллар", "AUD"},
            {"Азербайджанский манат", "AZN"},
            {"Фунт стерлингов Соединенного королевства", "GBP"},
            {"Армянский драм", "AMD"},
            {"Белорусский рубль", "BYN"},
            {"Болгарский лев", "BGN"},
            {"Бразильский реал", "BRL"},
            {"Венгерский форинт", "HUF"},
            {"Гонконгский доллар", "HKD"},
            {"Датская крона", "DKK"},
            {"Доллар США", "USD"},
            {"Евро", "EUR"},
            {"Индийская рупия", "INR"},
            {"Казахстанский тенге", "KZT"},
            {"Канадский доллар", "CAD"},
            {"Киргизский сом", "KGS"},
            {"Китайский юань", "CNY"},
            {"Молдавский лей", "MDL"},
            {"Норвежская крона", "NOK"},
            {"Польский злотый", "PLN"},
            {"Румынский лей", "RON"},
            {"Сингапурский доллар", "SGD"},
            {"Таджикский сомони", "TJS"},
            {"Турецкая лира", "TRY"},
            {"Новый туркменский манат", "TMT"},
            {"Узбекский сум", "UZS"},
            {"Украинская гривна", "UAH"},
            {"Чешская крона", "CZK"},
            {"Шведская крона", "SEK"},
            {"Швейцарский франк", "CHF"},
            {"Южноафриканский рэнд", "ZAR"},
            {"Вон Республики Корея", "KRW"},
            {"Японская иена", "JPY"}
        };
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class CurrencyIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public CurrencyIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Валюта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Валюта\"!\n\n" +
                                "В этом разделе можно добавить валюты, по которым будет проводиться поиск.\n\n",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["currency_intro"] = false;
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{

    public static class Elements
    {
        public static Frame LabelAndElement(string labeltext, View element)
        {
            return new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Label
                        {
                            TextColor = Styles.UserColor,
                            Text = labeltext,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            VerticalOptions = LayoutOptions.Center,
                            HorizontalTextAlignment = TextAlignment.Start
                        },
                        element
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Frame ButtonInFrame(Button b)
        {
            return new Frame
            {
                Content = b,
                BorderColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Button Button(string text, bool fill)
        {
            Button b = new Button
            {
                Text = text,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor
            };
            if (fill)
                b.HorizontalOptions = LayoutOptions.FillAndExpand;
            return b;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XBot
{
    static class Formats
    {

        public const char parse = '÷';

        public static string FromListIntoString(List<string> l)
        {
            if (l.Count == 0)
                return "";
            string line = "";
            for (int i = 0; i < l.Count; i++)
                line += l[i].Replace(parse.ToString(), parse.ToString() + parse.ToString()) + parse;
            return line.Substring(0, line.Length - 1);
        }

        public static List<string> FromStringIntoList(string line)
        {
            if (line == null || line.Length == 0)
                return new List<string>();
            string word = "";
            List<string> l = new List<string>();
            int i = 0;
            while (i < line.Length)
            {
                if (line[i] != parse)
                    word += line[i];
                else if (line[i + 1] == parse)
                    word += line[i++];
                else
                {
                    l.Add(word);
                    word = "";
                }
                i++;
            }
            l.Add(word);
            return l;
        }

        public static void Add(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Add(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

        public static void Remove(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Remove(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Hint : ContentPage
    {
        Button ok = new Button
        {
            Text = "Спасибо",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        string[] hints =
        {
            "При нажатии на кнопку 📈 я расскажу тебе о курсе валют",
            "При нажатии на кнопку 🤵 я расскажу тебе о последних новостях из твоих подписок",
            "При нажатии на кнопку 🔝 я расскажу тебе о последних новостях",
            "При нажатии на кнопку ⭐ я выведу избранные статьи",
            "В настройках можно указать количество новостей выводимых за раз",
            "В настройках можно сменить цветовую схему",
            "В настройках можно сменить контент, показываемый при запуске",
            "В настройках можно сохранить ключевые слова для поиска в разделе \"Мои подписки\"",
            "В настройках можно запретить показывать нежелательный контент в разделе \"Родительский контроль\"",
            "В настройках можно очистить диалоговое окно",
            "В настройках можно указать период времени, по которому будет проводиться поиск",
            "В настройках можно выбрать размер шрифта в чате",
            "Любимые статьи можно добавить в избранное"
        };

        public Hint()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text = hints[(new Random()).Next(hints.Length)],
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Xamarin.Forms;
using System.Drawing;



namespace XBot
{

    public partial class MainPage : ContentPage
    {
        Frame frame;
        Entry message;
        ScrollView scroll;
        StackLayout stack;
        Button settings;
        Button news;
        Button subscribes;
        Button currency;
        Button favs;

        public MainPage()
        {
            Title = "Диалог";
            NavigationPage.SetHasNavigationBar(this, false);
            message = new Entry
            {
                Placeholder = "Сообщение",
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                FontSize = 20,
                BackgroundColor = Styles.BackColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor
            };
            message.Completed += ButtonClick;
            settings = new Button
            {
                Text = "⚙️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            subscribes = new Button
            {
                Text = "🤵",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news = new Button
            {
                Text = "🔝",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            currency = new Button
            {
                Text = "📈",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            favs = new Button
            {
                Text = "⭐️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news.Clicked += NewsClick;
            settings.Clicked += SettingsClick;
            subscribes.Clicked += SubscribesClick;
            currency.Clicked += CurrencyClick;
            favs.Clicked += FavsClick;
            string line = (string)App.Current.Properties["messages"];
            if (line.Length == 0)
                frame = new Frame { HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            else
                MakeFrame();
            MakeContent();
            if ((string)App.Current.Properties["onstart"] == "news")
                NewsClick(new object(), new EventArgs());
            else if ((string)App.Current.Properties["onstart"] == "subscribes")
                SubscribesClick(new object(), new EventArgs());
            else
                CurrencyClick(new object(), new EventArgs());
        }

        private void FavsClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["save"] == "")
                Chat.Add("Список избранного пуст!", true);
            else
            {
                if ((string)App.Current.Properties["messages"] != "")
                    App.Current.Properties["messages"] += Formats.parse.ToString();
                App.Current.Properties["messages"] += $"BИзбранное:\n\n֍֍{((string)App.Current.Properties["save"]).Replace(Formats.parse.ToString(), "֍")}";
            }
            Display();
        }

        public void Active(bool act)
        {
            message.IsEnabled = act;
            settings.IsEnabled = act;
            subscribes.IsEnabled = act;  
            news.IsEnabled = act;
            currency.IsEnabled = act;
            favs.IsEnabled = act;
        }

        private void SubscribesClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["subscribes"] == "")
            {
                Chat.Add("Список подписок пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                Chat.Add("Ищу подписки...", true);
                Display();
                Bot.Search(this, Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]), true);
            }

        }

        private void SettingsClick(object sender, EventArgs e)
        {
            Navigation.PushAsync(new Settings(this));
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["currency"] == "")
            {
                Chat.Add("Список валют пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                try
                {
                    Chat.Add("Вычисляю курс валют...", true);
                    Display();
                    Bot.Currency(this);
                }
                catch { }
            }
        }

        private void NewsClick(object sender, EventArgs e)
        {
            try
            {
                Chat.Add("Ищу новости...", true);
                Display();
                Bot.GetNews(this);
            }
            catch { }
        }

        private void ButtonClick(object sender, EventArgs e)
        {
            if (message.Text == null || message.Text.Length == 0)
                return;
            else
            {
                Chat.Add(message.Text, false);
                Chat.Add($"Выполняю поиск по запросу \"{message.Text}\"...", true);
                Display();
                Bot.Search(this, message.Text.Split(' '), false);
            }
            message.Text = "";
        }

        public void Display()
        {
            MakeFrame();
            MakeContent();
        }

        public void MakeContent()
        {
            Content = new StackLayout
            {
                Children =
                {
                    frame,
                    message,
                    new StackLayout
                    {
                        Children =
                        {
                            settings,
                            subscribes,
                            news,
                            currency,
                            favs
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                }
            };
            BackgroundColor = Styles.BackColor;
            message.TextColor = Styles.UserColor;
            message.BackgroundColor = Styles.BackColor;
            settings.BackgroundColor = Styles.BackColor;
            subscribes.BackgroundColor = Styles.BackColor;
            news.BackgroundColor = Styles.BackColor;
            currency.BackgroundColor = Styles.BackColor;
            favs.BackgroundColor = Styles.BackColor;
            if (scroll != null)
                scroll.ScrollToAsync(stack, ScrollToPosition.End, false);
        }

        public void MakeFrame()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            frame = new Frame { HasShadow = false, HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            stack = new StackLayout { VerticalOptions = LayoutOptions.End };
            for (int i = 0; i < mes.Count; i++)
            {
                Frame f = new Frame { BackgroundColor = Styles.BotColor, CornerRadius = 30, HasShadow = false };
                if (mes[i][0] == 'U')
                    f = new Frame
                    {
                        Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                        BorderColor = Styles.UserColor,
                        HorizontalOptions = LayoutOptions.End,
                        BackgroundColor = Styles.UserColor,
                        CornerRadius = 30,
                        HasShadow = false
                    };
                else
                {
                    if (mes[i][1] == 'C')
                    {
                        string[] cur = mes[i].Substring(2, mes[i].Length - 3).Split('\n');
                        StackLayout sl = new StackLayout();
                        sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[0], BackgroundColor = Styles.BotColor, FontSize = Styles.Size, FontAttributes = FontAttributes.Bold });
                        for (int j = 1; j < cur.Length; j++)
                            sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[j], BackgroundColor = Styles.BotColor, FontSize = Styles.Size * 3 / 2 });
                        f.Content = sl;
                    }
                    else if (mes[i].Split('֍').Length == 1)
                    {
                        Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
                        f.Content = l;
                    }
                    else
                    {
                        string[] info = mes[i].Substring(1).Split('֍');
                        StackLayout sl = new StackLayout();
                        Dictionary<string, string> dict = new Dictionary<string, string>();
                        for (int j = 0; j < info.Length / 2; j++)
                        {
                            dict[info[2 * j]] = info[2 * j + 1];
                            Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = info[2 * j], FontSize = Styles.Size, BackgroundColor = Styles.BotColor };
                            if (j > 0)
                            {
                                var tapGestureRecognizer = new TapGestureRecognizer();
                                tapGestureRecognizer.Tapped += (s, e) =>
                                {
                                    string tmp = dict[l.Text];
                                    Navigation.PushAsync(new ShowContent(tmp, l.Text));
                                };
                                l.GestureRecognizers.Add(tapGestureRecognizer);
                            }
                            else
                                l.FontAttributes = FontAttributes.Bold;
                            sl.Children.Add(l);
                        }
                        f.Content = sl;
                    }
                    f.BorderColor = Styles.BotColor;
                    f.HorizontalOptions = LayoutOptions.Start;
                }
                f.VerticalOptions = LayoutOptions.End;
                stack.Children.Add(new Label { FontSize = Styles.Size / 2, Text = "\n" });
                stack.Children.Add(f);
            }
            scroll = new ScrollView { Content = stack };
            frame.Content = scroll;
        }

    }
}

using System;
namespace XBot
{
    public partial class Settings
    {

        void MakeDark(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            else
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            main.Display();
            MakeContent();
        }

        void TimeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["frequency_intro"])
                Navigation.PushAsync(new TimingIntro());
            else
                Navigation.PushAsync(new Timing());
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["currency_intro"])
                Navigation.PushAsync(new CurrencyIntro());
            else
                Navigation.PushAsync(new Currency());
        }

        void TypeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["type_intro"])
                Navigation.PushAsync(new TypeIntro());
            else
                Navigation.PushAsync(new Type());
        }

        void ClearClick(object sender, EventArgs e)
        {
            App.Current.Properties["messages"] = "";
            main.Display();
        }

        void SubsClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["subscribes_intro"])
                Navigation.PushAsync(new SubscribesIntro());
            else
                Navigation.PushAsync(new Subscribes());
        }

        void ControlClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["control_intro"])
                Navigation.PushAsync(new ControlIntro());
            else
                Navigation.PushAsync(new Password());
        }

        void SizeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["size_intro"])
                Navigation.PushAsync(new SizeIntro(main));
            else
                Navigation.PushAsync(new Size(main));
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Password : ContentPage
    {

        Entry pass = new Entry
        {
            Placeholder = "Пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Entry repeat = new Entry
        {
            Placeholder = "Повторите пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Button enter = new Button
        {
            Text = "Войти",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End
        };

        string t = "\nРодительский контроль\n";

        public Password()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            StackLayout sl = new StackLayout();
            sl.Children.Add
                (new Label
                {
                    Text = t,
                    HorizontalTextAlignment = TextAlignment.Center,
                    FontSize = 20,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    VerticalOptions = LayoutOptions.Start,
                    TextColor = Styles.UserColor,
                    FontAttributes = FontAttributes.Bold,
                    BackgroundColor = Styles.BackColor
                });
            if (!(bool)App.Current.Properties["blocked"])
            {
                pass.Placeholder = "Придумайте пароль";
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                sl.Children.Add
                    (new Frame
                    {
                        Content = repeat,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Register;
            }
            else
            {
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Login;
                pass.Completed += Login;
            }
            sl.Children.Add(enter);
            Content = sl;
        }

        async void Register(object sender, EventArgs e)
        {
            if (pass.Text == "" || pass.Text == null)
                await DisplayAlert("Ошибка!", "Поле пароля пустое!", "Ок");
            else if (pass.Text != repeat.Text)
                await DisplayAlert("Ошибка!", "Пароли не совпадают!", "Ок");
            else
            {
                App.Current.Properties["password"] = pass.Text;
                App.Current.Properties["blocked"] = true;
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
        }

        async void Login(object sender, EventArgs e)
        {
            if (pass.Text == (string)App.Current.Properties["password"])
            {
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
            else
                await DisplayAlert("Ошибка!", "Неверно введен пароль!", "Ок");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace XBot
{
    public partial class Settings : ContentPage
    {
        Picker OnStart = new Picker { Items = { "🔝Последние новости", "🤵Мои подписки", "📈Курс валют" }, WidthRequest = 30 };
        Switch Hints = new Switch();
        Picker amount = new Picker { Items = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }, WidthRequest = 30, TextColor = Styles.UserColor };
        MainPage main;
        string t = "\nНастройки\n";

        public Settings(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Настройки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            amount.SelectedIndex = (int)App.Current.Properties["count"] - 1;
            amount.SelectedIndexChanged += (object sender, EventArgs e) => { App.Current.Properties["count"] = amount.SelectedIndex + 1; };
            OnStart.SelectedIndex = (string)App.Current.Properties["onstart"] == "news" ? 0 : (string)App.Current.Properties["onstart"] == "subscribes" ? 1 : 2;
            Hints.IsToggled = (bool)App.Current.Properties["hint"];
            Hints.Toggled += (object sender, ToggledEventArgs e) => App.Current.Properties["hint"] = !(bool)App.Current.Properties["hint"];
            OnStart.SelectedIndexChanged += (object sender, EventArgs e) =>
            {
                if (OnStart.SelectedIndex == 0)
                    App.Current.Properties["onstart"] = "news";
                else if (OnStart.SelectedIndex == 1)
                    App.Current.Properties["onstart"] = "subscribes";
                else
                    App.Current.Properties["onstart"] = "currency";
            };
            MakeContent();
        }

        void MakeContent()
        {
            BackgroundColor = Styles.BackColor;
            Button Dark = Elements.Button("Сменить", false);
            Button Time = Elements.Button("Область поиска", true);
            Button Size = Elements.Button("Размер шрифта", true);
            Button Type = Elements.Button("Тематика новостей", true);
            Button Clear = Elements.Button("Очистить диалоговое окно", true);
            Button Subs = Elements.Button("Мои подписки", true);
            Button Control = Elements.Button("Родительский контроль", true);
            Button Support = Elements.Button("Поддержать", true);
            Button Currency = Elements.Button("Валюта", true);
            Time.Clicked += TimeClick;
            Clear.Clicked += ClearClick;
            Subs.Clicked += SubsClick;
            Control.Clicked += ControlClick;
            Size.Clicked += SizeClick;
            Type.Clicked += TypeClick;
            Currency.Clicked += CurrencyClick;
            Support.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Support());
            Dark.Clicked += MakeDark;
            amount.TextColor = Styles.UserColor;
            OnStart.BackgroundColor = Styles.BackColor;
            amount.BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                Elements.LabelAndElement("Количество новостей за раз", amount),
                                Elements.LabelAndElement("При старте показывать", OnStart),
                                Elements.LabelAndElement("Цветовая тема", Dark),
                                Elements.LabelAndElement("Показывать подсказки", Hints),
                                Elements.ButtonInFrame(Type),
                                Elements.ButtonInFrame(Time),
                                Elements.ButtonInFrame(Currency),
                                Elements.ButtonInFrame(Size),
                                Elements.ButtonInFrame(Subs),
                                Elements.ButtonInFrame(Control),
                                Elements.ButtonInFrame(Clear),
                                Elements.ButtonInFrame(Support)
                            }
                        }
                    }
                }
            };
            
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class ShowContent : ContentPage
    {

        string title;
        string url;

        Button save = new Button
        {
            Text = "☆",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand,
            FontSize = 20
        };

        Button back = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        Button internet = new Button
        {
            Text = "🌎",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        public ShowContent(string url, string title)
        {
            this.title = title;
            this.url = url;
            BackgroundColor = Styles.BackColor;
            back.Clicked += BackClick;
            internet.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("http://" + url));
            if (Device.RuntimePlatform == "iOS")
                Title = title;
            else
                NavigationPage.SetHasNavigationBar(this, false);
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (PositionInList(favs, $"{title}֍{url}") != -1)
                save = new Button
                {
                    Text = "★",
                    BackgroundColor = Styles.BackColor,
                    TextColor = Color.Yellow,
                    BorderColor = Color.Yellow,
                    VerticalOptions = LayoutOptions.End,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    FontSize = 20
                };
            save.Clicked += SaveClick;
            Content = new StackLayout { Children = { new WebView { Source = "http://" + url, VerticalOptions = LayoutOptions.FillAndExpand }, new StackLayout { Children = { back, internet, save }, Orientation = StackOrientation.Horizontal } } };
        }

        void SaveClick(object sender, EventArgs e)
        {
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (save.Text == "☆")
            {
                favs.Add($"{title}֍{url}");
                save.Text = "★";
                save.TextColor = Color.Yellow;
            }
            else
            {
                favs.Remove($"{title}֍{url}");
                save.Text = "☆";
                save.TextColor = Styles.UserColor;
            }
            App.Current.Properties["save"] = Formats.FromListIntoString(favs);
        }

        async void BackClick(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        static int PositionInList(List<string> list, string line)
        {
            for (int i = 0; i < list.Count; i++)
                if (list[i] == line)
                    return i;
            return -1;
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Size : ContentPage
    {

        MainPage main;
        string t = "\nРазмер шрифта\n";
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Button ok = new Button
        {
            Text = "Применить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        int size = Styles.Size;
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        public Size(MainPage m)
        {
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            main = m;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += Ok_Clicked;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    ok
                }
            };
        }

        async void Ok_Clicked(object sender, EventArgs e)
        {
            App.Current.Properties["size"] = size;
            main.Display();
            await Navigation.PopAsync();
        }


        void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)(e.NewValue + 8);
            my.FontSize = size;
            bot.FontSize = size;
        }


        

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SizeIntro : ContentPage
    {
        MainPage main;
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SizeIntro(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Размер шрифта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Размер шрифта\"!\n\n" +
                                "В этом разделе можно выбрать размер шрифта сообщений в чате.\n\n" +
                                "Обратите внимание, что размер шрифта в первую очередь зависит от разрешения экрана.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["size_intro"] = false;
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{
    static class Styles
    {

        public static Xamarin.Forms.Color BackColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["back"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color UserColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["user"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color BotColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["bot"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static int Size
        {
            get => (int)App.Current.Properties["size"];
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Subscribes : ContentPage
    {

        Entry entry = new Entry();

        string t = "\nМои подписки\n";

        public Subscribes()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SubscribesIntro : ContentPage
    {

        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SubscribesIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Мои подписки";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Мои подписки\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет автоматически проводиться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["subscribes_intro"] = false;
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Support : ContentPage
    {
        Button ok = new Button
        {
            Text = "Поддержать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public Support()
        {
            ok.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("https://money.yandex.ru/to/410014676758208"));
            if (Device.RuntimePlatform == "iOS")
                Title = "Поддержать";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Большое спасибо за скачивание и использование моего приложения!\n\n" +
                                "Я верю в то, что оно тебе нравится, и ты поставил ему оценку в магазине приложений.\n\n" +
                                "Если хочешь поддержать меня материально, а также сделать вклад в будущие проекты, нажми на кнопку ниже😉",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    Elements.ButtonInFrame(ok)
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Timing : ContentPage
    {

        string t = "\nОбласть поиска\n";
        public Timing()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class TimingIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TimingIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Область поиска";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Область поиска\"!\n\n" +
                                "В этом разделе можно выбрать промежуток времени, в который будет проводиться поиск.\n\n" +
                                "Обратите внимание, что при выборе большого промежутка, новости могут быть устаревшими.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["frequency_intro"] = false;
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Type : ContentPage
    {
        string t = "\nТематика новостей\n";
        public Type()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class TypeIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TypeIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Тематика новостей";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Тематика новостей\"!\n\n" +
                                "В этом разделе можно выбрать тематику, по которой будет проводиться поиск.\n\n",                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["type_intro"] = false;
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Welcome : ContentPage
    {
        Button ok = new Button
        {
            Text = "Настроить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Button ignore = new Button
        {
            Text = "Пропустить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Welcome()
        {
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Привет, я XBot! Я буду присылать тебе новости, но на этом мои функции не ограничиваются!\n\n" +
                                "Еще я умею обрабатывать запросы, сохранять их, вычислять курс валют, а также ограничивать доступ к ненужному контенту.\n\n" +
                                "Я использую открытое API Mediametrics и центрального банка России, за что им огромное спасибо!\n\n" +
                                "Я являюсь некоммерческим проектом и создан в образовательных целях. Если у тебя возникли замечания или предложения, напиши моему создателю: emmtvv@icloud.com.\n\n" +
                                "Нажми на кнопку \"Настроить\", чтобы я работал максимально комфортно для тебя!\n\n" +
                                "Приятного пользования!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new XBot.SettingsOnStart.Intro1());
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro1 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help;
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro1()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Цветовая тема";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            MakeContent();
            dark.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
                MakeContent();
            };
            light.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
                MakeContent();
            };
        }

        string t = "\nЦветовая тема\n";
        Button dark = new Button { Text="     ", BackgroundColor = Color.FromRgb(30, 30, 30), BorderColor = Color.FromRgb(255,255,255), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };
        Button light = new Button { Text = "     ", BackgroundColor = Color.FromRgb(255, 255, 255), BorderColor = Color.FromRgb(30, 30, 30), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };

        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери цветовую тему приложения", "Хорошо!");
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            help = new Button
            {
                Text = "?",
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro2());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new Frame
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                                    BorderColor = Styles.UserColor,
                                    HorizontalOptions = LayoutOptions.End,
                                    BackgroundColor = Styles.UserColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                },
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size },
                                    BorderColor = Styles.BotColor,
                                    HorizontalOptions = LayoutOptions.Start,
                                    BackgroundColor = Styles.BotColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                }
                            }
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        HasShadow = false,
                        BackgroundColor = Styles.BackColor
                    },
                    new StackLayout
                    {
                        Children =
                        {
                            light,
                            dark
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro2 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери тематику, по которой будет проводиться поиск", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nТематика новостей\n";
        public Intro2()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro3());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro3 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери временной интервал поиска новостей", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nОбласть поиска\n";
        public Intro3()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro4());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro4 : ContentPage
    {
        string t = "\nРазмер шрифта\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        int size = (int)App.Current.Properties["size"];
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери размер шрифта в диалоге", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro4()
        {
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["size"] = size;
                Navigation.PushAsync(new Intro5());
            };

            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    new StackLayout
                    {
                        Children = { ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        private void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)e.NewValue + 8;
            my.FontSize = size;
            bot.FontSize = size;
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro5 : ContentPage
    {
        Picker entry = new Picker();
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери валюту, курс которой ты хотел бы получать", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nВалюта\n";

        public Intro5()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro6());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in Currency.CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }

                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro6 : ContentPage
    {
        Entry entry = new Entry();

        string t = "\nМои подписки\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери ключевые слова, по которым ты хотел бы получать нвоости", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro6()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro7());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
            Display();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        async void Display()
        {
            await DisplayAlert("Важная информация!", "Выбери ключевые слова, по которым будет производиться поиск", "Понятно!");
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro7 : ContentPage
    {
        Button ok = new Button
        {
            Text = "Начать!",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Intro7()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Моя настройка закончена и я готов к работе!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            for (int i = 0; i < 8; i++)
                Navigation.RemovePage(Navigation.NavigationStack[0]);

        }

    }
}

using System;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using System.Drawing;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.IO;

[assembly: XamlCompilation(XamlCompilationOptions.Compile)]
namespace XBot
{
    public partial class App : Application
    {
    
        public App()
        {
            object obj;
            if (!App.Current.Properties.TryGetValue("messages", out obj))
                App.Current.Properties["messages"] = "";
            if (!App.Current.Properties.TryGetValue("subscribes", out obj))
                App.Current.Properties["subscribes"] = "";
            if (!App.Current.Properties.TryGetValue("count", out obj))
                App.Current.Properties["count"] = 5;
            if (!App.Current.Properties.TryGetValue("onstart", out obj))
                App.Current.Properties["onstart"] = "news";
            if (!App.Current.Properties.TryGetValue("back", out obj))
                App.Current.Properties["back"] = "255 255 255";
            if (!App.Current.Properties.TryGetValue("user", out obj))
                App.Current.Properties["user"] = "0 0 255";
            if (!App.Current.Properties.TryGetValue("bot", out obj))
                App.Current.Properties["bot"] = "128 0 128";
            if (!App.Current.Properties.TryGetValue("control", out obj))
                App.Current.Properties["control"] = "";
            if (!App.Current.Properties.TryGetValue("blocked", out obj))
                App.Current.Properties["blocked"] = false;
            if (!App.Current.Properties.TryGetValue("welcome", out obj))
                App.Current.Properties["welcome"] = true;
            if (!App.Current.Properties.TryGetValue("subscribes_intro", out obj))
                App.Current.Properties["subscribes_intro"] = true;
            if (!App.Current.Properties.TryGetValue("control_intro", out obj))
                App.Current.Properties["control_intro"] = true;
            if (!App.Current.Properties.TryGetValue("hint", out obj))
                App.Current.Properties["hint"] = true;
            if (!App.Current.Properties.TryGetValue("frequency", out obj))
                App.Current.Properties["frequency"] = "online";
            if (!App.Current.Properties.TryGetValue("frequency_intro", out obj))
                App.Current.Properties["frequency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("size", out obj))
                App.Current.Properties["size"] = 14;
            if (!App.Current.Properties.TryGetValue("size_intro", out obj))
                App.Current.Properties["size_intro"] = true;
            if (!App.Current.Properties.TryGetValue("type", out obj))
                App.Current.Properties["type"] = "";
            if (!App.Current.Properties.TryGetValue("type_intro", out obj))
                App.Current.Properties["type_intro"] = true;
            if (!App.Current.Properties.TryGetValue("currency", out obj))
                App.Current.Properties["currency"] = "";
            if (!App.Current.Properties.TryGetValue("currency_intro", out obj))
                App.Current.Properties["currency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("save", out obj))
                App.Current.Properties["save"] = "";
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            else
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            MainPage = (bool)App.Current.Properties["welcome"] ? new NavigationPage(new Welcome()) : (bool)App.Current.Properties["hint"] ? new NavigationPage(new Hint()) : new NavigationPage(new MainPage());
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Http;
using System.Threading.Tasks;
using System.Threading;

namespace XBot
{
    static class Bot
    {
     
        public static readonly HttpClient client = new HttpClient();

        async public static void GetNews(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mess = "";
            int count = 0;
            try
            {
                line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=1&update=1401216280");
                string[] elems = line.Split('\n');
                for (int i = 1; count < (int)App.Current.Properties["count"] && i < elems.Length; i++)
                {
                    string[] first = elems[i].Split('\t');
                    string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                    string[] elems1 = info.Split('\t');
                    if (!Denied(elems1[1]))
                    {
                        mess += $"{elems1[1]}\n֍{elems1[0]}֍";
                        count++;
                    }
                }
            }
            catch (IndexOutOfRangeException) { }
            catch (Exception ex) 
            { 
                string a = ex.ToString();
                line = "";
            }
            mess += '\b';
            Chat.Remove();
            mess = $"Топ-{count} новостей на {Now} за {Period}\n\n֍֍" + mess;
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0 || count == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(mess.Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Search(MainPage m, IEnumerable<string> requests, bool type)
        {
            m.Active(false);
            int count = 1;
            int amount = 0;
            string mess = "";
            string line = "";
            try
            {
                while (count != 4 && amount < (int)App.Current.Properties["count"])
                {
                    line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=" + count.ToString() + "&update=1401216280");
                    string[] elems = line.Split('\n');
                    for (int i = 1; i < elems.Length; i++)
                    {
                        string[] first = elems[i].Split('\t');
                        string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                        string[] elems1 = info.Split('\t');
                        foreach (string str in requests)
                        {
                            if (IsSubString(elems1[1].ToLower(), str.ToLower()) && !Denied(elems1[1]))
                            {
                                mess += elems1[1] + "\n֍" + elems1[0] + "֍";
                                amount++;
                            }
                            if (amount == (int)App.Current.Properties["count"])
                                goto go;
                        }
                        count++;
                    }
                }
            }
            catch { }
            go:
            Chat.Remove();
            string name = "";
            if (type)
                name = "подписок";
            else
                name = $"новостей по запросу \"{FromIEnumerable(requests)}\"";
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(($"Топ-{amount} {name} на {Now} за {Period}\n\n֍֍" + mess + "\b\b\b").Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Currency(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mes = $"CКурс валют на {Now}\n";
            List<string> cur = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            try
            {
                byte[] s = await client.GetByteArrayAsync("https://www.cbr-xml-daily.ru/daily_json.js");
                line = Encoding.UTF8.GetString(s, 0, s.Length);
                string[] vl = line.Split('\n');
                for (int i = cur.Count - 1; i >= 0; i--)
                {
                    int num = XBot.Currency.CurrencyNum[cur[i]];
                    string[] ss = vl[num].Split(':')[1].Split(' ')[1].Split(',')[0].Split('.');
                    string p = vl[num - 2].Split(':')[1].Split(' ')[1].Split(',')[0];
                    double val = double.Parse(ss[0]) + double.Parse(ss[1]) / 10000; 
                    int a = int.Parse(p);
                    val = val / a + 0.005;
                    mes += $"{XBot.Currency.CurrencyId[cur[i]]}: {val:f2}\n";
                }
            }
            catch(Exception ex) { string a = ex.ToString(); }
            Chat.Remove();
            if (line == "")
                Chat.Add("Отсутствует подключение к интернету", true);
            else
                Chat.Add(mes, true);
            m.Display();
            m.Active(true);
        }


        static string FromIEnumerable(IEnumerable<string> arr)
        {
            string line = "";
            foreach (string s in arr)
                line += s + " ";
            return line.Substring(0, line.Length - 1);
        }

        static bool IsSubString(string name, string str)
        {
            if (str.Length > 5)
                str = str.Substring(0, str.Length - 2);
            return name.Contains(str);
        }

        static bool Denied(string news)
        {
            if (!(bool)App.Current.Properties["blocked"])
                return false;
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            foreach (string str in subs)
                if (news.ToLower().Contains(str.ToLower()))
                    return true;
            return false;
        }

        static string Period
        {
            get 
            {
                switch ((string)App.Current.Properties["frequency"])
                {
                    case "online":
                        return "последние 10 минут";
                    case "hour":
                        return "последний час";
                    case "day":
                        return "последние сутки";
                    case "week":
                        return "последнюю неделю";
                    default:
                        return "последний месяц";
                }
            }
        }

        static string Now
        {
            get {
                string datetime = DateTime.Now.ToString();
                string line = "";
                if (datetime[0] == '0')
                    datetime = datetime.Substring(1);
                string[] d1 = datetime.Split(' ');
                string[] date;
                if (!DateTime.Now.ToString().Contains("/"))
                {
                    date = d1[0].Split('.');
                    line += $"{date[0]} {Month(date[1])} ";
                }
                else
                {
                    date = d1[0].Split('/');
                    line += $"{date[1]} {Month(date[0])} ";
                }
                string[] time = d1[1].Split(':');
                line += time[0] + ":" + time[1];
                return line;
            }
        }

        static string Month(string num)
        {
            if (num[0] == '0')
                num = num.Substring(1);
            switch (int.Parse(num))
            {
                case 1:
                    return "января";
                case 2:
                    return "февраля";
                case 3:
                    return "марта";
                case 4:
                    return "апреля";
                case 5:
                    return "мая";
                case 6:
                    return "июня";
                case 7:
                    return "июля";
                case 8:
                    return "августа";
                case 9:
                    return "сентбря";
                case 10:
                    return "октября";
                case 11:
                    return "ноября";
                default:
                    return "декабря";
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace XBot
{
    static class Chat
    {
        public static void Add(string message, bool sender)
        {
            string mess = "";
            if (sender)
                mess += "B";
            else
                mess += "U";
            mess += message;
            Formats.Add(mess, "messages");
        }

        public static void Remove()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            mes.RemoveAt(mes.Count - 1);
            App.Current.Properties["messages"] = Formats.FromListIntoString(mes);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public partial class MainPage : ContentPage
    {
        async void Command()
        {
            Chat.Add(message.Text, false);
            switch (message.Text.Split(' ')[0])
            {
                case "/light":
                    App.Current.Properties["back"] = "255 255 255";
                    App.Current.Properties["user"] = "0 0 255";
                    App.Current.Properties["bot"] = "128 0 128";
                    Chat.Add("Тема сменена на светлую", true);
                    break;
                case "/dark":
                    App.Current.Properties["back"] = "30 30 30";
                    App.Current.Properties["user"] = "86 156 214";
                    App.Current.Properties["bot"] = "80 80 80";
                    Chat.Add("Тема сменена на темную", true);
                    break;
                case "/news":
                    NewsClick(new object(), new EventArgs());
                    break;
                default:
                    Chat.Add("Неизвестная команда!", true);
                    break;

            }
            Display();
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Control : ContentPage
    {

        Entry entry = new Entry();
        string t = "\nРодительский контроль\n";

        public Control()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительный запрет",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Button exit = new Button
            {
                Text = "Отключить контоль",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            exit.Clicked += Deny;
            Button apply = new Button
            {
                Text = "Применить",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            apply.Clicked += Apply;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    exit,
                    apply
                }
            };
        }

        async void Apply(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        async void Deny(object sender, EventArgs e)
        {
            App.Current.Properties["blocked"] = false;
            App.Current.Properties["control"] = "";
            await Navigation.PopAsync();
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class ControlIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public ControlIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Родительский контроль";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Родительский контроль\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет игнорироваться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["control_intro"] = false;
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class Currency : ContentPage
    {
        Picker entry = new Picker();

        string t = "\nВалюта\n";

        public Currency()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };             
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        public static Dictionary<string, int> CurrencyNum = new Dictionary<string, int>
        {
            {"Австралийский доллар", 12},
            {"Азербайджанский манат", 21},
            {"Фунт стерлингов Соединенного королевства", 30},
            {"Армянский драм", 39},
            {"Белорусский рубль", 48},
            {"Болгарский лев", 57},
            {"Бразильский реал", 66},
            {"Венгерский форинт", 75},
            {"Гонконгский доллар", 84},
            {"Датская крона", 93},
            {"Доллар США", 102},
            {"Евро", 111},
            {"Индийская рупия", 120},
            {"Казахстанский тенге", 129},
            {"Канадский доллар", 138},
            {"Киргизский сом", 147},
            {"Китайский юань", 156},
            {"Молдавский лей", 165},
            {"Норвежская крона", 174},
            {"Польский злотый", 183},
            {"Румынский лей", 192},
            {"Сингапурский доллар", 210},
            {"Таджикский сомони", 219},
            {"Турецкая лира", 228},
            {"Новый туркменский манат", 237},
            {"Узбекский сум", 246},
            {"Украинская гривна", 255},
            {"Чешская крона", 264},
            {"Шведская крона", 273},
            {"Швейцарский франк", 282},
            {"Южноафриканский рэнд", 291},
            {"Вон Республики Корея", 300},
            {"Японская иена", 309}
        };

        public static Dictionary<string, string> CurrencyId = new Dictionary<string, string>
        {
            {"Австралийский доллар", "AUD"},
            {"Азербайджанский манат", "AZN"},
            {"Фунт стерлингов Соединенного королевства", "GBP"},
            {"Армянский драм", "AMD"},
            {"Белорусский рубль", "BYN"},
            {"Болгарский лев", "BGN"},
            {"Бразильский реал", "BRL"},
            {"Венгерский форинт", "HUF"},
            {"Гонконгский доллар", "HKD"},
            {"Датская крона", "DKK"},
            {"Доллар США", "USD"},
            {"Евро", "EUR"},
            {"Индийская рупия", "INR"},
            {"Казахстанский тенге", "KZT"},
            {"Канадский доллар", "CAD"},
            {"Киргизский сом", "KGS"},
            {"Китайский юань", "CNY"},
            {"Молдавский лей", "MDL"},
            {"Норвежская крона", "NOK"},
            {"Польский злотый", "PLN"},
            {"Румынский лей", "RON"},
            {"Сингапурский доллар", "SGD"},
            {"Таджикский сомони", "TJS"},
            {"Турецкая лира", "TRY"},
            {"Новый туркменский манат", "TMT"},
            {"Узбекский сум", "UZS"},
            {"Украинская гривна", "UAH"},
            {"Чешская крона", "CZK"},
            {"Шведская крона", "SEK"},
            {"Швейцарский франк", "CHF"},
            {"Южноафриканский рэнд", "ZAR"},
            {"Вон Республики Корея", "KRW"},
            {"Японская иена", "JPY"}
        };
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class CurrencyIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public CurrencyIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Валюта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Валюта\"!\n\n" +
                                "В этом разделе можно добавить валюты, по которым будет проводиться поиск.\n\n",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["currency_intro"] = false;
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{

    public static class Elements
    {
        public static Frame LabelAndElement(string labeltext, View element)
        {
            return new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Label
                        {
                            TextColor = Styles.UserColor,
                            Text = labeltext,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            VerticalOptions = LayoutOptions.Center,
                            HorizontalTextAlignment = TextAlignment.Start
                        },
                        element
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Frame ButtonInFrame(Button b)
        {
            return new Frame
            {
                Content = b,
                BorderColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Button Button(string text, bool fill)
        {
            Button b = new Button
            {
                Text = text,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor
            };
            if (fill)
                b.HorizontalOptions = LayoutOptions.FillAndExpand;
            return b;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XBot
{
    static class Formats
    {

        public const char parse = '÷';

        public static string FromListIntoString(List<string> l)
        {
            if (l.Count == 0)
                return "";
            string line = "";
            for (int i = 0; i < l.Count; i++)
                line += l[i].Replace(parse.ToString(), parse.ToString() + parse.ToString()) + parse;
            return line.Substring(0, line.Length - 1);
        }

        public static List<string> FromStringIntoList(string line)
        {
            if (line == null || line.Length == 0)
                return new List<string>();
            string word = "";
            List<string> l = new List<string>();
            int i = 0;
            while (i < line.Length)
            {
                if (line[i] != parse)
                    word += line[i];
                else if (line[i + 1] == parse)
                    word += line[i++];
                else
                {
                    l.Add(word);
                    word = "";
                }
                i++;
            }
            l.Add(word);
            return l;
        }

        public static void Add(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Add(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

        public static void Remove(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Remove(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Hint : ContentPage
    {
        Button ok = new Button
        {
            Text = "Спасибо",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        string[] hints =
        {
            "При нажатии на кнопку 📈 я расскажу тебе о курсе валют",
            "При нажатии на кнопку 🤵 я расскажу тебе о последних новостях из твоих подписок",
            "При нажатии на кнопку 🔝 я расскажу тебе о последних новостях",
            "При нажатии на кнопку ⭐ я выведу избранные статьи",
            "В настройках можно указать количество новостей выводимых за раз",
            "В настройках можно сменить цветовую схему",
            "В настройках можно сменить контент, показываемый при запуске",
            "В настройках можно сохранить ключевые слова для поиска в разделе \"Мои подписки\"",
            "В настройках можно запретить показывать нежелательный контент в разделе \"Родительский контроль\"",
            "В настройках можно очистить диалоговое окно",
            "В настройках можно указать период времени, по которому будет проводиться поиск",
            "В настройках можно выбрать размер шрифта в чате",
            "Любимые статьи можно добавить в избранное"
        };

        public Hint()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text = hints[(new Random()).Next(hints.Length)],
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Xamarin.Forms;
using System.Drawing;



namespace XBot
{

    public partial class MainPage : ContentPage
    {
        Frame frame;
        Entry message;
        ScrollView scroll;
        StackLayout stack;
        Button settings;
        Button news;
        Button subscribes;
        Button currency;
        Button favs;

        public MainPage()
        {
            Title = "Диалог";
            NavigationPage.SetHasNavigationBar(this, false);
            message = new Entry
            {
                Placeholder = "Сообщение",
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                FontSize = 20,
                BackgroundColor = Styles.BackColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor
            };
            message.Completed += ButtonClick;
            settings = new Button
            {
                Text = "⚙️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            subscribes = new Button
            {
                Text = "🤵",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news = new Button
            {
                Text = "🔝",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            currency = new Button
            {
                Text = "📈",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            favs = new Button
            {
                Text = "⭐️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news.Clicked += NewsClick;
            settings.Clicked += SettingsClick;
            subscribes.Clicked += SubscribesClick;
            currency.Clicked += CurrencyClick;
            favs.Clicked += FavsClick;
            string line = (string)App.Current.Properties["messages"];
            if (line.Length == 0)
                frame = new Frame { HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            else
                MakeFrame();
            MakeContent();
            if ((string)App.Current.Properties["onstart"] == "news")
                NewsClick(new object(), new EventArgs());
            else if ((string)App.Current.Properties["onstart"] == "subscribes")
                SubscribesClick(new object(), new EventArgs());
            else
                CurrencyClick(new object(), new EventArgs());
        }

        private void FavsClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["save"] == "")
                Chat.Add("Список избранного пуст!", true);
            else
            {
                if ((string)App.Current.Properties["messages"] != "")
                    App.Current.Properties["messages"] += Formats.parse.ToString();
                App.Current.Properties["messages"] += $"BИзбранное:\n\n֍֍{((string)App.Current.Properties["save"]).Replace(Formats.parse.ToString(), "֍")}";
            }
            Display();
        }

        public void Active(bool act)
        {
            message.IsEnabled = act;
            settings.IsEnabled = act;
            subscribes.IsEnabled = act;  
            news.IsEnabled = act;
            currency.IsEnabled = act;
            favs.IsEnabled = act;
        }

        private void SubscribesClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["subscribes"] == "")
            {
                Chat.Add("Список подписок пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                Chat.Add("Ищу подписки...", true);
                Display();
                Bot.Search(this, Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]), true);
            }

        }

        private void SettingsClick(object sender, EventArgs e)
        {
            Navigation.PushAsync(new Settings(this));
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["currency"] == "")
            {
                Chat.Add("Список валют пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                try
                {
                    Chat.Add("Вычисляю курс валют...", true);
                    Display();
                    Bot.Currency(this);
                }
                catch { }
            }
        }

        private void NewsClick(object sender, EventArgs e)
        {
            try
            {
                Chat.Add("Ищу новости...", true);
                Display();
                Bot.GetNews(this);
            }
            catch { }
        }

        private void ButtonClick(object sender, EventArgs e)
        {
            if (message.Text == null || message.Text.Length == 0)
                return;
            else
            {
                Chat.Add(message.Text, false);
                Chat.Add($"Выполняю поиск по запросу \"{message.Text}\"...", true);
                Display();
                Bot.Search(this, message.Text.Split(' '), false);
            }
            message.Text = "";
        }

        public void Display()
        {
            MakeFrame();
            MakeContent();
        }

        public void MakeContent()
        {
            Content = new StackLayout
            {
                Children =
                {
                    frame,
                    message,
                    new StackLayout
                    {
                        Children =
                        {
                            settings,
                            subscribes,
                            news,
                            currency,
                            favs
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                }
            };
            BackgroundColor = Styles.BackColor;
            message.TextColor = Styles.UserColor;
            message.BackgroundColor = Styles.BackColor;
            settings.BackgroundColor = Styles.BackColor;
            subscribes.BackgroundColor = Styles.BackColor;
            news.BackgroundColor = Styles.BackColor;
            currency.BackgroundColor = Styles.BackColor;
            favs.BackgroundColor = Styles.BackColor;
            if (scroll != null)
                scroll.ScrollToAsync(stack, ScrollToPosition.End, false);
        }

        public void MakeFrame()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            frame = new Frame { HasShadow = false, HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            stack = new StackLayout { VerticalOptions = LayoutOptions.End };
            for (int i = 0; i < mes.Count; i++)
            {
                Frame f = new Frame { BackgroundColor = Styles.BotColor, CornerRadius = 30, HasShadow = false };
                if (mes[i][0] == 'U')
                    f = new Frame
                    {
                        Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                        BorderColor = Styles.UserColor,
                        HorizontalOptions = LayoutOptions.End,
                        BackgroundColor = Styles.UserColor,
                        CornerRadius = 30,
                        HasShadow = false
                    };
                else
                {
                    if (mes[i][1] == 'C')
                    {
                        string[] cur = mes[i].Substring(2, mes[i].Length - 3).Split('\n');
                        StackLayout sl = new StackLayout();
                        sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[0], BackgroundColor = Styles.BotColor, FontSize = Styles.Size, FontAttributes = FontAttributes.Bold });
                        for (int j = 1; j < cur.Length; j++)
                            sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[j], BackgroundColor = Styles.BotColor, FontSize = Styles.Size * 3 / 2 });
                        f.Content = sl;
                    }
                    else if (mes[i].Split('֍').Length == 1)
                    {
                        Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
                        f.Content = l;
                    }
                    else
                    {
                        string[] info = mes[i].Substring(1).Split('֍');
                        StackLayout sl = new StackLayout();
                        Dictionary<string, string> dict = new Dictionary<string, string>();
                        for (int j = 0; j < info.Length / 2; j++)
                        {
                            dict[info[2 * j]] = info[2 * j + 1];
                            Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = info[2 * j], FontSize = Styles.Size, BackgroundColor = Styles.BotColor };
                            if (j > 0)
                            {
                                var tapGestureRecognizer = new TapGestureRecognizer();
                                tapGestureRecognizer.Tapped += (s, e) =>
                                {
                                    string tmp = dict[l.Text];
                                    Navigation.PushAsync(new ShowContent(tmp, l.Text));
                                };
                                l.GestureRecognizers.Add(tapGestureRecognizer);
                            }
                            else
                                l.FontAttributes = FontAttributes.Bold;
                            sl.Children.Add(l);
                        }
                        f.Content = sl;
                    }
                    f.BorderColor = Styles.BotColor;
                    f.HorizontalOptions = LayoutOptions.Start;
                }
                f.VerticalOptions = LayoutOptions.End;
                stack.Children.Add(new Label { FontSize = Styles.Size / 2, Text = "\n" });
                stack.Children.Add(f);
            }
            scroll = new ScrollView { Content = stack };
            frame.Content = scroll;
        }

    }
}

using System;
namespace XBot
{
    public partial class Settings
    {

        void MakeDark(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            else
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            main.Display();
            MakeContent();
        }

        void TimeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["frequency_intro"])
                Navigation.PushAsync(new TimingIntro());
            else
                Navigation.PushAsync(new Timing());
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["currency_intro"])
                Navigation.PushAsync(new CurrencyIntro());
            else
                Navigation.PushAsync(new Currency());
        }

        void TypeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["type_intro"])
                Navigation.PushAsync(new TypeIntro());
            else
                Navigation.PushAsync(new Type());
        }

        void ClearClick(object sender, EventArgs e)
        {
            App.Current.Properties["messages"] = "";
            main.Display();
        }

        void SubsClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["subscribes_intro"])
                Navigation.PushAsync(new SubscribesIntro());
            else
                Navigation.PushAsync(new Subscribes());
        }

        void ControlClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["control_intro"])
                Navigation.PushAsync(new ControlIntro());
            else
                Navigation.PushAsync(new Password());
        }

        void SizeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["size_intro"])
                Navigation.PushAsync(new SizeIntro(main));
            else
                Navigation.PushAsync(new Size(main));
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Password : ContentPage
    {

        Entry pass = new Entry
        {
            Placeholder = "Пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Entry repeat = new Entry
        {
            Placeholder = "Повторите пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Button enter = new Button
        {
            Text = "Войти",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End
        };

        string t = "\nРодительский контроль\n";

        public Password()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            StackLayout sl = new StackLayout();
            sl.Children.Add
                (new Label
                {
                    Text = t,
                    HorizontalTextAlignment = TextAlignment.Center,
                    FontSize = 20,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    VerticalOptions = LayoutOptions.Start,
                    TextColor = Styles.UserColor,
                    FontAttributes = FontAttributes.Bold,
                    BackgroundColor = Styles.BackColor
                });
            if (!(bool)App.Current.Properties["blocked"])
            {
                pass.Placeholder = "Придумайте пароль";
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                sl.Children.Add
                    (new Frame
                    {
                        Content = repeat,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Register;
            }
            else
            {
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Login;
                pass.Completed += Login;
            }
            sl.Children.Add(enter);
            Content = sl;
        }

        async void Register(object sender, EventArgs e)
        {
            if (pass.Text == "" || pass.Text == null)
                await DisplayAlert("Ошибка!", "Поле пароля пустое!", "Ок");
            else if (pass.Text != repeat.Text)
                await DisplayAlert("Ошибка!", "Пароли не совпадают!", "Ок");
            else
            {
                App.Current.Properties["password"] = pass.Text;
                App.Current.Properties["blocked"] = true;
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
        }

        async void Login(object sender, EventArgs e)
        {
            if (pass.Text == (string)App.Current.Properties["password"])
            {
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
            else
                await DisplayAlert("Ошибка!", "Неверно введен пароль!", "Ок");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace XBot
{
    public partial class Settings : ContentPage
    {
        Picker OnStart = new Picker { Items = { "🔝Последние новости", "🤵Мои подписки", "📈Курс валют" }, WidthRequest = 30 };
        Switch Hints = new Switch();
        Picker amount = new Picker { Items = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }, WidthRequest = 30, TextColor = Styles.UserColor };
        MainPage main;
        string t = "\nНастройки\n";

        public Settings(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Настройки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            amount.SelectedIndex = (int)App.Current.Properties["count"] - 1;
            amount.SelectedIndexChanged += (object sender, EventArgs e) => { App.Current.Properties["count"] = amount.SelectedIndex + 1; };
            OnStart.SelectedIndex = (string)App.Current.Properties["onstart"] == "news" ? 0 : (string)App.Current.Properties["onstart"] == "subscribes" ? 1 : 2;
            Hints.IsToggled = (bool)App.Current.Properties["hint"];
            Hints.Toggled += (object sender, ToggledEventArgs e) => App.Current.Properties["hint"] = !(bool)App.Current.Properties["hint"];
            OnStart.SelectedIndexChanged += (object sender, EventArgs e) =>
            {
                if (OnStart.SelectedIndex == 0)
                    App.Current.Properties["onstart"] = "news";
                else if (OnStart.SelectedIndex == 1)
                    App.Current.Properties["onstart"] = "subscribes";
                else
                    App.Current.Properties["onstart"] = "currency";
            };
            MakeContent();
        }

        void MakeContent()
        {
            BackgroundColor = Styles.BackColor;
            Button Dark = Elements.Button("Сменить", false);
            Button Time = Elements.Button("Область поиска", true);
            Button Size = Elements.Button("Размер шрифта", true);
            Button Type = Elements.Button("Тематика новостей", true);
            Button Clear = Elements.Button("Очистить диалоговое окно", true);
            Button Subs = Elements.Button("Мои подписки", true);
            Button Control = Elements.Button("Родительский контроль", true);
            Button Support = Elements.Button("Поддержать", true);
            Button Currency = Elements.Button("Валюта", true);
            Time.Clicked += TimeClick;
            Clear.Clicked += ClearClick;
            Subs.Clicked += SubsClick;
            Control.Clicked += ControlClick;
            Size.Clicked += SizeClick;
            Type.Clicked += TypeClick;
            Currency.Clicked += CurrencyClick;
            Support.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Support());
            Dark.Clicked += MakeDark;
            amount.TextColor = Styles.UserColor;
            OnStart.BackgroundColor = Styles.BackColor;
            amount.BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                Elements.LabelAndElement("Количество новостей за раз", amount),
                                Elements.LabelAndElement("При старте показывать", OnStart),
                                Elements.LabelAndElement("Цветовая тема", Dark),
                                Elements.LabelAndElement("Показывать подсказки", Hints),
                                Elements.ButtonInFrame(Type),
                                Elements.ButtonInFrame(Time),
                                Elements.ButtonInFrame(Currency),
                                Elements.ButtonInFrame(Size),
                                Elements.ButtonInFrame(Subs),
                                Elements.ButtonInFrame(Control),
                                Elements.ButtonInFrame(Clear),
                                Elements.ButtonInFrame(Support)
                            }
                        }
                    }
                }
            };
            
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class ShowContent : ContentPage
    {

        string title;
        string url;

        Button save = new Button
        {
            Text = "☆",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand,
            FontSize = 20
        };

        Button back = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        Button internet = new Button
        {
            Text = "🌎",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        public ShowContent(string url, string title)
        {
            this.title = title;
            this.url = url;
            BackgroundColor = Styles.BackColor;
            back.Clicked += BackClick;
            internet.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("http://" + url));
            if (Device.RuntimePlatform == "iOS")
                Title = title;
            else
                NavigationPage.SetHasNavigationBar(this, false);
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (PositionInList(favs, $"{title}֍{url}") != -1)
                save = new Button
                {
                    Text = "★",
                    BackgroundColor = Styles.BackColor,
                    TextColor = Color.Yellow,
                    BorderColor = Color.Yellow,
                    VerticalOptions = LayoutOptions.End,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    FontSize = 20
                };
            save.Clicked += SaveClick;
            Content = new StackLayout { Children = { new WebView { Source = "http://" + url, VerticalOptions = LayoutOptions.FillAndExpand }, new StackLayout { Children = { back, internet, save }, Orientation = StackOrientation.Horizontal } } };
        }

        void SaveClick(object sender, EventArgs e)
        {
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (save.Text == "☆")
            {
                favs.Add($"{title}֍{url}");
                save.Text = "★";
                save.TextColor = Color.Yellow;
            }
            else
            {
                favs.Remove($"{title}֍{url}");
                save.Text = "☆";
                save.TextColor = Styles.UserColor;
            }
            App.Current.Properties["save"] = Formats.FromListIntoString(favs);
        }

        async void BackClick(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        static int PositionInList(List<string> list, string line)
        {
            for (int i = 0; i < list.Count; i++)
                if (list[i] == line)
                    return i;
            return -1;
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Size : ContentPage
    {

        MainPage main;
        string t = "\nРазмер шрифта\n";
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Button ok = new Button
        {
            Text = "Применить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        int size = Styles.Size;
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        public Size(MainPage m)
        {
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            main = m;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += Ok_Clicked;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    ok
                }
            };
        }

        async void Ok_Clicked(object sender, EventArgs e)
        {
            App.Current.Properties["size"] = size;
            main.Display();
            await Navigation.PopAsync();
        }


        void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)(e.NewValue + 8);
            my.FontSize = size;
            bot.FontSize = size;
        }


        

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SizeIntro : ContentPage
    {
        MainPage main;
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SizeIntro(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Размер шрифта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Размер шрифта\"!\n\n" +
                                "В этом разделе можно выбрать размер шрифта сообщений в чате.\n\n" +
                                "Обратите внимание, что размер шрифта в первую очередь зависит от разрешения экрана.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["size_intro"] = false;
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{
    static class Styles
    {

        public static Xamarin.Forms.Color BackColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["back"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color UserColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["user"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color BotColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["bot"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static int Size
        {
            get => (int)App.Current.Properties["size"];
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Subscribes : ContentPage
    {

        Entry entry = new Entry();

        string t = "\nМои подписки\n";

        public Subscribes()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SubscribesIntro : ContentPage
    {

        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SubscribesIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Мои подписки";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Мои подписки\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет автоматически проводиться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["subscribes_intro"] = false;
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Support : ContentPage
    {
        Button ok = new Button
        {
            Text = "Поддержать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public Support()
        {
            ok.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("https://money.yandex.ru/to/410014676758208"));
            if (Device.RuntimePlatform == "iOS")
                Title = "Поддержать";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Большое спасибо за скачивание и использование моего приложения!\n\n" +
                                "Я верю в то, что оно тебе нравится, и ты поставил ему оценку в магазине приложений.\n\n" +
                                "Если хочешь поддержать меня материально, а также сделать вклад в будущие проекты, нажми на кнопку ниже😉",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    Elements.ButtonInFrame(ok)
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Timing : ContentPage
    {

        string t = "\nОбласть поиска\n";
        public Timing()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class TimingIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TimingIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Область поиска";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Область поиска\"!\n\n" +
                                "В этом разделе можно выбрать промежуток времени, в который будет проводиться поиск.\n\n" +
                                "Обратите внимание, что при выборе большого промежутка, новости могут быть устаревшими.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["frequency_intro"] = false;
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Type : ContentPage
    {
        string t = "\nТематика новостей\n";
        public Type()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class TypeIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TypeIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Тематика новостей";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Тематика новостей\"!\n\n" +
                                "В этом разделе можно выбрать тематику, по которой будет проводиться поиск.\n\n",                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["type_intro"] = false;
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Welcome : ContentPage
    {
        Button ok = new Button
        {
            Text = "Настроить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Button ignore = new Button
        {
            Text = "Пропустить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Welcome()
        {
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Привет, я XBot! Я буду присылать тебе новости, но на этом мои функции не ограничиваются!\n\n" +
                                "Еще я умею обрабатывать запросы, сохранять их, вычислять курс валют, а также ограничивать доступ к ненужному контенту.\n\n" +
                                "Я использую открытое API Mediametrics и центрального банка России, за что им огромное спасибо!\n\n" +
                                "Я являюсь некоммерческим проектом и создан в образовательных целях. Если у тебя возникли замечания или предложения, напиши моему создателю: emmtvv@icloud.com.\n\n" +
                                "Нажми на кнопку \"Настроить\", чтобы я работал максимально комфортно для тебя!\n\n" +
                                "Приятного пользования!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new XBot.SettingsOnStart.Intro1());
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro1 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help;
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro1()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Цветовая тема";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            MakeContent();
            dark.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
                MakeContent();
            };
            light.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
                MakeContent();
            };
        }

        string t = "\nЦветовая тема\n";
        Button dark = new Button { Text="     ", BackgroundColor = Color.FromRgb(30, 30, 30), BorderColor = Color.FromRgb(255,255,255), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };
        Button light = new Button { Text = "     ", BackgroundColor = Color.FromRgb(255, 255, 255), BorderColor = Color.FromRgb(30, 30, 30), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };

        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери цветовую тему приложения", "Хорошо!");
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            help = new Button
            {
                Text = "?",
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro2());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new Frame
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                                    BorderColor = Styles.UserColor,
                                    HorizontalOptions = LayoutOptions.End,
                                    BackgroundColor = Styles.UserColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                },
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size },
                                    BorderColor = Styles.BotColor,
                                    HorizontalOptions = LayoutOptions.Start,
                                    BackgroundColor = Styles.BotColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                }
                            }
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        HasShadow = false,
                        BackgroundColor = Styles.BackColor
                    },
                    new StackLayout
                    {
                        Children =
                        {
                            light,
                            dark
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro2 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери тематику, по которой будет проводиться поиск", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nТематика новостей\n";
        public Intro2()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro3());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro3 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери временной интервал поиска новостей", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nОбласть поиска\n";
        public Intro3()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro4());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro4 : ContentPage
    {
        string t = "\nРазмер шрифта\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        int size = (int)App.Current.Properties["size"];
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери размер шрифта в диалоге", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro4()
        {
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["size"] = size;
                Navigation.PushAsync(new Intro5());
            };

            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    new StackLayout
                    {
                        Children = { ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        private void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)e.NewValue + 8;
            my.FontSize = size;
            bot.FontSize = size;
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro5 : ContentPage
    {
        Picker entry = new Picker();
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери валюту, курс которой ты хотел бы получать", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nВалюта\n";

        public Intro5()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro6());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in Currency.CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }

                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro6 : ContentPage
    {
        Entry entry = new Entry();

        string t = "\nМои подписки\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери ключевые слова, по которым ты хотел бы получать нвоости", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro6()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro7());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
            Display();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        async void Display()
        {
            await DisplayAlert("Важная информация!", "Выбери ключевые слова, по которым будет производиться поиск", "Понятно!");
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro7 : ContentPage
    {
        Button ok = new Button
        {
            Text = "Начать!",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Intro7()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Моя настройка закончена и я готов к работе!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            for (int i = 0; i < 8; i++)
                Navigation.RemovePage(Navigation.NavigationStack[0]);

        }

    }
}

using System;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using System.Drawing;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.IO;

[assembly: XamlCompilation(XamlCompilationOptions.Compile)]
namespace XBot
{
    public partial class App : Application
    {
    
        public App()
        {
            object obj;
            if (!App.Current.Properties.TryGetValue("messages", out obj))
                App.Current.Properties["messages"] = "";
            if (!App.Current.Properties.TryGetValue("subscribes", out obj))
                App.Current.Properties["subscribes"] = "";
            if (!App.Current.Properties.TryGetValue("count", out obj))
                App.Current.Properties["count"] = 5;
            if (!App.Current.Properties.TryGetValue("onstart", out obj))
                App.Current.Properties["onstart"] = "news";
            if (!App.Current.Properties.TryGetValue("back", out obj))
                App.Current.Properties["back"] = "255 255 255";
            if (!App.Current.Properties.TryGetValue("user", out obj))
                App.Current.Properties["user"] = "0 0 255";
            if (!App.Current.Properties.TryGetValue("bot", out obj))
                App.Current.Properties["bot"] = "128 0 128";
            if (!App.Current.Properties.TryGetValue("control", out obj))
                App.Current.Properties["control"] = "";
            if (!App.Current.Properties.TryGetValue("blocked", out obj))
                App.Current.Properties["blocked"] = false;
            if (!App.Current.Properties.TryGetValue("welcome", out obj))
                App.Current.Properties["welcome"] = true;
            if (!App.Current.Properties.TryGetValue("subscribes_intro", out obj))
                App.Current.Properties["subscribes_intro"] = true;
            if (!App.Current.Properties.TryGetValue("control_intro", out obj))
                App.Current.Properties["control_intro"] = true;
            if (!App.Current.Properties.TryGetValue("hint", out obj))
                App.Current.Properties["hint"] = true;
            if (!App.Current.Properties.TryGetValue("frequency", out obj))
                App.Current.Properties["frequency"] = "online";
            if (!App.Current.Properties.TryGetValue("frequency_intro", out obj))
                App.Current.Properties["frequency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("size", out obj))
                App.Current.Properties["size"] = 14;
            if (!App.Current.Properties.TryGetValue("size_intro", out obj))
                App.Current.Properties["size_intro"] = true;
            if (!App.Current.Properties.TryGetValue("type", out obj))
                App.Current.Properties["type"] = "";
            if (!App.Current.Properties.TryGetValue("type_intro", out obj))
                App.Current.Properties["type_intro"] = true;
            if (!App.Current.Properties.TryGetValue("currency", out obj))
                App.Current.Properties["currency"] = "";
            if (!App.Current.Properties.TryGetValue("currency_intro", out obj))
                App.Current.Properties["currency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("save", out obj))
                App.Current.Properties["save"] = "";
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            else
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            MainPage = (bool)App.Current.Properties["welcome"] ? new NavigationPage(new Welcome()) : (bool)App.Current.Properties["hint"] ? new NavigationPage(new Hint()) : new NavigationPage(new MainPage());
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Http;
using System.Threading.Tasks;
using System.Threading;

namespace XBot
{
    static class Bot
    {
     
        public static readonly HttpClient client = new HttpClient();

        async public static void GetNews(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mess = "";
            int count = 0;
            try
            {
                line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=1&update=1401216280");
                string[] elems = line.Split('\n');
                for (int i = 1; count < (int)App.Current.Properties["count"] && i < elems.Length; i++)
                {
                    string[] first = elems[i].Split('\t');
                    string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                    string[] elems1 = info.Split('\t');
                    if (!Denied(elems1[1]))
                    {
                        mess += $"{elems1[1]}\n֍{elems1[0]}֍";
                        count++;
                    }
                }
            }
            catch (IndexOutOfRangeException) { }
            catch (Exception ex) 
            { 
                string a = ex.ToString();
                line = "";
            }
            mess += '\b';
            Chat.Remove();
            mess = $"Топ-{count} новостей на {Now} за {Period}\n\n֍֍" + mess;
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0 || count == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(mess.Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Search(MainPage m, IEnumerable<string> requests, bool type)
        {
            m.Active(false);
            int count = 1;
            int amount = 0;
            string mess = "";
            string line = "";
            try
            {
                while (count != 4 && amount < (int)App.Current.Properties["count"])
                {
                    line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=" + count.ToString() + "&update=1401216280");
                    string[] elems = line.Split('\n');
                    for (int i = 1; i < elems.Length; i++)
                    {
                        string[] first = elems[i].Split('\t');
                        string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                        string[] elems1 = info.Split('\t');
                        foreach (string str in requests)
                        {
                            if (IsSubString(elems1[1].ToLower(), str.ToLower()) && !Denied(elems1[1]))
                            {
                                mess += elems1[1] + "\n֍" + elems1[0] + "֍";
                                amount++;
                            }
                            if (amount == (int)App.Current.Properties["count"])
                                goto go;
                        }
                        count++;
                    }
                }
            }
            catch { }
            go:
            Chat.Remove();
            string name = "";
            if (type)
                name = "подписок";
            else
                name = $"новостей по запросу \"{FromIEnumerable(requests)}\"";
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(($"Топ-{amount} {name} на {Now} за {Period}\n\n֍֍" + mess + "\b\b\b").Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Currency(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mes = $"CКурс валют на {Now}\n";
            List<string> cur = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            try
            {
                byte[] s = await client.GetByteArrayAsync("https://www.cbr-xml-daily.ru/daily_json.js");
                line = Encoding.UTF8.GetString(s, 0, s.Length);
                string[] vl = line.Split('\n');
                for (int i = cur.Count - 1; i >= 0; i--)
                {
                    int num = XBot.Currency.CurrencyNum[cur[i]];
                    string[] ss = vl[num].Split(':')[1].Split(' ')[1].Split(',')[0].Split('.');
                    string p = vl[num - 2].Split(':')[1].Split(' ')[1].Split(',')[0];
                    double val = double.Parse(ss[0]) + double.Parse(ss[1]) / 10000; 
                    int a = int.Parse(p);
                    val = val / a + 0.005;
                    mes += $"{XBot.Currency.CurrencyId[cur[i]]}: {val:f2}\n";
                }
            }
            catch(Exception ex) { string a = ex.ToString(); }
            Chat.Remove();
            if (line == "")
                Chat.Add("Отсутствует подключение к интернету", true);
            else
                Chat.Add(mes, true);
            m.Display();
            m.Active(true);
        }


        static string FromIEnumerable(IEnumerable<string> arr)
        {
            string line = "";
            foreach (string s in arr)
                line += s + " ";
            return line.Substring(0, line.Length - 1);
        }

        static bool IsSubString(string name, string str)
        {
            if (str.Length > 5)
                str = str.Substring(0, str.Length - 2);
            return name.Contains(str);
        }

        static bool Denied(string news)
        {
            if (!(bool)App.Current.Properties["blocked"])
                return false;
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            foreach (string str in subs)
                if (news.ToLower().Contains(str.ToLower()))
                    return true;
            return false;
        }

        static string Period
        {
            get 
            {
                switch ((string)App.Current.Properties["frequency"])
                {
                    case "online":
                        return "последние 10 минут";
                    case "hour":
                        return "последний час";
                    case "day":
                        return "последние сутки";
                    case "week":
                        return "последнюю неделю";
                    default:
                        return "последний месяц";
                }
            }
        }

        static string Now
        {
            get {
                string datetime = DateTime.Now.ToString();
                string line = "";
                if (datetime[0] == '0')
                    datetime = datetime.Substring(1);
                string[] d1 = datetime.Split(' ');
                string[] date;
                if (!DateTime.Now.ToString().Contains("/"))
                {
                    date = d1[0].Split('.');
                    line += $"{date[0]} {Month(date[1])} ";
                }
                else
                {
                    date = d1[0].Split('/');
                    line += $"{date[1]} {Month(date[0])} ";
                }
                string[] time = d1[1].Split(':');
                line += time[0] + ":" + time[1];
                return line;
            }
        }

        static string Month(string num)
        {
            if (num[0] == '0')
                num = num.Substring(1);
            switch (int.Parse(num))
            {
                case 1:
                    return "января";
                case 2:
                    return "февраля";
                case 3:
                    return "марта";
                case 4:
                    return "апреля";
                case 5:
                    return "мая";
                case 6:
                    return "июня";
                case 7:
                    return "июля";
                case 8:
                    return "августа";
                case 9:
                    return "сентбря";
                case 10:
                    return "октября";
                case 11:
                    return "ноября";
                default:
                    return "декабря";
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace XBot
{
    static class Chat
    {
        public static void Add(string message, bool sender)
        {
            string mess = "";
            if (sender)
                mess += "B";
            else
                mess += "U";
            mess += message;
            Formats.Add(mess, "messages");
        }

        public static void Remove()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            mes.RemoveAt(mes.Count - 1);
            App.Current.Properties["messages"] = Formats.FromListIntoString(mes);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public partial class MainPage : ContentPage
    {
        async void Command()
        {
            Chat.Add(message.Text, false);
            switch (message.Text.Split(' ')[0])
            {
                case "/light":
                    App.Current.Properties["back"] = "255 255 255";
                    App.Current.Properties["user"] = "0 0 255";
                    App.Current.Properties["bot"] = "128 0 128";
                    Chat.Add("Тема сменена на светлую", true);
                    break;
                case "/dark":
                    App.Current.Properties["back"] = "30 30 30";
                    App.Current.Properties["user"] = "86 156 214";
                    App.Current.Properties["bot"] = "80 80 80";
                    Chat.Add("Тема сменена на темную", true);
                    break;
                case "/news":
                    NewsClick(new object(), new EventArgs());
                    break;
                default:
                    Chat.Add("Неизвестная команда!", true);
                    break;

            }
            Display();
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Control : ContentPage
    {

        Entry entry = new Entry();
        string t = "\nРодительский контроль\n";

        public Control()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительный запрет",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Button exit = new Button
            {
                Text = "Отключить контоль",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            exit.Clicked += Deny;
            Button apply = new Button
            {
                Text = "Применить",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            apply.Clicked += Apply;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    exit,
                    apply
                }
            };
        }

        async void Apply(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        async void Deny(object sender, EventArgs e)
        {
            App.Current.Properties["blocked"] = false;
            App.Current.Properties["control"] = "";
            await Navigation.PopAsync();
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class ControlIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public ControlIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Родительский контроль";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Родительский контроль\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет игнорироваться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["control_intro"] = false;
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class Currency : ContentPage
    {
        Picker entry = new Picker();

        string t = "\nВалюта\n";

        public Currency()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };             
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        public static Dictionary<string, int> CurrencyNum = new Dictionary<string, int>
        {
            {"Австралийский доллар", 12},
            {"Азербайджанский манат", 21},
            {"Фунт стерлингов Соединенного королевства", 30},
            {"Армянский драм", 39},
            {"Белорусский рубль", 48},
            {"Болгарский лев", 57},
            {"Бразильский реал", 66},
            {"Венгерский форинт", 75},
            {"Гонконгский доллар", 84},
            {"Датская крона", 93},
            {"Доллар США", 102},
            {"Евро", 111},
            {"Индийская рупия", 120},
            {"Казахстанский тенге", 129},
            {"Канадский доллар", 138},
            {"Киргизский сом", 147},
            {"Китайский юань", 156},
            {"Молдавский лей", 165},
            {"Норвежская крона", 174},
            {"Польский злотый", 183},
            {"Румынский лей", 192},
            {"Сингапурский доллар", 210},
            {"Таджикский сомони", 219},
            {"Турецкая лира", 228},
            {"Новый туркменский манат", 237},
            {"Узбекский сум", 246},
            {"Украинская гривна", 255},
            {"Чешская крона", 264},
            {"Шведская крона", 273},
            {"Швейцарский франк", 282},
            {"Южноафриканский рэнд", 291},
            {"Вон Республики Корея", 300},
            {"Японская иена", 309}
        };

        public static Dictionary<string, string> CurrencyId = new Dictionary<string, string>
        {
            {"Австралийский доллар", "AUD"},
            {"Азербайджанский манат", "AZN"},
            {"Фунт стерлингов Соединенного королевства", "GBP"},
            {"Армянский драм", "AMD"},
            {"Белорусский рубль", "BYN"},
            {"Болгарский лев", "BGN"},
            {"Бразильский реал", "BRL"},
            {"Венгерский форинт", "HUF"},
            {"Гонконгский доллар", "HKD"},
            {"Датская крона", "DKK"},
            {"Доллар США", "USD"},
            {"Евро", "EUR"},
            {"Индийская рупия", "INR"},
            {"Казахстанский тенге", "KZT"},
            {"Канадский доллар", "CAD"},
            {"Киргизский сом", "KGS"},
            {"Китайский юань", "CNY"},
            {"Молдавский лей", "MDL"},
            {"Норвежская крона", "NOK"},
            {"Польский злотый", "PLN"},
            {"Румынский лей", "RON"},
            {"Сингапурский доллар", "SGD"},
            {"Таджикский сомони", "TJS"},
            {"Турецкая лира", "TRY"},
            {"Новый туркменский манат", "TMT"},
            {"Узбекский сум", "UZS"},
            {"Украинская гривна", "UAH"},
            {"Чешская крона", "CZK"},
            {"Шведская крона", "SEK"},
            {"Швейцарский франк", "CHF"},
            {"Южноафриканский рэнд", "ZAR"},
            {"Вон Республики Корея", "KRW"},
            {"Японская иена", "JPY"}
        };
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class CurrencyIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public CurrencyIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Валюта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Валюта\"!\n\n" +
                                "В этом разделе можно добавить валюты, по которым будет проводиться поиск.\n\n",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["currency_intro"] = false;
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{

    public static class Elements
    {
        public static Frame LabelAndElement(string labeltext, View element)
        {
            return new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Label
                        {
                            TextColor = Styles.UserColor,
                            Text = labeltext,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            VerticalOptions = LayoutOptions.Center,
                            HorizontalTextAlignment = TextAlignment.Start
                        },
                        element
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Frame ButtonInFrame(Button b)
        {
            return new Frame
            {
                Content = b,
                BorderColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Button Button(string text, bool fill)
        {
            Button b = new Button
            {
                Text = text,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor
            };
            if (fill)
                b.HorizontalOptions = LayoutOptions.FillAndExpand;
            return b;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XBot
{
    static class Formats
    {

        public const char parse = '÷';

        public static string FromListIntoString(List<string> l)
        {
            if (l.Count == 0)
                return "";
            string line = "";
            for (int i = 0; i < l.Count; i++)
                line += l[i].Replace(parse.ToString(), parse.ToString() + parse.ToString()) + parse;
            return line.Substring(0, line.Length - 1);
        }

        public static List<string> FromStringIntoList(string line)
        {
            if (line == null || line.Length == 0)
                return new List<string>();
            string word = "";
            List<string> l = new List<string>();
            int i = 0;
            while (i < line.Length)
            {
                if (line[i] != parse)
                    word += line[i];
                else if (line[i + 1] == parse)
                    word += line[i++];
                else
                {
                    l.Add(word);
                    word = "";
                }
                i++;
            }
            l.Add(word);
            return l;
        }

        public static void Add(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Add(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

        public static void Remove(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Remove(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Hint : ContentPage
    {
        Button ok = new Button
        {
            Text = "Спасибо",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        string[] hints =
        {
            "При нажатии на кнопку 📈 я расскажу тебе о курсе валют",
            "При нажатии на кнопку 🤵 я расскажу тебе о последних новостях из твоих подписок",
            "При нажатии на кнопку 🔝 я расскажу тебе о последних новостях",
            "При нажатии на кнопку ⭐ я выведу избранные статьи",
            "В настройках можно указать количество новостей выводимых за раз",
            "В настройках можно сменить цветовую схему",
            "В настройках можно сменить контент, показываемый при запуске",
            "В настройках можно сохранить ключевые слова для поиска в разделе \"Мои подписки\"",
            "В настройках можно запретить показывать нежелательный контент в разделе \"Родительский контроль\"",
            "В настройках можно очистить диалоговое окно",
            "В настройках можно указать период времени, по которому будет проводиться поиск",
            "В настройках можно выбрать размер шрифта в чате",
            "Любимые статьи можно добавить в избранное"
        };

        public Hint()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text = hints[(new Random()).Next(hints.Length)],
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Xamarin.Forms;
using System.Drawing;



namespace XBot
{

    public partial class MainPage : ContentPage
    {
        Frame frame;
        Entry message;
        ScrollView scroll;
        StackLayout stack;
        Button settings;
        Button news;
        Button subscribes;
        Button currency;
        Button favs;

        public MainPage()
        {
            Title = "Диалог";
            NavigationPage.SetHasNavigationBar(this, false);
            message = new Entry
            {
                Placeholder = "Сообщение",
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                FontSize = 20,
                BackgroundColor = Styles.BackColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor
            };
            message.Completed += ButtonClick;
            settings = new Button
            {
                Text = "⚙️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            subscribes = new Button
            {
                Text = "🤵",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news = new Button
            {
                Text = "🔝",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            currency = new Button
            {
                Text = "📈",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            favs = new Button
            {
                Text = "⭐️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news.Clicked += NewsClick;
            settings.Clicked += SettingsClick;
            subscribes.Clicked += SubscribesClick;
            currency.Clicked += CurrencyClick;
            favs.Clicked += FavsClick;
            string line = (string)App.Current.Properties["messages"];
            if (line.Length == 0)
                frame = new Frame { HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            else
                MakeFrame();
            MakeContent();
            if ((string)App.Current.Properties["onstart"] == "news")
                NewsClick(new object(), new EventArgs());
            else if ((string)App.Current.Properties["onstart"] == "subscribes")
                SubscribesClick(new object(), new EventArgs());
            else
                CurrencyClick(new object(), new EventArgs());
        }

        private void FavsClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["save"] == "")
                Chat.Add("Список избранного пуст!", true);
            else
            {
                if ((string)App.Current.Properties["messages"] != "")
                    App.Current.Properties["messages"] += Formats.parse.ToString();
                App.Current.Properties["messages"] += $"BИзбранное:\n\n֍֍{((string)App.Current.Properties["save"]).Replace(Formats.parse.ToString(), "֍")}";
            }
            Display();
        }

        public void Active(bool act)
        {
            message.IsEnabled = act;
            settings.IsEnabled = act;
            subscribes.IsEnabled = act;  
            news.IsEnabled = act;
            currency.IsEnabled = act;
            favs.IsEnabled = act;
        }

        private void SubscribesClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["subscribes"] == "")
            {
                Chat.Add("Список подписок пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                Chat.Add("Ищу подписки...", true);
                Display();
                Bot.Search(this, Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]), true);
            }

        }

        private void SettingsClick(object sender, EventArgs e)
        {
            Navigation.PushAsync(new Settings(this));
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["currency"] == "")
            {
                Chat.Add("Список валют пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                try
                {
                    Chat.Add("Вычисляю курс валют...", true);
                    Display();
                    Bot.Currency(this);
                }
                catch { }
            }
        }

        private void NewsClick(object sender, EventArgs e)
        {
            try
            {
                Chat.Add("Ищу новости...", true);
                Display();
                Bot.GetNews(this);
            }
            catch { }
        }

        private void ButtonClick(object sender, EventArgs e)
        {
            if (message.Text == null || message.Text.Length == 0)
                return;
            else
            {
                Chat.Add(message.Text, false);
                Chat.Add($"Выполняю поиск по запросу \"{message.Text}\"...", true);
                Display();
                Bot.Search(this, message.Text.Split(' '), false);
            }
            message.Text = "";
        }

        public void Display()
        {
            MakeFrame();
            MakeContent();
        }

        public void MakeContent()
        {
            Content = new StackLayout
            {
                Children =
                {
                    frame,
                    message,
                    new StackLayout
                    {
                        Children =
                        {
                            settings,
                            subscribes,
                            news,
                            currency,
                            favs
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                }
            };
            BackgroundColor = Styles.BackColor;
            message.TextColor = Styles.UserColor;
            message.BackgroundColor = Styles.BackColor;
            settings.BackgroundColor = Styles.BackColor;
            subscribes.BackgroundColor = Styles.BackColor;
            news.BackgroundColor = Styles.BackColor;
            currency.BackgroundColor = Styles.BackColor;
            favs.BackgroundColor = Styles.BackColor;
            if (scroll != null)
                scroll.ScrollToAsync(stack, ScrollToPosition.End, false);
        }

        public void MakeFrame()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            frame = new Frame { HasShadow = false, HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            stack = new StackLayout { VerticalOptions = LayoutOptions.End };
            for (int i = 0; i < mes.Count; i++)
            {
                Frame f = new Frame { BackgroundColor = Styles.BotColor, CornerRadius = 30, HasShadow = false };
                if (mes[i][0] == 'U')
                    f = new Frame
                    {
                        Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                        BorderColor = Styles.UserColor,
                        HorizontalOptions = LayoutOptions.End,
                        BackgroundColor = Styles.UserColor,
                        CornerRadius = 30,
                        HasShadow = false
                    };
                else
                {
                    if (mes[i][1] == 'C')
                    {
                        string[] cur = mes[i].Substring(2, mes[i].Length - 3).Split('\n');
                        StackLayout sl = new StackLayout();
                        sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[0], BackgroundColor = Styles.BotColor, FontSize = Styles.Size, FontAttributes = FontAttributes.Bold });
                        for (int j = 1; j < cur.Length; j++)
                            sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[j], BackgroundColor = Styles.BotColor, FontSize = Styles.Size * 3 / 2 });
                        f.Content = sl;
                    }
                    else if (mes[i].Split('֍').Length == 1)
                    {
                        Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
                        f.Content = l;
                    }
                    else
                    {
                        string[] info = mes[i].Substring(1).Split('֍');
                        StackLayout sl = new StackLayout();
                        Dictionary<string, string> dict = new Dictionary<string, string>();
                        for (int j = 0; j < info.Length / 2; j++)
                        {
                            dict[info[2 * j]] = info[2 * j + 1];
                            Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = info[2 * j], FontSize = Styles.Size, BackgroundColor = Styles.BotColor };
                            if (j > 0)
                            {
                                var tapGestureRecognizer = new TapGestureRecognizer();
                                tapGestureRecognizer.Tapped += (s, e) =>
                                {
                                    string tmp = dict[l.Text];
                                    Navigation.PushAsync(new ShowContent(tmp, l.Text));
                                };
                                l.GestureRecognizers.Add(tapGestureRecognizer);
                            }
                            else
                                l.FontAttributes = FontAttributes.Bold;
                            sl.Children.Add(l);
                        }
                        f.Content = sl;
                    }
                    f.BorderColor = Styles.BotColor;
                    f.HorizontalOptions = LayoutOptions.Start;
                }
                f.VerticalOptions = LayoutOptions.End;
                stack.Children.Add(new Label { FontSize = Styles.Size / 2, Text = "\n" });
                stack.Children.Add(f);
            }
            scroll = new ScrollView { Content = stack };
            frame.Content = scroll;
        }

    }
}

using System;
namespace XBot
{
    public partial class Settings
    {

        void MakeDark(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            else
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            main.Display();
            MakeContent();
        }

        void TimeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["frequency_intro"])
                Navigation.PushAsync(new TimingIntro());
            else
                Navigation.PushAsync(new Timing());
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["currency_intro"])
                Navigation.PushAsync(new CurrencyIntro());
            else
                Navigation.PushAsync(new Currency());
        }

        void TypeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["type_intro"])
                Navigation.PushAsync(new TypeIntro());
            else
                Navigation.PushAsync(new Type());
        }

        void ClearClick(object sender, EventArgs e)
        {
            App.Current.Properties["messages"] = "";
            main.Display();
        }

        void SubsClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["subscribes_intro"])
                Navigation.PushAsync(new SubscribesIntro());
            else
                Navigation.PushAsync(new Subscribes());
        }

        void ControlClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["control_intro"])
                Navigation.PushAsync(new ControlIntro());
            else
                Navigation.PushAsync(new Password());
        }

        void SizeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["size_intro"])
                Navigation.PushAsync(new SizeIntro(main));
            else
                Navigation.PushAsync(new Size(main));
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Password : ContentPage
    {

        Entry pass = new Entry
        {
            Placeholder = "Пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Entry repeat = new Entry
        {
            Placeholder = "Повторите пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Button enter = new Button
        {
            Text = "Войти",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End
        };

        string t = "\nРодительский контроль\n";

        public Password()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            StackLayout sl = new StackLayout();
            sl.Children.Add
                (new Label
                {
                    Text = t,
                    HorizontalTextAlignment = TextAlignment.Center,
                    FontSize = 20,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    VerticalOptions = LayoutOptions.Start,
                    TextColor = Styles.UserColor,
                    FontAttributes = FontAttributes.Bold,
                    BackgroundColor = Styles.BackColor
                });
            if (!(bool)App.Current.Properties["blocked"])
            {
                pass.Placeholder = "Придумайте пароль";
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                sl.Children.Add
                    (new Frame
                    {
                        Content = repeat,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Register;
            }
            else
            {
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Login;
                pass.Completed += Login;
            }
            sl.Children.Add(enter);
            Content = sl;
        }

        async void Register(object sender, EventArgs e)
        {
            if (pass.Text == "" || pass.Text == null)
                await DisplayAlert("Ошибка!", "Поле пароля пустое!", "Ок");
            else if (pass.Text != repeat.Text)
                await DisplayAlert("Ошибка!", "Пароли не совпадают!", "Ок");
            else
            {
                App.Current.Properties["password"] = pass.Text;
                App.Current.Properties["blocked"] = true;
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
        }

        async void Login(object sender, EventArgs e)
        {
            if (pass.Text == (string)App.Current.Properties["password"])
            {
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
            else
                await DisplayAlert("Ошибка!", "Неверно введен пароль!", "Ок");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace XBot
{
    public partial class Settings : ContentPage
    {
        Picker OnStart = new Picker { Items = { "🔝Последние новости", "🤵Мои подписки", "📈Курс валют" }, WidthRequest = 30 };
        Switch Hints = new Switch();
        Picker amount = new Picker { Items = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }, WidthRequest = 30, TextColor = Styles.UserColor };
        MainPage main;
        string t = "\nНастройки\n";

        public Settings(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Настройки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            amount.SelectedIndex = (int)App.Current.Properties["count"] - 1;
            amount.SelectedIndexChanged += (object sender, EventArgs e) => { App.Current.Properties["count"] = amount.SelectedIndex + 1; };
            OnStart.SelectedIndex = (string)App.Current.Properties["onstart"] == "news" ? 0 : (string)App.Current.Properties["onstart"] == "subscribes" ? 1 : 2;
            Hints.IsToggled = (bool)App.Current.Properties["hint"];
            Hints.Toggled += (object sender, ToggledEventArgs e) => App.Current.Properties["hint"] = !(bool)App.Current.Properties["hint"];
            OnStart.SelectedIndexChanged += (object sender, EventArgs e) =>
            {
                if (OnStart.SelectedIndex == 0)
                    App.Current.Properties["onstart"] = "news";
                else if (OnStart.SelectedIndex == 1)
                    App.Current.Properties["onstart"] = "subscribes";
                else
                    App.Current.Properties["onstart"] = "currency";
            };
            MakeContent();
        }

        void MakeContent()
        {
            BackgroundColor = Styles.BackColor;
            Button Dark = Elements.Button("Сменить", false);
            Button Time = Elements.Button("Область поиска", true);
            Button Size = Elements.Button("Размер шрифта", true);
            Button Type = Elements.Button("Тематика новостей", true);
            Button Clear = Elements.Button("Очистить диалоговое окно", true);
            Button Subs = Elements.Button("Мои подписки", true);
            Button Control = Elements.Button("Родительский контроль", true);
            Button Support = Elements.Button("Поддержать", true);
            Button Currency = Elements.Button("Валюта", true);
            Time.Clicked += TimeClick;
            Clear.Clicked += ClearClick;
            Subs.Clicked += SubsClick;
            Control.Clicked += ControlClick;
            Size.Clicked += SizeClick;
            Type.Clicked += TypeClick;
            Currency.Clicked += CurrencyClick;
            Support.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Support());
            Dark.Clicked += MakeDark;
            amount.TextColor = Styles.UserColor;
            OnStart.BackgroundColor = Styles.BackColor;
            amount.BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                Elements.LabelAndElement("Количество новостей за раз", amount),
                                Elements.LabelAndElement("При старте показывать", OnStart),
                                Elements.LabelAndElement("Цветовая тема", Dark),
                                Elements.LabelAndElement("Показывать подсказки", Hints),
                                Elements.ButtonInFrame(Type),
                                Elements.ButtonInFrame(Time),
                                Elements.ButtonInFrame(Currency),
                                Elements.ButtonInFrame(Size),
                                Elements.ButtonInFrame(Subs),
                                Elements.ButtonInFrame(Control),
                                Elements.ButtonInFrame(Clear),
                                Elements.ButtonInFrame(Support)
                            }
                        }
                    }
                }
            };
            
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class ShowContent : ContentPage
    {

        string title;
        string url;

        Button save = new Button
        {
            Text = "☆",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand,
            FontSize = 20
        };

        Button back = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        Button internet = new Button
        {
            Text = "🌎",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        public ShowContent(string url, string title)
        {
            this.title = title;
            this.url = url;
            BackgroundColor = Styles.BackColor;
            back.Clicked += BackClick;
            internet.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("http://" + url));
            if (Device.RuntimePlatform == "iOS")
                Title = title;
            else
                NavigationPage.SetHasNavigationBar(this, false);
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (PositionInList(favs, $"{title}֍{url}") != -1)
                save = new Button
                {
                    Text = "★",
                    BackgroundColor = Styles.BackColor,
                    TextColor = Color.Yellow,
                    BorderColor = Color.Yellow,
                    VerticalOptions = LayoutOptions.End,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    FontSize = 20
                };
            save.Clicked += SaveClick;
            Content = new StackLayout { Children = { new WebView { Source = "http://" + url, VerticalOptions = LayoutOptions.FillAndExpand }, new StackLayout { Children = { back, internet, save }, Orientation = StackOrientation.Horizontal } } };
        }

        void SaveClick(object sender, EventArgs e)
        {
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (save.Text == "☆")
            {
                favs.Add($"{title}֍{url}");
                save.Text = "★";
                save.TextColor = Color.Yellow;
            }
            else
            {
                favs.Remove($"{title}֍{url}");
                save.Text = "☆";
                save.TextColor = Styles.UserColor;
            }
            App.Current.Properties["save"] = Formats.FromListIntoString(favs);
        }

        async void BackClick(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        static int PositionInList(List<string> list, string line)
        {
            for (int i = 0; i < list.Count; i++)
                if (list[i] == line)
                    return i;
            return -1;
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Size : ContentPage
    {

        MainPage main;
        string t = "\nРазмер шрифта\n";
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Button ok = new Button
        {
            Text = "Применить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        int size = Styles.Size;
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        public Size(MainPage m)
        {
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            main = m;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += Ok_Clicked;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    ok
                }
            };
        }

        async void Ok_Clicked(object sender, EventArgs e)
        {
            App.Current.Properties["size"] = size;
            main.Display();
            await Navigation.PopAsync();
        }


        void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)(e.NewValue + 8);
            my.FontSize = size;
            bot.FontSize = size;
        }


        

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SizeIntro : ContentPage
    {
        MainPage main;
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SizeIntro(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Размер шрифта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Размер шрифта\"!\n\n" +
                                "В этом разделе можно выбрать размер шрифта сообщений в чате.\n\n" +
                                "Обратите внимание, что размер шрифта в первую очередь зависит от разрешения экрана.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["size_intro"] = false;
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{
    static class Styles
    {

        public static Xamarin.Forms.Color BackColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["back"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color UserColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["user"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color BotColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["bot"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static int Size
        {
            get => (int)App.Current.Properties["size"];
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Subscribes : ContentPage
    {

        Entry entry = new Entry();

        string t = "\nМои подписки\n";

        public Subscribes()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SubscribesIntro : ContentPage
    {

        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SubscribesIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Мои подписки";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Мои подписки\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет автоматически проводиться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["subscribes_intro"] = false;
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Support : ContentPage
    {
        Button ok = new Button
        {
            Text = "Поддержать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public Support()
        {
            ok.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("https://money.yandex.ru/to/410014676758208"));
            if (Device.RuntimePlatform == "iOS")
                Title = "Поддержать";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Большое спасибо за скачивание и использование моего приложения!\n\n" +
                                "Я верю в то, что оно тебе нравится, и ты поставил ему оценку в магазине приложений.\n\n" +
                                "Если хочешь поддержать меня материально, а также сделать вклад в будущие проекты, нажми на кнопку ниже😉",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    Elements.ButtonInFrame(ok)
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Timing : ContentPage
    {

        string t = "\nОбласть поиска\n";
        public Timing()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class TimingIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TimingIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Область поиска";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Область поиска\"!\n\n" +
                                "В этом разделе можно выбрать промежуток времени, в который будет проводиться поиск.\n\n" +
                                "Обратите внимание, что при выборе большого промежутка, новости могут быть устаревшими.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["frequency_intro"] = false;
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Type : ContentPage
    {
        string t = "\nТематика новостей\n";
        public Type()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class TypeIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TypeIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Тематика новостей";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Тематика новостей\"!\n\n" +
                                "В этом разделе можно выбрать тематику, по которой будет проводиться поиск.\n\n",                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["type_intro"] = false;
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Welcome : ContentPage
    {
        Button ok = new Button
        {
            Text = "Настроить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Button ignore = new Button
        {
            Text = "Пропустить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Welcome()
        {
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Привет, я XBot! Я буду присылать тебе новости, но на этом мои функции не ограничиваются!\n\n" +
                                "Еще я умею обрабатывать запросы, сохранять их, вычислять курс валют, а также ограничивать доступ к ненужному контенту.\n\n" +
                                "Я использую открытое API Mediametrics и центрального банка России, за что им огромное спасибо!\n\n" +
                                "Я являюсь некоммерческим проектом и создан в образовательных целях. Если у тебя возникли замечания или предложения, напиши моему создателю: emmtvv@icloud.com.\n\n" +
                                "Нажми на кнопку \"Настроить\", чтобы я работал максимально комфортно для тебя!\n\n" +
                                "Приятного пользования!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new XBot.SettingsOnStart.Intro1());
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro1 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help;
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro1()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Цветовая тема";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            MakeContent();
            dark.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
                MakeContent();
            };
            light.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
                MakeContent();
            };
        }

        string t = "\nЦветовая тема\n";
        Button dark = new Button { Text="     ", BackgroundColor = Color.FromRgb(30, 30, 30), BorderColor = Color.FromRgb(255,255,255), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };
        Button light = new Button { Text = "     ", BackgroundColor = Color.FromRgb(255, 255, 255), BorderColor = Color.FromRgb(30, 30, 30), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };

        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери цветовую тему приложения", "Хорошо!");
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            help = new Button
            {
                Text = "?",
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro2());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new Frame
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                                    BorderColor = Styles.UserColor,
                                    HorizontalOptions = LayoutOptions.End,
                                    BackgroundColor = Styles.UserColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                },
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size },
                                    BorderColor = Styles.BotColor,
                                    HorizontalOptions = LayoutOptions.Start,
                                    BackgroundColor = Styles.BotColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                }
                            }
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        HasShadow = false,
                        BackgroundColor = Styles.BackColor
                    },
                    new StackLayout
                    {
                        Children =
                        {
                            light,
                            dark
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro2 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери тематику, по которой будет проводиться поиск", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nТематика новостей\n";
        public Intro2()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro3());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro3 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери временной интервал поиска новостей", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nОбласть поиска\n";
        public Intro3()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro4());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro4 : ContentPage
    {
        string t = "\nРазмер шрифта\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        int size = (int)App.Current.Properties["size"];
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери размер шрифта в диалоге", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro4()
        {
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["size"] = size;
                Navigation.PushAsync(new Intro5());
            };

            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    new StackLayout
                    {
                        Children = { ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        private void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)e.NewValue + 8;
            my.FontSize = size;
            bot.FontSize = size;
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro5 : ContentPage
    {
        Picker entry = new Picker();
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери валюту, курс которой ты хотел бы получать", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nВалюта\n";

        public Intro5()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro6());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in Currency.CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }

                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro6 : ContentPage
    {
        Entry entry = new Entry();

        string t = "\nМои подписки\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери ключевые слова, по которым ты хотел бы получать нвоости", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro6()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro7());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
            Display();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        async void Display()
        {
            await DisplayAlert("Важная информация!", "Выбери ключевые слова, по которым будет производиться поиск", "Понятно!");
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro7 : ContentPage
    {
        Button ok = new Button
        {
            Text = "Начать!",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Intro7()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Моя настройка закончена и я готов к работе!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            for (int i = 0; i < 8; i++)
                Navigation.RemovePage(Navigation.NavigationStack[0]);

        }

    }
}

using System;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using System.Drawing;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.IO;

[assembly: XamlCompilation(XamlCompilationOptions.Compile)]
namespace XBot
{
    public partial class App : Application
    {
    
        public App()
        {
            object obj;
            if (!App.Current.Properties.TryGetValue("messages", out obj))
                App.Current.Properties["messages"] = "";
            if (!App.Current.Properties.TryGetValue("subscribes", out obj))
                App.Current.Properties["subscribes"] = "";
            if (!App.Current.Properties.TryGetValue("count", out obj))
                App.Current.Properties["count"] = 5;
            if (!App.Current.Properties.TryGetValue("onstart", out obj))
                App.Current.Properties["onstart"] = "news";
            if (!App.Current.Properties.TryGetValue("back", out obj))
                App.Current.Properties["back"] = "255 255 255";
            if (!App.Current.Properties.TryGetValue("user", out obj))
                App.Current.Properties["user"] = "0 0 255";
            if (!App.Current.Properties.TryGetValue("bot", out obj))
                App.Current.Properties["bot"] = "128 0 128";
            if (!App.Current.Properties.TryGetValue("control", out obj))
                App.Current.Properties["control"] = "";
            if (!App.Current.Properties.TryGetValue("blocked", out obj))
                App.Current.Properties["blocked"] = false;
            if (!App.Current.Properties.TryGetValue("welcome", out obj))
                App.Current.Properties["welcome"] = true;
            if (!App.Current.Properties.TryGetValue("subscribes_intro", out obj))
                App.Current.Properties["subscribes_intro"] = true;
            if (!App.Current.Properties.TryGetValue("control_intro", out obj))
                App.Current.Properties["control_intro"] = true;
            if (!App.Current.Properties.TryGetValue("hint", out obj))
                App.Current.Properties["hint"] = true;
            if (!App.Current.Properties.TryGetValue("frequency", out obj))
                App.Current.Properties["frequency"] = "online";
            if (!App.Current.Properties.TryGetValue("frequency_intro", out obj))
                App.Current.Properties["frequency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("size", out obj))
                App.Current.Properties["size"] = 14;
            if (!App.Current.Properties.TryGetValue("size_intro", out obj))
                App.Current.Properties["size_intro"] = true;
            if (!App.Current.Properties.TryGetValue("type", out obj))
                App.Current.Properties["type"] = "";
            if (!App.Current.Properties.TryGetValue("type_intro", out obj))
                App.Current.Properties["type_intro"] = true;
            if (!App.Current.Properties.TryGetValue("currency", out obj))
                App.Current.Properties["currency"] = "";
            if (!App.Current.Properties.TryGetValue("currency_intro", out obj))
                App.Current.Properties["currency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("save", out obj))
                App.Current.Properties["save"] = "";
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            else
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            MainPage = (bool)App.Current.Properties["welcome"] ? new NavigationPage(new Welcome()) : (bool)App.Current.Properties["hint"] ? new NavigationPage(new Hint()) : new NavigationPage(new MainPage());
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Http;
using System.Threading.Tasks;
using System.Threading;

namespace XBot
{
    static class Bot
    {
     
        public static readonly HttpClient client = new HttpClient();

        async public static void GetNews(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mess = "";
            int count = 0;
            try
            {
                line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=1&update=1401216280");
                string[] elems = line.Split('\n');
                for (int i = 1; count < (int)App.Current.Properties["count"] && i < elems.Length; i++)
                {
                    string[] first = elems[i].Split('\t');
                    string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                    string[] elems1 = info.Split('\t');
                    if (!Denied(elems1[1]))
                    {
                        mess += $"{elems1[1]}\n֍{elems1[0]}֍";
                        count++;
                    }
                }
            }
            catch (IndexOutOfRangeException) { }
            catch (Exception ex) 
            { 
                string a = ex.ToString();
                line = "";
            }
            mess += '\b';
            Chat.Remove();
            mess = $"Топ-{count} новостей на {Now} за {Period}\n\n֍֍" + mess;
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0 || count == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(mess.Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Search(MainPage m, IEnumerable<string> requests, bool type)
        {
            m.Active(false);
            int count = 1;
            int amount = 0;
            string mess = "";
            string line = "";
            try
            {
                while (count != 4 && amount < (int)App.Current.Properties["count"])
                {
                    line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=" + count.ToString() + "&update=1401216280");
                    string[] elems = line.Split('\n');
                    for (int i = 1; i < elems.Length; i++)
                    {
                        string[] first = elems[i].Split('\t');
                        string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                        string[] elems1 = info.Split('\t');
                        foreach (string str in requests)
                        {
                            if (IsSubString(elems1[1].ToLower(), str.ToLower()) && !Denied(elems1[1]))
                            {
                                mess += elems1[1] + "\n֍" + elems1[0] + "֍";
                                amount++;
                            }
                            if (amount == (int)App.Current.Properties["count"])
                                goto go;
                        }
                        count++;
                    }
                }
            }
            catch { }
            go:
            Chat.Remove();
            string name = "";
            if (type)
                name = "подписок";
            else
                name = $"новостей по запросу \"{FromIEnumerable(requests)}\"";
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(($"Топ-{amount} {name} на {Now} за {Period}\n\n֍֍" + mess + "\b\b\b").Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Currency(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mes = $"CКурс валют на {Now}\n";
            List<string> cur = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            try
            {
                byte[] s = await client.GetByteArrayAsync("https://www.cbr-xml-daily.ru/daily_json.js");
                line = Encoding.UTF8.GetString(s, 0, s.Length);
                string[] vl = line.Split('\n');
                for (int i = cur.Count - 1; i >= 0; i--)
                {
                    int num = XBot.Currency.CurrencyNum[cur[i]];
                    string[] ss = vl[num].Split(':')[1].Split(' ')[1].Split(',')[0].Split('.');
                    string p = vl[num - 2].Split(':')[1].Split(' ')[1].Split(',')[0];
                    double val = double.Parse(ss[0]) + double.Parse(ss[1]) / 10000; 
                    int a = int.Parse(p);
                    val = val / a + 0.005;
                    mes += $"{XBot.Currency.CurrencyId[cur[i]]}: {val:f2}\n";
                }
            }
            catch(Exception ex) { string a = ex.ToString(); }
            Chat.Remove();
            if (line == "")
                Chat.Add("Отсутствует подключение к интернету", true);
            else
                Chat.Add(mes, true);
            m.Display();
            m.Active(true);
        }


        static string FromIEnumerable(IEnumerable<string> arr)
        {
            string line = "";
            foreach (string s in arr)
                line += s + " ";
            return line.Substring(0, line.Length - 1);
        }

        static bool IsSubString(string name, string str)
        {
            if (str.Length > 5)
                str = str.Substring(0, str.Length - 2);
            return name.Contains(str);
        }

        static bool Denied(string news)
        {
            if (!(bool)App.Current.Properties["blocked"])
                return false;
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            foreach (string str in subs)
                if (news.ToLower().Contains(str.ToLower()))
                    return true;
            return false;
        }

        static string Period
        {
            get 
            {
                switch ((string)App.Current.Properties["frequency"])
                {
                    case "online":
                        return "последние 10 минут";
                    case "hour":
                        return "последний час";
                    case "day":
                        return "последние сутки";
                    case "week":
                        return "последнюю неделю";
                    default:
                        return "последний месяц";
                }
            }
        }

        static string Now
        {
            get {
                string datetime = DateTime.Now.ToString();
                string line = "";
                if (datetime[0] == '0')
                    datetime = datetime.Substring(1);
                string[] d1 = datetime.Split(' ');
                string[] date;
                if (!DateTime.Now.ToString().Contains("/"))
                {
                    date = d1[0].Split('.');
                    line += $"{date[0]} {Month(date[1])} ";
                }
                else
                {
                    date = d1[0].Split('/');
                    line += $"{date[1]} {Month(date[0])} ";
                }
                string[] time = d1[1].Split(':');
                line += time[0] + ":" + time[1];
                return line;
            }
        }

        static string Month(string num)
        {
            if (num[0] == '0')
                num = num.Substring(1);
            switch (int.Parse(num))
            {
                case 1:
                    return "января";
                case 2:
                    return "февраля";
                case 3:
                    return "марта";
                case 4:
                    return "апреля";
                case 5:
                    return "мая";
                case 6:
                    return "июня";
                case 7:
                    return "июля";
                case 8:
                    return "августа";
                case 9:
                    return "сентбря";
                case 10:
                    return "октября";
                case 11:
                    return "ноября";
                default:
                    return "декабря";
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace XBot
{
    static class Chat
    {
        public static void Add(string message, bool sender)
        {
            string mess = "";
            if (sender)
                mess += "B";
            else
                mess += "U";
            mess += message;
            Formats.Add(mess, "messages");
        }

        public static void Remove()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            mes.RemoveAt(mes.Count - 1);
            App.Current.Properties["messages"] = Formats.FromListIntoString(mes);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public partial class MainPage : ContentPage
    {
        async void Command()
        {
            Chat.Add(message.Text, false);
            switch (message.Text.Split(' ')[0])
            {
                case "/light":
                    App.Current.Properties["back"] = "255 255 255";
                    App.Current.Properties["user"] = "0 0 255";
                    App.Current.Properties["bot"] = "128 0 128";
                    Chat.Add("Тема сменена на светлую", true);
                    break;
                case "/dark":
                    App.Current.Properties["back"] = "30 30 30";
                    App.Current.Properties["user"] = "86 156 214";
                    App.Current.Properties["bot"] = "80 80 80";
                    Chat.Add("Тема сменена на темную", true);
                    break;
                case "/news":
                    NewsClick(new object(), new EventArgs());
                    break;
                default:
                    Chat.Add("Неизвестная команда!", true);
                    break;

            }
            Display();
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Control : ContentPage
    {

        Entry entry = new Entry();
        string t = "\nРодительский контроль\n";

        public Control()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительный запрет",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Button exit = new Button
            {
                Text = "Отключить контоль",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            exit.Clicked += Deny;
            Button apply = new Button
            {
                Text = "Применить",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            apply.Clicked += Apply;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    exit,
                    apply
                }
            };
        }

        async void Apply(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        async void Deny(object sender, EventArgs e)
        {
            App.Current.Properties["blocked"] = false;
            App.Current.Properties["control"] = "";
            await Navigation.PopAsync();
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class ControlIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public ControlIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Родительский контроль";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Родительский контроль\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет игнорироваться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["control_intro"] = false;
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class Currency : ContentPage
    {
        Picker entry = new Picker();

        string t = "\nВалюта\n";

        public Currency()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };             
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        public static Dictionary<string, int> CurrencyNum = new Dictionary<string, int>
        {
            {"Австралийский доллар", 12},
            {"Азербайджанский манат", 21},
            {"Фунт стерлингов Соединенного королевства", 30},
            {"Армянский драм", 39},
            {"Белорусский рубль", 48},
            {"Болгарский лев", 57},
            {"Бразильский реал", 66},
            {"Венгерский форинт", 75},
            {"Гонконгский доллар", 84},
            {"Датская крона", 93},
            {"Доллар США", 102},
            {"Евро", 111},
            {"Индийская рупия", 120},
            {"Казахстанский тенге", 129},
            {"Канадский доллар", 138},
            {"Киргизский сом", 147},
            {"Китайский юань", 156},
            {"Молдавский лей", 165},
            {"Норвежская крона", 174},
            {"Польский злотый", 183},
            {"Румынский лей", 192},
            {"Сингапурский доллар", 210},
            {"Таджикский сомони", 219},
            {"Турецкая лира", 228},
            {"Новый туркменский манат", 237},
            {"Узбекский сум", 246},
            {"Украинская гривна", 255},
            {"Чешская крона", 264},
            {"Шведская крона", 273},
            {"Швейцарский франк", 282},
            {"Южноафриканский рэнд", 291},
            {"Вон Республики Корея", 300},
            {"Японская иена", 309}
        };

        public static Dictionary<string, string> CurrencyId = new Dictionary<string, string>
        {
            {"Австралийский доллар", "AUD"},
            {"Азербайджанский манат", "AZN"},
            {"Фунт стерлингов Соединенного королевства", "GBP"},
            {"Армянский драм", "AMD"},
            {"Белорусский рубль", "BYN"},
            {"Болгарский лев", "BGN"},
            {"Бразильский реал", "BRL"},
            {"Венгерский форинт", "HUF"},
            {"Гонконгский доллар", "HKD"},
            {"Датская крона", "DKK"},
            {"Доллар США", "USD"},
            {"Евро", "EUR"},
            {"Индийская рупия", "INR"},
            {"Казахстанский тенге", "KZT"},
            {"Канадский доллар", "CAD"},
            {"Киргизский сом", "KGS"},
            {"Китайский юань", "CNY"},
            {"Молдавский лей", "MDL"},
            {"Норвежская крона", "NOK"},
            {"Польский злотый", "PLN"},
            {"Румынский лей", "RON"},
            {"Сингапурский доллар", "SGD"},
            {"Таджикский сомони", "TJS"},
            {"Турецкая лира", "TRY"},
            {"Новый туркменский манат", "TMT"},
            {"Узбекский сум", "UZS"},
            {"Украинская гривна", "UAH"},
            {"Чешская крона", "CZK"},
            {"Шведская крона", "SEK"},
            {"Швейцарский франк", "CHF"},
            {"Южноафриканский рэнд", "ZAR"},
            {"Вон Республики Корея", "KRW"},
            {"Японская иена", "JPY"}
        };
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class CurrencyIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public CurrencyIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Валюта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Валюта\"!\n\n" +
                                "В этом разделе можно добавить валюты, по которым будет проводиться поиск.\n\n",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["currency_intro"] = false;
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{

    public static class Elements
    {
        public static Frame LabelAndElement(string labeltext, View element)
        {
            return new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Label
                        {
                            TextColor = Styles.UserColor,
                            Text = labeltext,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            VerticalOptions = LayoutOptions.Center,
                            HorizontalTextAlignment = TextAlignment.Start
                        },
                        element
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Frame ButtonInFrame(Button b)
        {
            return new Frame
            {
                Content = b,
                BorderColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Button Button(string text, bool fill)
        {
            Button b = new Button
            {
                Text = text,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor
            };
            if (fill)
                b.HorizontalOptions = LayoutOptions.FillAndExpand;
            return b;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XBot
{
    static class Formats
    {

        public const char parse = '÷';

        public static string FromListIntoString(List<string> l)
        {
            if (l.Count == 0)
                return "";
            string line = "";
            for (int i = 0; i < l.Count; i++)
                line += l[i].Replace(parse.ToString(), parse.ToString() + parse.ToString()) + parse;
            return line.Substring(0, line.Length - 1);
        }

        public static List<string> FromStringIntoList(string line)
        {
            if (line == null || line.Length == 0)
                return new List<string>();
            string word = "";
            List<string> l = new List<string>();
            int i = 0;
            while (i < line.Length)
            {
                if (line[i] != parse)
                    word += line[i];
                else if (line[i + 1] == parse)
                    word += line[i++];
                else
                {
                    l.Add(word);
                    word = "";
                }
                i++;
            }
            l.Add(word);
            return l;
        }

        public static void Add(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Add(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

        public static void Remove(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Remove(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Hint : ContentPage
    {
        Button ok = new Button
        {
            Text = "Спасибо",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        string[] hints =
        {
            "При нажатии на кнопку 📈 я расскажу тебе о курсе валют",
            "При нажатии на кнопку 🤵 я расскажу тебе о последних новостях из твоих подписок",
            "При нажатии на кнопку 🔝 я расскажу тебе о последних новостях",
            "При нажатии на кнопку ⭐ я выведу избранные статьи",
            "В настройках можно указать количество новостей выводимых за раз",
            "В настройках можно сменить цветовую схему",
            "В настройках можно сменить контент, показываемый при запуске",
            "В настройках можно сохранить ключевые слова для поиска в разделе \"Мои подписки\"",
            "В настройках можно запретить показывать нежелательный контент в разделе \"Родительский контроль\"",
            "В настройках можно очистить диалоговое окно",
            "В настройках можно указать период времени, по которому будет проводиться поиск",
            "В настройках можно выбрать размер шрифта в чате",
            "Любимые статьи можно добавить в избранное"
        };

        public Hint()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text = hints[(new Random()).Next(hints.Length)],
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Xamarin.Forms;
using System.Drawing;



namespace XBot
{

    public partial class MainPage : ContentPage
    {
        Frame frame;
        Entry message;
        ScrollView scroll;
        StackLayout stack;
        Button settings;
        Button news;
        Button subscribes;
        Button currency;
        Button favs;

        public MainPage()
        {
            Title = "Диалог";
            NavigationPage.SetHasNavigationBar(this, false);
            message = new Entry
            {
                Placeholder = "Сообщение",
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                FontSize = 20,
                BackgroundColor = Styles.BackColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor
            };
            message.Completed += ButtonClick;
            settings = new Button
            {
                Text = "⚙️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            subscribes = new Button
            {
                Text = "🤵",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news = new Button
            {
                Text = "🔝",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            currency = new Button
            {
                Text = "📈",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            favs = new Button
            {
                Text = "⭐️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news.Clicked += NewsClick;
            settings.Clicked += SettingsClick;
            subscribes.Clicked += SubscribesClick;
            currency.Clicked += CurrencyClick;
            favs.Clicked += FavsClick;
            string line = (string)App.Current.Properties["messages"];
            if (line.Length == 0)
                frame = new Frame { HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            else
                MakeFrame();
            MakeContent();
            if ((string)App.Current.Properties["onstart"] == "news")
                NewsClick(new object(), new EventArgs());
            else if ((string)App.Current.Properties["onstart"] == "subscribes")
                SubscribesClick(new object(), new EventArgs());
            else
                CurrencyClick(new object(), new EventArgs());
        }

        private void FavsClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["save"] == "")
                Chat.Add("Список избранного пуст!", true);
            else
            {
                if ((string)App.Current.Properties["messages"] != "")
                    App.Current.Properties["messages"] += Formats.parse.ToString();
                App.Current.Properties["messages"] += $"BИзбранное:\n\n֍֍{((string)App.Current.Properties["save"]).Replace(Formats.parse.ToString(), "֍")}";
            }
            Display();
        }

        public void Active(bool act)
        {
            message.IsEnabled = act;
            settings.IsEnabled = act;
            subscribes.IsEnabled = act;  
            news.IsEnabled = act;
            currency.IsEnabled = act;
            favs.IsEnabled = act;
        }

        private void SubscribesClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["subscribes"] == "")
            {
                Chat.Add("Список подписок пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                Chat.Add("Ищу подписки...", true);
                Display();
                Bot.Search(this, Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]), true);
            }

        }

        private void SettingsClick(object sender, EventArgs e)
        {
            Navigation.PushAsync(new Settings(this));
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["currency"] == "")
            {
                Chat.Add("Список валют пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                try
                {
                    Chat.Add("Вычисляю курс валют...", true);
                    Display();
                    Bot.Currency(this);
                }
                catch { }
            }
        }

        private void NewsClick(object sender, EventArgs e)
        {
            try
            {
                Chat.Add("Ищу новости...", true);
                Display();
                Bot.GetNews(this);
            }
            catch { }
        }

        private void ButtonClick(object sender, EventArgs e)
        {
            if (message.Text == null || message.Text.Length == 0)
                return;
            else
            {
                Chat.Add(message.Text, false);
                Chat.Add($"Выполняю поиск по запросу \"{message.Text}\"...", true);
                Display();
                Bot.Search(this, message.Text.Split(' '), false);
            }
            message.Text = "";
        }

        public void Display()
        {
            MakeFrame();
            MakeContent();
        }

        public void MakeContent()
        {
            Content = new StackLayout
            {
                Children =
                {
                    frame,
                    message,
                    new StackLayout
                    {
                        Children =
                        {
                            settings,
                            subscribes,
                            news,
                            currency,
                            favs
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                }
            };
            BackgroundColor = Styles.BackColor;
            message.TextColor = Styles.UserColor;
            message.BackgroundColor = Styles.BackColor;
            settings.BackgroundColor = Styles.BackColor;
            subscribes.BackgroundColor = Styles.BackColor;
            news.BackgroundColor = Styles.BackColor;
            currency.BackgroundColor = Styles.BackColor;
            favs.BackgroundColor = Styles.BackColor;
            if (scroll != null)
                scroll.ScrollToAsync(stack, ScrollToPosition.End, false);
        }

        public void MakeFrame()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            frame = new Frame { HasShadow = false, HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            stack = new StackLayout { VerticalOptions = LayoutOptions.End };
            for (int i = 0; i < mes.Count; i++)
            {
                Frame f = new Frame { BackgroundColor = Styles.BotColor, CornerRadius = 30, HasShadow = false };
                if (mes[i][0] == 'U')
                    f = new Frame
                    {
                        Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                        BorderColor = Styles.UserColor,
                        HorizontalOptions = LayoutOptions.End,
                        BackgroundColor = Styles.UserColor,
                        CornerRadius = 30,
                        HasShadow = false
                    };
                else
                {
                    if (mes[i][1] == 'C')
                    {
                        string[] cur = mes[i].Substring(2, mes[i].Length - 3).Split('\n');
                        StackLayout sl = new StackLayout();
                        sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[0], BackgroundColor = Styles.BotColor, FontSize = Styles.Size, FontAttributes = FontAttributes.Bold });
                        for (int j = 1; j < cur.Length; j++)
                            sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[j], BackgroundColor = Styles.BotColor, FontSize = Styles.Size * 3 / 2 });
                        f.Content = sl;
                    }
                    else if (mes[i].Split('֍').Length == 1)
                    {
                        Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
                        f.Content = l;
                    }
                    else
                    {
                        string[] info = mes[i].Substring(1).Split('֍');
                        StackLayout sl = new StackLayout();
                        Dictionary<string, string> dict = new Dictionary<string, string>();
                        for (int j = 0; j < info.Length / 2; j++)
                        {
                            dict[info[2 * j]] = info[2 * j + 1];
                            Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = info[2 * j], FontSize = Styles.Size, BackgroundColor = Styles.BotColor };
                            if (j > 0)
                            {
                                var tapGestureRecognizer = new TapGestureRecognizer();
                                tapGestureRecognizer.Tapped += (s, e) =>
                                {
                                    string tmp = dict[l.Text];
                                    Navigation.PushAsync(new ShowContent(tmp, l.Text));
                                };
                                l.GestureRecognizers.Add(tapGestureRecognizer);
                            }
                            else
                                l.FontAttributes = FontAttributes.Bold;
                            sl.Children.Add(l);
                        }
                        f.Content = sl;
                    }
                    f.BorderColor = Styles.BotColor;
                    f.HorizontalOptions = LayoutOptions.Start;
                }
                f.VerticalOptions = LayoutOptions.End;
                stack.Children.Add(new Label { FontSize = Styles.Size / 2, Text = "\n" });
                stack.Children.Add(f);
            }
            scroll = new ScrollView { Content = stack };
            frame.Content = scroll;
        }

    }
}

using System;
namespace XBot
{
    public partial class Settings
    {

        void MakeDark(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            else
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            main.Display();
            MakeContent();
        }

        void TimeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["frequency_intro"])
                Navigation.PushAsync(new TimingIntro());
            else
                Navigation.PushAsync(new Timing());
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["currency_intro"])
                Navigation.PushAsync(new CurrencyIntro());
            else
                Navigation.PushAsync(new Currency());
        }

        void TypeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["type_intro"])
                Navigation.PushAsync(new TypeIntro());
            else
                Navigation.PushAsync(new Type());
        }

        void ClearClick(object sender, EventArgs e)
        {
            App.Current.Properties["messages"] = "";
            main.Display();
        }

        void SubsClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["subscribes_intro"])
                Navigation.PushAsync(new SubscribesIntro());
            else
                Navigation.PushAsync(new Subscribes());
        }

        void ControlClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["control_intro"])
                Navigation.PushAsync(new ControlIntro());
            else
                Navigation.PushAsync(new Password());
        }

        void SizeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["size_intro"])
                Navigation.PushAsync(new SizeIntro(main));
            else
                Navigation.PushAsync(new Size(main));
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Password : ContentPage
    {

        Entry pass = new Entry
        {
            Placeholder = "Пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Entry repeat = new Entry
        {
            Placeholder = "Повторите пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Button enter = new Button
        {
            Text = "Войти",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End
        };

        string t = "\nРодительский контроль\n";

        public Password()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            StackLayout sl = new StackLayout();
            sl.Children.Add
                (new Label
                {
                    Text = t,
                    HorizontalTextAlignment = TextAlignment.Center,
                    FontSize = 20,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    VerticalOptions = LayoutOptions.Start,
                    TextColor = Styles.UserColor,
                    FontAttributes = FontAttributes.Bold,
                    BackgroundColor = Styles.BackColor
                });
            if (!(bool)App.Current.Properties["blocked"])
            {
                pass.Placeholder = "Придумайте пароль";
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                sl.Children.Add
                    (new Frame
                    {
                        Content = repeat,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Register;
            }
            else
            {
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Login;
                pass.Completed += Login;
            }
            sl.Children.Add(enter);
            Content = sl;
        }

        async void Register(object sender, EventArgs e)
        {
            if (pass.Text == "" || pass.Text == null)
                await DisplayAlert("Ошибка!", "Поле пароля пустое!", "Ок");
            else if (pass.Text != repeat.Text)
                await DisplayAlert("Ошибка!", "Пароли не совпадают!", "Ок");
            else
            {
                App.Current.Properties["password"] = pass.Text;
                App.Current.Properties["blocked"] = true;
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
        }

        async void Login(object sender, EventArgs e)
        {
            if (pass.Text == (string)App.Current.Properties["password"])
            {
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
            else
                await DisplayAlert("Ошибка!", "Неверно введен пароль!", "Ок");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace XBot
{
    public partial class Settings : ContentPage
    {
        Picker OnStart = new Picker { Items = { "🔝Последние новости", "🤵Мои подписки", "📈Курс валют" }, WidthRequest = 30 };
        Switch Hints = new Switch();
        Picker amount = new Picker { Items = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }, WidthRequest = 30, TextColor = Styles.UserColor };
        MainPage main;
        string t = "\nНастройки\n";

        public Settings(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Настройки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            amount.SelectedIndex = (int)App.Current.Properties["count"] - 1;
            amount.SelectedIndexChanged += (object sender, EventArgs e) => { App.Current.Properties["count"] = amount.SelectedIndex + 1; };
            OnStart.SelectedIndex = (string)App.Current.Properties["onstart"] == "news" ? 0 : (string)App.Current.Properties["onstart"] == "subscribes" ? 1 : 2;
            Hints.IsToggled = (bool)App.Current.Properties["hint"];
            Hints.Toggled += (object sender, ToggledEventArgs e) => App.Current.Properties["hint"] = !(bool)App.Current.Properties["hint"];
            OnStart.SelectedIndexChanged += (object sender, EventArgs e) =>
            {
                if (OnStart.SelectedIndex == 0)
                    App.Current.Properties["onstart"] = "news";
                else if (OnStart.SelectedIndex == 1)
                    App.Current.Properties["onstart"] = "subscribes";
                else
                    App.Current.Properties["onstart"] = "currency";
            };
            MakeContent();
        }

        void MakeContent()
        {
            BackgroundColor = Styles.BackColor;
            Button Dark = Elements.Button("Сменить", false);
            Button Time = Elements.Button("Область поиска", true);
            Button Size = Elements.Button("Размер шрифта", true);
            Button Type = Elements.Button("Тематика новостей", true);
            Button Clear = Elements.Button("Очистить диалоговое окно", true);
            Button Subs = Elements.Button("Мои подписки", true);
            Button Control = Elements.Button("Родительский контроль", true);
            Button Support = Elements.Button("Поддержать", true);
            Button Currency = Elements.Button("Валюта", true);
            Time.Clicked += TimeClick;
            Clear.Clicked += ClearClick;
            Subs.Clicked += SubsClick;
            Control.Clicked += ControlClick;
            Size.Clicked += SizeClick;
            Type.Clicked += TypeClick;
            Currency.Clicked += CurrencyClick;
            Support.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Support());
            Dark.Clicked += MakeDark;
            amount.TextColor = Styles.UserColor;
            OnStart.BackgroundColor = Styles.BackColor;
            amount.BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                Elements.LabelAndElement("Количество новостей за раз", amount),
                                Elements.LabelAndElement("При старте показывать", OnStart),
                                Elements.LabelAndElement("Цветовая тема", Dark),
                                Elements.LabelAndElement("Показывать подсказки", Hints),
                                Elements.ButtonInFrame(Type),
                                Elements.ButtonInFrame(Time),
                                Elements.ButtonInFrame(Currency),
                                Elements.ButtonInFrame(Size),
                                Elements.ButtonInFrame(Subs),
                                Elements.ButtonInFrame(Control),
                                Elements.ButtonInFrame(Clear),
                                Elements.ButtonInFrame(Support)
                            }
                        }
                    }
                }
            };
            
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class ShowContent : ContentPage
    {

        string title;
        string url;

        Button save = new Button
        {
            Text = "☆",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand,
            FontSize = 20
        };

        Button back = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        Button internet = new Button
        {
            Text = "🌎",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        public ShowContent(string url, string title)
        {
            this.title = title;
            this.url = url;
            BackgroundColor = Styles.BackColor;
            back.Clicked += BackClick;
            internet.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("http://" + url));
            if (Device.RuntimePlatform == "iOS")
                Title = title;
            else
                NavigationPage.SetHasNavigationBar(this, false);
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (PositionInList(favs, $"{title}֍{url}") != -1)
                save = new Button
                {
                    Text = "★",
                    BackgroundColor = Styles.BackColor,
                    TextColor = Color.Yellow,
                    BorderColor = Color.Yellow,
                    VerticalOptions = LayoutOptions.End,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    FontSize = 20
                };
            save.Clicked += SaveClick;
            Content = new StackLayout { Children = { new WebView { Source = "http://" + url, VerticalOptions = LayoutOptions.FillAndExpand }, new StackLayout { Children = { back, internet, save }, Orientation = StackOrientation.Horizontal } } };
        }

        void SaveClick(object sender, EventArgs e)
        {
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (save.Text == "☆")
            {
                favs.Add($"{title}֍{url}");
                save.Text = "★";
                save.TextColor = Color.Yellow;
            }
            else
            {
                favs.Remove($"{title}֍{url}");
                save.Text = "☆";
                save.TextColor = Styles.UserColor;
            }
            App.Current.Properties["save"] = Formats.FromListIntoString(favs);
        }

        async void BackClick(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        static int PositionInList(List<string> list, string line)
        {
            for (int i = 0; i < list.Count; i++)
                if (list[i] == line)
                    return i;
            return -1;
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Size : ContentPage
    {

        MainPage main;
        string t = "\nРазмер шрифта\n";
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Button ok = new Button
        {
            Text = "Применить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        int size = Styles.Size;
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        public Size(MainPage m)
        {
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            main = m;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += Ok_Clicked;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    ok
                }
            };
        }

        async void Ok_Clicked(object sender, EventArgs e)
        {
            App.Current.Properties["size"] = size;
            main.Display();
            await Navigation.PopAsync();
        }


        void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)(e.NewValue + 8);
            my.FontSize = size;
            bot.FontSize = size;
        }


        

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SizeIntro : ContentPage
    {
        MainPage main;
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SizeIntro(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Размер шрифта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Размер шрифта\"!\n\n" +
                                "В этом разделе можно выбрать размер шрифта сообщений в чате.\n\n" +
                                "Обратите внимание, что размер шрифта в первую очередь зависит от разрешения экрана.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["size_intro"] = false;
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{
    static class Styles
    {

        public static Xamarin.Forms.Color BackColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["back"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color UserColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["user"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color BotColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["bot"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static int Size
        {
            get => (int)App.Current.Properties["size"];
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Subscribes : ContentPage
    {

        Entry entry = new Entry();

        string t = "\nМои подписки\n";

        public Subscribes()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SubscribesIntro : ContentPage
    {

        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SubscribesIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Мои подписки";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Мои подписки\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет автоматически проводиться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["subscribes_intro"] = false;
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Support : ContentPage
    {
        Button ok = new Button
        {
            Text = "Поддержать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public Support()
        {
            ok.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("https://money.yandex.ru/to/410014676758208"));
            if (Device.RuntimePlatform == "iOS")
                Title = "Поддержать";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Большое спасибо за скачивание и использование моего приложения!\n\n" +
                                "Я верю в то, что оно тебе нравится, и ты поставил ему оценку в магазине приложений.\n\n" +
                                "Если хочешь поддержать меня материально, а также сделать вклад в будущие проекты, нажми на кнопку ниже😉",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    Elements.ButtonInFrame(ok)
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Timing : ContentPage
    {

        string t = "\nОбласть поиска\n";
        public Timing()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class TimingIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TimingIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Область поиска";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Область поиска\"!\n\n" +
                                "В этом разделе можно выбрать промежуток времени, в который будет проводиться поиск.\n\n" +
                                "Обратите внимание, что при выборе большого промежутка, новости могут быть устаревшими.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["frequency_intro"] = false;
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Type : ContentPage
    {
        string t = "\nТематика новостей\n";
        public Type()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class TypeIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TypeIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Тематика новостей";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Тематика новостей\"!\n\n" +
                                "В этом разделе можно выбрать тематику, по которой будет проводиться поиск.\n\n",                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["type_intro"] = false;
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Welcome : ContentPage
    {
        Button ok = new Button
        {
            Text = "Настроить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Button ignore = new Button
        {
            Text = "Пропустить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Welcome()
        {
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Привет, я XBot! Я буду присылать тебе новости, но на этом мои функции не ограничиваются!\n\n" +
                                "Еще я умею обрабатывать запросы, сохранять их, вычислять курс валют, а также ограничивать доступ к ненужному контенту.\n\n" +
                                "Я использую открытое API Mediametrics и центрального банка России, за что им огромное спасибо!\n\n" +
                                "Я являюсь некоммерческим проектом и создан в образовательных целях. Если у тебя возникли замечания или предложения, напиши моему создателю: emmtvv@icloud.com.\n\n" +
                                "Нажми на кнопку \"Настроить\", чтобы я работал максимально комфортно для тебя!\n\n" +
                                "Приятного пользования!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new XBot.SettingsOnStart.Intro1());
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro1 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help;
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro1()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Цветовая тема";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            MakeContent();
            dark.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
                MakeContent();
            };
            light.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
                MakeContent();
            };
        }

        string t = "\nЦветовая тема\n";
        Button dark = new Button { Text="     ", BackgroundColor = Color.FromRgb(30, 30, 30), BorderColor = Color.FromRgb(255,255,255), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };
        Button light = new Button { Text = "     ", BackgroundColor = Color.FromRgb(255, 255, 255), BorderColor = Color.FromRgb(30, 30, 30), BorderWidth = 1, HorizontalOptions = LayoutOptions.FillAndExpand };

        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери цветовую тему приложения", "Хорошо!");
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            help = new Button
            {
                Text = "?",
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro2());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new Frame
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                                    BorderColor = Styles.UserColor,
                                    HorizontalOptions = LayoutOptions.End,
                                    BackgroundColor = Styles.UserColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                },
                                new Frame
                                {
                                    Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size },
                                    BorderColor = Styles.BotColor,
                                    HorizontalOptions = LayoutOptions.Start,
                                    BackgroundColor = Styles.BotColor,
                                    CornerRadius = 30,
                                    HasShadow = false
                                }
                            }
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        HasShadow = false,
                        BackgroundColor = Styles.BackColor
                    },
                    new StackLayout
                    {
                        Children =
                        {
                            light,
                            dark
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro2 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери тематику, по которой будет проводиться поиск", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nТематика новостей\n";
        public Intro2()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro3());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro3 : ContentPage
    {
        Button ok;
        Button ignore;
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери временной интервал поиска новостей", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nОбласть поиска\n";
        public Intro3()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            help.Clicked += Help;
            MakeContent();
        }

        void MakeContent()
        {
            ignore = new Button
            {
                Text = "Назад",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok = new Button
            {
                Text = "Далее",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.CenterAndExpand
            };
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro4());
            ignore.Clicked += Pop;
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro4 : ContentPage
    {
        string t = "\nРазмер шрифта\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        int size = (int)App.Current.Properties["size"];
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери размер шрифта в диалоге", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro4()
        {
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += (object sender, EventArgs e) =>
            {
                App.Current.Properties["size"] = size;
                Navigation.PushAsync(new Intro5());
            };

            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    new StackLayout
                    {
                        Children = { ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        private void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)e.NewValue + 8;
            my.FontSize = size;
            bot.FontSize = size;
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro5 : ContentPage
    {
        Picker entry = new Picker();
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери валюту, курс которой ты хотел бы получать", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        string t = "\nВалюта\n";

        public Intro5()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro6());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in Currency.CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }

                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro6 : ContentPage
    {
        Entry entry = new Entry();

        string t = "\nМои подписки\n";
        Button ignore = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ok = new Button
        {
            Text = "Далее",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button help = new Button
        {
            Text = "?",
            FontAttributes = FontAttributes.Bold,
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        async void Help(object sender, EventArgs e)
        {
            await DisplayAlert("Помощь", "Выбери ключевые слова, по которым ты хотел бы получать нвоости", "Хорошо!");
        }
        async void Pop(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
        public Intro6()
        {
            ok.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Intro7());
            ignore.Clicked += Pop;
            help.Clicked += Help;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
            Display();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    }
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    new StackLayout
                    {
                        Children = {ignore, help, ok },
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        async void Display()
        {
            await DisplayAlert("Важная информация!", "Выбери ключевые слова, по которым будет производиться поиск", "Понятно!");
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot.SettingsOnStart
{
    public class Intro7 : ContentPage
    {
        Button ok = new Button
        {
            Text = "Начать!",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Intro7()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Моя настройка закончена и я готов к работе!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            for (int i = 0; i < 8; i++)
                Navigation.RemovePage(Navigation.NavigationStack[0]);

        }

    }
}

using System;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using System.Drawing;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.IO;

[assembly: XamlCompilation(XamlCompilationOptions.Compile)]
namespace XBot
{
    public partial class App : Application
    {
    
        public App()
        {
            object obj;
            if (!App.Current.Properties.TryGetValue("messages", out obj))
                App.Current.Properties["messages"] = "";
            if (!App.Current.Properties.TryGetValue("subscribes", out obj))
                App.Current.Properties["subscribes"] = "";
            if (!App.Current.Properties.TryGetValue("count", out obj))
                App.Current.Properties["count"] = 5;
            if (!App.Current.Properties.TryGetValue("onstart", out obj))
                App.Current.Properties["onstart"] = "news";
            if (!App.Current.Properties.TryGetValue("back", out obj))
                App.Current.Properties["back"] = "255 255 255";
            if (!App.Current.Properties.TryGetValue("user", out obj))
                App.Current.Properties["user"] = "0 0 255";
            if (!App.Current.Properties.TryGetValue("bot", out obj))
                App.Current.Properties["bot"] = "128 0 128";
            if (!App.Current.Properties.TryGetValue("control", out obj))
                App.Current.Properties["control"] = "";
            if (!App.Current.Properties.TryGetValue("blocked", out obj))
                App.Current.Properties["blocked"] = false;
            if (!App.Current.Properties.TryGetValue("welcome", out obj))
                App.Current.Properties["welcome"] = true;
            if (!App.Current.Properties.TryGetValue("subscribes_intro", out obj))
                App.Current.Properties["subscribes_intro"] = true;
            if (!App.Current.Properties.TryGetValue("control_intro", out obj))
                App.Current.Properties["control_intro"] = true;
            if (!App.Current.Properties.TryGetValue("hint", out obj))
                App.Current.Properties["hint"] = true;
            if (!App.Current.Properties.TryGetValue("frequency", out obj))
                App.Current.Properties["frequency"] = "online";
            if (!App.Current.Properties.TryGetValue("frequency_intro", out obj))
                App.Current.Properties["frequency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("size", out obj))
                App.Current.Properties["size"] = 14;
            if (!App.Current.Properties.TryGetValue("size_intro", out obj))
                App.Current.Properties["size_intro"] = true;
            if (!App.Current.Properties.TryGetValue("type", out obj))
                App.Current.Properties["type"] = "";
            if (!App.Current.Properties.TryGetValue("type_intro", out obj))
                App.Current.Properties["type_intro"] = true;
            if (!App.Current.Properties.TryGetValue("currency", out obj))
                App.Current.Properties["currency"] = "";
            if (!App.Current.Properties.TryGetValue("currency_intro", out obj))
                App.Current.Properties["currency_intro"] = true;
            if (!App.Current.Properties.TryGetValue("save", out obj))
                App.Current.Properties["save"] = "";
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            else
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            MainPage = (bool)App.Current.Properties["welcome"] ? new NavigationPage(new Welcome()) : (bool)App.Current.Properties["hint"] ? new NavigationPage(new Hint()) : new NavigationPage(new MainPage());
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Http;
using System.Threading.Tasks;
using System.Threading;

namespace XBot
{
    static class Bot
    {
     
        public static readonly HttpClient client = new HttpClient();

        async public static void GetNews(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mess = "";
            int count = 0;
            try
            {
                line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=1&update=1401216280");
                string[] elems = line.Split('\n');
                for (int i = 1; count < (int)App.Current.Properties["count"] && i < elems.Length; i++)
                {
                    string[] first = elems[i].Split('\t');
                    string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                    string[] elems1 = info.Split('\t');
                    if (!Denied(elems1[1]))
                    {
                        mess += $"{elems1[1]}\n֍{elems1[0]}֍";
                        count++;
                    }
                }
            }
            catch (IndexOutOfRangeException) { }
            catch (Exception ex) 
            { 
                string a = ex.ToString();
                line = "";
            }
            mess += '\b';
            Chat.Remove();
            mess = $"Топ-{count} новостей на {Now} за {Period}\n\n֍֍" + mess;
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0 || count == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(mess.Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Search(MainPage m, IEnumerable<string> requests, bool type)
        {
            m.Active(false);
            int count = 1;
            int amount = 0;
            string mess = "";
            string line = "";
            try
            {
                while (count != 4 && amount < (int)App.Current.Properties["count"])
                {
                    line = await client.GetStringAsync($"http://mediametrics.ru/rating/{(string)App.Current.Properties["type"]}ru/{(string)App.Current.Properties["frequency"]}.tsv?page=" + count.ToString() + "&update=1401216280");
                    string[] elems = line.Split('\n');
                    for (int i = 1; i < elems.Length; i++)
                    {
                        string[] first = elems[i].Split('\t');
                        string info = await client.GetStringAsync("http://mediametrics.ru/rating/index.tsv?titles=" + first[5]);
                        string[] elems1 = info.Split('\t');
                        foreach (string str in requests)
                        {
                            if (IsSubString(elems1[1].ToLower(), str.ToLower()) && !Denied(elems1[1]))
                            {
                                mess += elems1[1] + "\n֍" + elems1[0] + "֍";
                                amount++;
                            }
                            if (amount == (int)App.Current.Properties["count"])
                                goto go;
                        }
                        count++;
                    }
                }
            }
            catch { }
            go:
            Chat.Remove();
            string name = "";
            if (type)
                name = "подписок";
            else
                name = $"новостей по запросу \"{FromIEnumerable(requests)}\"";
            if (line == null || line.Length == 0)
                Chat.Add("Отсутствует подключение к интернету", true);
            else if (mess.Length == 0)
                Chat.Add("Поиск не дал результатов", true);
            else
                Chat.Add(($"Топ-{amount} {name} на {Now} за {Period}\n\n֍֍" + mess + "\b\b\b").Replace("&quot;", "\"").Replace("&amp;", "\""), true);
            m.Display();
            m.Active(true);
        }

        async public static void Currency(MainPage m)
        {
            m.Active(false);
            string line = "";
            string mes = $"CКурс валют на {Now}\n";
            List<string> cur = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            try
            {
                byte[] s = await client.GetByteArrayAsync("https://www.cbr-xml-daily.ru/daily_json.js");
                line = Encoding.UTF8.GetString(s, 0, s.Length);
                string[] vl = line.Split('\n');
                for (int i = cur.Count - 1; i >= 0; i--)
                {
                    int num = XBot.Currency.CurrencyNum[cur[i]];
                    string[] ss = vl[num].Split(':')[1].Split(' ')[1].Split(',')[0].Split('.');
                    string p = vl[num - 2].Split(':')[1].Split(' ')[1].Split(',')[0];
                    double val = double.Parse(ss[0]) + double.Parse(ss[1]) / 10000; 
                    int a = int.Parse(p);
                    val = val / a + 0.005;
                    mes += $"{XBot.Currency.CurrencyId[cur[i]]}: {val:f2}\n";
                }
            }
            catch(Exception ex) { string a = ex.ToString(); }
            Chat.Remove();
            if (line == "")
                Chat.Add("Отсутствует подключение к интернету", true);
            else
                Chat.Add(mes, true);
            m.Display();
            m.Active(true);
        }


        static string FromIEnumerable(IEnumerable<string> arr)
        {
            string line = "";
            foreach (string s in arr)
                line += s + " ";
            return line.Substring(0, line.Length - 1);
        }

        static bool IsSubString(string name, string str)
        {
            if (str.Length > 5)
                str = str.Substring(0, str.Length - 2);
            return name.Contains(str);
        }

        static bool Denied(string news)
        {
            if (!(bool)App.Current.Properties["blocked"])
                return false;
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            foreach (string str in subs)
                if (news.ToLower().Contains(str.ToLower()))
                    return true;
            return false;
        }

        static string Period
        {
            get 
            {
                switch ((string)App.Current.Properties["frequency"])
                {
                    case "online":
                        return "последние 10 минут";
                    case "hour":
                        return "последний час";
                    case "day":
                        return "последние сутки";
                    case "week":
                        return "последнюю неделю";
                    default:
                        return "последний месяц";
                }
            }
        }

        static string Now
        {
            get {
                string datetime = DateTime.Now.ToString();
                string line = "";
                if (datetime[0] == '0')
                    datetime = datetime.Substring(1);
                string[] d1 = datetime.Split(' ');
                string[] date;
                if (!DateTime.Now.ToString().Contains("/"))
                {
                    date = d1[0].Split('.');
                    line += $"{date[0]} {Month(date[1])} ";
                }
                else
                {
                    date = d1[0].Split('/');
                    line += $"{date[1]} {Month(date[0])} ";
                }
                string[] time = d1[1].Split(':');
                line += time[0] + ":" + time[1];
                return line;
            }
        }

        static string Month(string num)
        {
            if (num[0] == '0')
                num = num.Substring(1);
            switch (int.Parse(num))
            {
                case 1:
                    return "января";
                case 2:
                    return "февраля";
                case 3:
                    return "марта";
                case 4:
                    return "апреля";
                case 5:
                    return "мая";
                case 6:
                    return "июня";
                case 7:
                    return "июля";
                case 8:
                    return "августа";
                case 9:
                    return "сентбря";
                case 10:
                    return "октября";
                case 11:
                    return "ноября";
                default:
                    return "декабря";
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace XBot
{
    static class Chat
    {
        public static void Add(string message, bool sender)
        {
            string mess = "";
            if (sender)
                mess += "B";
            else
                mess += "U";
            mess += message;
            Formats.Add(mess, "messages");
        }

        public static void Remove()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            mes.RemoveAt(mes.Count - 1);
            App.Current.Properties["messages"] = Formats.FromListIntoString(mes);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public partial class MainPage : ContentPage
    {
        async void Command()
        {
            Chat.Add(message.Text, false);
            switch (message.Text.Split(' ')[0])
            {
                case "/light":
                    App.Current.Properties["back"] = "255 255 255";
                    App.Current.Properties["user"] = "0 0 255";
                    App.Current.Properties["bot"] = "128 0 128";
                    Chat.Add("Тема сменена на светлую", true);
                    break;
                case "/dark":
                    App.Current.Properties["back"] = "30 30 30";
                    App.Current.Properties["user"] = "86 156 214";
                    App.Current.Properties["bot"] = "80 80 80";
                    Chat.Add("Тема сменена на темную", true);
                    break;
                case "/news":
                    NewsClick(new object(), new EventArgs());
                    break;
                default:
                    Chat.Add("Неизвестная команда!", true);
                    break;

            }
            Display();
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Control : ContentPage
    {

        Entry entry = new Entry();
        string t = "\nРодительский контроль\n";

        public Control()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительный запрет",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Button exit = new Button
            {
                Text = "Отключить контоль",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            exit.Clicked += Deny;
            Button apply = new Button
            {
                Text = "Применить",
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End
            };
            apply.Clicked += Apply;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl, VerticalOptions = LayoutOptions.FillAndExpand },
                    exit,
                    apply
                }
            };
        }

        async void Apply(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        async void Deny(object sender, EventArgs e)
        {
            App.Current.Properties["blocked"] = false;
            App.Current.Properties["control"] = "";
            await Navigation.PopAsync();
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["control"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["control"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class ControlIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public ControlIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Родительский контроль";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Родительский контроль\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет игнорироваться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["control_intro"] = false;
            await Navigation.PushAsync(new Password());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class Currency : ContentPage
    {
        Picker entry = new Picker();

        string t = "\nВалюта\n";

        public Currency()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Валюта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Picker
            {
                FontSize = 14,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                Title = "Добавить валюту",
                TitleColor = Xamarin.Forms.Color.LightSkyBlue
            };             
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            foreach (string c in CurrencyNum.Keys)
                if (!subs.Contains(c))
                    entry.Items.Add(c);
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["currency"]);
            if (entry.SelectedItem != null && ((string)entry.SelectedItem).Length != 0)
            {
                subs.Add((string)entry.SelectedItem);
                App.Current.Properties["currency"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

        public static Dictionary<string, int> CurrencyNum = new Dictionary<string, int>
        {
            {"Австралийский доллар", 12},
            {"Азербайджанский манат", 21},
            {"Фунт стерлингов Соединенного королевства", 30},
            {"Армянский драм", 39},
            {"Белорусский рубль", 48},
            {"Болгарский лев", 57},
            {"Бразильский реал", 66},
            {"Венгерский форинт", 75},
            {"Гонконгский доллар", 84},
            {"Датская крона", 93},
            {"Доллар США", 102},
            {"Евро", 111},
            {"Индийская рупия", 120},
            {"Казахстанский тенге", 129},
            {"Канадский доллар", 138},
            {"Киргизский сом", 147},
            {"Китайский юань", 156},
            {"Молдавский лей", 165},
            {"Норвежская крона", 174},
            {"Польский злотый", 183},
            {"Румынский лей", 192},
            {"Сингапурский доллар", 210},
            {"Таджикский сомони", 219},
            {"Турецкая лира", 228},
            {"Новый туркменский манат", 237},
            {"Узбекский сум", 246},
            {"Украинская гривна", 255},
            {"Чешская крона", 264},
            {"Шведская крона", 273},
            {"Швейцарский франк", 282},
            {"Южноафриканский рэнд", 291},
            {"Вон Республики Корея", 300},
            {"Японская иена", 309}
        };

        public static Dictionary<string, string> CurrencyId = new Dictionary<string, string>
        {
            {"Австралийский доллар", "AUD"},
            {"Азербайджанский манат", "AZN"},
            {"Фунт стерлингов Соединенного королевства", "GBP"},
            {"Армянский драм", "AMD"},
            {"Белорусский рубль", "BYN"},
            {"Болгарский лев", "BGN"},
            {"Бразильский реал", "BRL"},
            {"Венгерский форинт", "HUF"},
            {"Гонконгский доллар", "HKD"},
            {"Датская крона", "DKK"},
            {"Доллар США", "USD"},
            {"Евро", "EUR"},
            {"Индийская рупия", "INR"},
            {"Казахстанский тенге", "KZT"},
            {"Канадский доллар", "CAD"},
            {"Киргизский сом", "KGS"},
            {"Китайский юань", "CNY"},
            {"Молдавский лей", "MDL"},
            {"Норвежская крона", "NOK"},
            {"Польский злотый", "PLN"},
            {"Румынский лей", "RON"},
            {"Сингапурский доллар", "SGD"},
            {"Таджикский сомони", "TJS"},
            {"Турецкая лира", "TRY"},
            {"Новый туркменский манат", "TMT"},
            {"Узбекский сум", "UZS"},
            {"Украинская гривна", "UAH"},
            {"Чешская крона", "CZK"},
            {"Шведская крона", "SEK"},
            {"Швейцарский франк", "CHF"},
            {"Южноафриканский рэнд", "ZAR"},
            {"Вон Республики Корея", "KRW"},
            {"Японская иена", "JPY"}
        };
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class CurrencyIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public CurrencyIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Валюта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Валюта\"!\n\n" +
                                "В этом разделе можно добавить валюты, по которым будет проводиться поиск.\n\n",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["currency_intro"] = false;
            await Navigation.PushAsync(new Currency());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{

    public static class Elements
    {
        public static Frame LabelAndElement(string labeltext, View element)
        {
            return new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Label
                        {
                            TextColor = Styles.UserColor,
                            Text = labeltext,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            VerticalOptions = LayoutOptions.Center,
                            HorizontalTextAlignment = TextAlignment.Start
                        },
                        element
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BorderColor = Styles.UserColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Frame ButtonInFrame(Button b)
        {
            return new Frame
            {
                Content = b,
                BorderColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
        }

        public static Button Button(string text, bool fill)
        {
            Button b = new Button
            {
                Text = text,
                BackgroundColor = Styles.BackColor,
                TextColor = Styles.UserColor,
                BorderColor = Styles.UserColor
            };
            if (fill)
                b.HorizontalOptions = LayoutOptions.FillAndExpand;
            return b;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XBot
{
    static class Formats
    {

        public const char parse = '÷';

        public static string FromListIntoString(List<string> l)
        {
            if (l.Count == 0)
                return "";
            string line = "";
            for (int i = 0; i < l.Count; i++)
                line += l[i].Replace(parse.ToString(), parse.ToString() + parse.ToString()) + parse;
            return line.Substring(0, line.Length - 1);
        }

        public static List<string> FromStringIntoList(string line)
        {
            if (line == null || line.Length == 0)
                return new List<string>();
            string word = "";
            List<string> l = new List<string>();
            int i = 0;
            while (i < line.Length)
            {
                if (line[i] != parse)
                    word += line[i];
                else if (line[i + 1] == parse)
                    word += line[i++];
                else
                {
                    l.Add(word);
                    word = "";
                }
                i++;
            }
            l.Add(word);
            return l;
        }

        public static void Add(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Add(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

        public static void Remove(string what, string where)
        {
            List<string> list = FromStringIntoList((string)App.Current.Properties[where]);
            list.Remove(what);
            App.Current.Properties[where] = FromListIntoString(list);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Hint : ContentPage
    {
        Button ok = new Button
        {
            Text = "Спасибо",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        string[] hints =
        {
            "При нажатии на кнопку 📈 я расскажу тебе о курсе валют",
            "При нажатии на кнопку 🤵 я расскажу тебе о последних новостях из твоих подписок",
            "При нажатии на кнопку 🔝 я расскажу тебе о последних новостях",
            "При нажатии на кнопку ⭐ я выведу избранные статьи",
            "В настройках можно указать количество новостей выводимых за раз",
            "В настройках можно сменить цветовую схему",
            "В настройках можно сменить контент, показываемый при запуске",
            "В настройках можно сохранить ключевые слова для поиска в разделе \"Мои подписки\"",
            "В настройках можно запретить показывать нежелательный контент в разделе \"Родительский контроль\"",
            "В настройках можно очистить диалоговое окно",
            "В настройках можно указать период времени, по которому будет проводиться поиск",
            "В настройках можно выбрать размер шрифта в чате",
            "Любимые статьи можно добавить в избранное"
        };

        public Hint()
        {
            ok.Clicked += OkClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text = hints[(new Random()).Next(hints.Length)],
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    ok
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Xamarin.Forms;
using System.Drawing;



namespace XBot
{

    public partial class MainPage : ContentPage
    {
        Frame frame;
        Entry message;
        ScrollView scroll;
        StackLayout stack;
        Button settings;
        Button news;
        Button subscribes;
        Button currency;
        Button favs;

        public MainPage()
        {
            Title = "Диалог";
            NavigationPage.SetHasNavigationBar(this, false);
            message = new Entry
            {
                Placeholder = "Сообщение",
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                FontSize = 20,
                BackgroundColor = Styles.BackColor,
                VerticalOptions = LayoutOptions.End,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor
            };
            message.Completed += ButtonClick;
            settings = new Button
            {
                Text = "⚙️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            subscribes = new Button
            {
                Text = "🤵",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news = new Button
            {
                Text = "🔝",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            currency = new Button
            {
                Text = "📈",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            favs = new Button
            {
                Text = "⭐️",
                FontSize = 20,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.End,
                BackgroundColor = Styles.BackColor,
                WidthRequest = 50
            };
            news.Clicked += NewsClick;
            settings.Clicked += SettingsClick;
            subscribes.Clicked += SubscribesClick;
            currency.Clicked += CurrencyClick;
            favs.Clicked += FavsClick;
            string line = (string)App.Current.Properties["messages"];
            if (line.Length == 0)
                frame = new Frame { HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            else
                MakeFrame();
            MakeContent();
            if ((string)App.Current.Properties["onstart"] == "news")
                NewsClick(new object(), new EventArgs());
            else if ((string)App.Current.Properties["onstart"] == "subscribes")
                SubscribesClick(new object(), new EventArgs());
            else
                CurrencyClick(new object(), new EventArgs());
        }

        private void FavsClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["save"] == "")
                Chat.Add("Список избранного пуст!", true);
            else
            {
                if ((string)App.Current.Properties["messages"] != "")
                    App.Current.Properties["messages"] += Formats.parse.ToString();
                App.Current.Properties["messages"] += $"BИзбранное:\n\n֍֍{((string)App.Current.Properties["save"]).Replace(Formats.parse.ToString(), "֍")}";
            }
            Display();
        }

        public void Active(bool act)
        {
            message.IsEnabled = act;
            settings.IsEnabled = act;
            subscribes.IsEnabled = act;  
            news.IsEnabled = act;
            currency.IsEnabled = act;
            favs.IsEnabled = act;
        }

        private void SubscribesClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["subscribes"] == "")
            {
                Chat.Add("Список подписок пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                Chat.Add("Ищу подписки...", true);
                Display();
                Bot.Search(this, Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]), true);
            }

        }

        private void SettingsClick(object sender, EventArgs e)
        {
            Navigation.PushAsync(new Settings(this));
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["currency"] == "")
            {
                Chat.Add("Список валют пуст! Заполните его в настройках!", true);
                Display();
            }
            else
            {
                try
                {
                    Chat.Add("Вычисляю курс валют...", true);
                    Display();
                    Bot.Currency(this);
                }
                catch { }
            }
        }

        private void NewsClick(object sender, EventArgs e)
        {
            try
            {
                Chat.Add("Ищу новости...", true);
                Display();
                Bot.GetNews(this);
            }
            catch { }
        }

        private void ButtonClick(object sender, EventArgs e)
        {
            if (message.Text == null || message.Text.Length == 0)
                return;
            else
            {
                Chat.Add(message.Text, false);
                Chat.Add($"Выполняю поиск по запросу \"{message.Text}\"...", true);
                Display();
                Bot.Search(this, message.Text.Split(' '), false);
            }
            message.Text = "";
        }

        public void Display()
        {
            MakeFrame();
            MakeContent();
        }

        public void MakeContent()
        {
            Content = new StackLayout
            {
                Children =
                {
                    frame,
                    message,
                    new StackLayout
                    {
                        Children =
                        {
                            settings,
                            subscribes,
                            news,
                            currency,
                            favs
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                }
            };
            BackgroundColor = Styles.BackColor;
            message.TextColor = Styles.UserColor;
            message.BackgroundColor = Styles.BackColor;
            settings.BackgroundColor = Styles.BackColor;
            subscribes.BackgroundColor = Styles.BackColor;
            news.BackgroundColor = Styles.BackColor;
            currency.BackgroundColor = Styles.BackColor;
            favs.BackgroundColor = Styles.BackColor;
            if (scroll != null)
                scroll.ScrollToAsync(stack, ScrollToPosition.End, false);
        }

        public void MakeFrame()
        {
            List<string> mes = Formats.FromStringIntoList((string)App.Current.Properties["messages"]);
            frame = new Frame { HasShadow = false, HorizontalOptions = LayoutOptions.FillAndExpand, VerticalOptions = LayoutOptions.FillAndExpand, BackgroundColor = Styles.BackColor };
            stack = new StackLayout { VerticalOptions = LayoutOptions.End };
            for (int i = 0; i < mes.Count; i++)
            {
                Frame f = new Frame { BackgroundColor = Styles.BotColor, CornerRadius = 30, HasShadow = false };
                if (mes[i][0] == 'U')
                    f = new Frame
                    {
                        Content = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.UserColor, FontSize = Styles.Size },
                        BorderColor = Styles.UserColor,
                        HorizontalOptions = LayoutOptions.End,
                        BackgroundColor = Styles.UserColor,
                        CornerRadius = 30,
                        HasShadow = false
                    };
                else
                {
                    if (mes[i][1] == 'C')
                    {
                        string[] cur = mes[i].Substring(2, mes[i].Length - 3).Split('\n');
                        StackLayout sl = new StackLayout();
                        sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[0], BackgroundColor = Styles.BotColor, FontSize = Styles.Size, FontAttributes = FontAttributes.Bold });
                        for (int j = 1; j < cur.Length; j++)
                            sl.Children.Add(new Label { TextColor = Xamarin.Forms.Color.White, Text = cur[j], BackgroundColor = Styles.BotColor, FontSize = Styles.Size * 3 / 2 });
                        f.Content = sl;
                    }
                    else if (mes[i].Split('֍').Length == 1)
                    {
                        Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = mes[i].Substring(1), BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
                        f.Content = l;
                    }
                    else
                    {
                        string[] info = mes[i].Substring(1).Split('֍');
                        StackLayout sl = new StackLayout();
                        Dictionary<string, string> dict = new Dictionary<string, string>();
                        for (int j = 0; j < info.Length / 2; j++)
                        {
                            dict[info[2 * j]] = info[2 * j + 1];
                            Label l = new Label { TextColor = Xamarin.Forms.Color.White, Text = info[2 * j], FontSize = Styles.Size, BackgroundColor = Styles.BotColor };
                            if (j > 0)
                            {
                                var tapGestureRecognizer = new TapGestureRecognizer();
                                tapGestureRecognizer.Tapped += (s, e) =>
                                {
                                    string tmp = dict[l.Text];
                                    Navigation.PushAsync(new ShowContent(tmp, l.Text));
                                };
                                l.GestureRecognizers.Add(tapGestureRecognizer);
                            }
                            else
                                l.FontAttributes = FontAttributes.Bold;
                            sl.Children.Add(l);
                        }
                        f.Content = sl;
                    }
                    f.BorderColor = Styles.BotColor;
                    f.HorizontalOptions = LayoutOptions.Start;
                }
                f.VerticalOptions = LayoutOptions.End;
                stack.Children.Add(new Label { FontSize = Styles.Size / 2, Text = "\n" });
                stack.Children.Add(f);
            }
            scroll = new ScrollView { Content = stack };
            frame.Content = scroll;
        }

    }
}

using System;
namespace XBot
{
    public partial class Settings
    {

        void MakeDark(object sender, EventArgs e)
        {
            if ((string)App.Current.Properties["back"] == "30 30 30")
            {
                App.Current.Properties["back"] = "255 255 255";
                App.Current.Properties["user"] = "0 0 255";
                App.Current.Properties["bot"] = "128 0 128";
            }
            else
            {
                App.Current.Properties["back"] = "30 30 30";
                App.Current.Properties["user"] = "86 156 214";
                App.Current.Properties["bot"] = "80 80 80";
            }
            main.Display();
            MakeContent();
        }

        void TimeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["frequency_intro"])
                Navigation.PushAsync(new TimingIntro());
            else
                Navigation.PushAsync(new Timing());
        }

        void CurrencyClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["currency_intro"])
                Navigation.PushAsync(new CurrencyIntro());
            else
                Navigation.PushAsync(new Currency());
        }

        void TypeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["type_intro"])
                Navigation.PushAsync(new TypeIntro());
            else
                Navigation.PushAsync(new Type());
        }

        void ClearClick(object sender, EventArgs e)
        {
            App.Current.Properties["messages"] = "";
            main.Display();
        }

        void SubsClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["subscribes_intro"])
                Navigation.PushAsync(new SubscribesIntro());
            else
                Navigation.PushAsync(new Subscribes());
        }

        void ControlClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["control_intro"])
                Navigation.PushAsync(new ControlIntro());
            else
                Navigation.PushAsync(new Password());
        }

        void SizeClick(object sender, EventArgs e)
        {
            if ((bool)App.Current.Properties["size_intro"])
                Navigation.PushAsync(new SizeIntro(main));
            else
                Navigation.PushAsync(new Size(main));
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Password : ContentPage
    {

        Entry pass = new Entry
        {
            Placeholder = "Пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Entry repeat = new Entry
        {
            Placeholder = "Повторите пароль",
            PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
            BackgroundColor = Styles.BackColor,
            VerticalOptions = LayoutOptions.CenterAndExpand,
            TextColor = Styles.UserColor,
            HorizontalTextAlignment = TextAlignment.Center,
            IsPassword = true
        };

        Button enter = new Button
        {
            Text = "Войти",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End
        };

        string t = "\nРодительский контроль\n";

        public Password()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Родительский контроль";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            StackLayout sl = new StackLayout();
            sl.Children.Add
                (new Label
                {
                    Text = t,
                    HorizontalTextAlignment = TextAlignment.Center,
                    FontSize = 20,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    VerticalOptions = LayoutOptions.Start,
                    TextColor = Styles.UserColor,
                    FontAttributes = FontAttributes.Bold,
                    BackgroundColor = Styles.BackColor
                });
            if (!(bool)App.Current.Properties["blocked"])
            {
                pass.Placeholder = "Придумайте пароль";
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                sl.Children.Add
                    (new Frame
                    {
                        Content = repeat,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Register;
            }
            else
            {
                sl.Children.Add
                    (new Frame
                    {
                        Content = pass,
                        BorderColor = Styles.UserColor,
                        BackgroundColor = Styles.BackColor,
                        VerticalOptions = LayoutOptions.CenterAndExpand
                    });
                enter.Clicked += Login;
                pass.Completed += Login;
            }
            sl.Children.Add(enter);
            Content = sl;
        }

        async void Register(object sender, EventArgs e)
        {
            if (pass.Text == "" || pass.Text == null)
                await DisplayAlert("Ошибка!", "Поле пароля пустое!", "Ок");
            else if (pass.Text != repeat.Text)
                await DisplayAlert("Ошибка!", "Пароли не совпадают!", "Ок");
            else
            {
                App.Current.Properties["password"] = pass.Text;
                App.Current.Properties["blocked"] = true;
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
        }

        async void Login(object sender, EventArgs e)
        {
            if (pass.Text == (string)App.Current.Properties["password"])
            {
                await Navigation.PushAsync(new Control());
                Navigation.RemovePage(Navigation.NavigationStack[2]);
            }
            else
                await DisplayAlert("Ошибка!", "Неверно введен пароль!", "Ок");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace XBot
{
    public partial class Settings : ContentPage
    {
        Picker OnStart = new Picker { Items = { "🔝Последние новости", "🤵Мои подписки", "📈Курс валют" }, WidthRequest = 30 };
        Switch Hints = new Switch();
        Picker amount = new Picker { Items = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }, WidthRequest = 30, TextColor = Styles.UserColor };
        MainPage main;
        string t = "\nНастройки\n";

        public Settings(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Настройки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            amount.SelectedIndex = (int)App.Current.Properties["count"] - 1;
            amount.SelectedIndexChanged += (object sender, EventArgs e) => { App.Current.Properties["count"] = amount.SelectedIndex + 1; };
            OnStart.SelectedIndex = (string)App.Current.Properties["onstart"] == "news" ? 0 : (string)App.Current.Properties["onstart"] == "subscribes" ? 1 : 2;
            Hints.IsToggled = (bool)App.Current.Properties["hint"];
            Hints.Toggled += (object sender, ToggledEventArgs e) => App.Current.Properties["hint"] = !(bool)App.Current.Properties["hint"];
            OnStart.SelectedIndexChanged += (object sender, EventArgs e) =>
            {
                if (OnStart.SelectedIndex == 0)
                    App.Current.Properties["onstart"] = "news";
                else if (OnStart.SelectedIndex == 1)
                    App.Current.Properties["onstart"] = "subscribes";
                else
                    App.Current.Properties["onstart"] = "currency";
            };
            MakeContent();
        }

        void MakeContent()
        {
            BackgroundColor = Styles.BackColor;
            Button Dark = Elements.Button("Сменить", false);
            Button Time = Elements.Button("Область поиска", true);
            Button Size = Elements.Button("Размер шрифта", true);
            Button Type = Elements.Button("Тематика новостей", true);
            Button Clear = Elements.Button("Очистить диалоговое окно", true);
            Button Subs = Elements.Button("Мои подписки", true);
            Button Control = Elements.Button("Родительский контроль", true);
            Button Support = Elements.Button("Поддержать", true);
            Button Currency = Elements.Button("Валюта", true);
            Time.Clicked += TimeClick;
            Clear.Clicked += ClearClick;
            Subs.Clicked += SubsClick;
            Control.Clicked += ControlClick;
            Size.Clicked += SizeClick;
            Type.Clicked += TypeClick;
            Currency.Clicked += CurrencyClick;
            Support.Clicked += (object sender, EventArgs e) => Navigation.PushAsync(new Support());
            Dark.Clicked += MakeDark;
            amount.TextColor = Styles.UserColor;
            OnStart.BackgroundColor = Styles.BackColor;
            amount.BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView
                    {
                        Content = new StackLayout
                        {
                            Children =
                            {
                                Elements.LabelAndElement("Количество новостей за раз", amount),
                                Elements.LabelAndElement("При старте показывать", OnStart),
                                Elements.LabelAndElement("Цветовая тема", Dark),
                                Elements.LabelAndElement("Показывать подсказки", Hints),
                                Elements.ButtonInFrame(Type),
                                Elements.ButtonInFrame(Time),
                                Elements.ButtonInFrame(Currency),
                                Elements.ButtonInFrame(Size),
                                Elements.ButtonInFrame(Subs),
                                Elements.ButtonInFrame(Control),
                                Elements.ButtonInFrame(Clear),
                                Elements.ButtonInFrame(Support)
                            }
                        }
                    }
                }
            };
            
        }

    }
}

using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace XBot
{
    public class ShowContent : ContentPage
    {

        string title;
        string url;

        Button save = new Button
        {
            Text = "☆",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand,
            FontSize = 20
        };

        Button back = new Button
        {
            Text = "Назад",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        Button internet = new Button
        {
            Text = "🌎",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        public ShowContent(string url, string title)
        {
            this.title = title;
            this.url = url;
            BackgroundColor = Styles.BackColor;
            back.Clicked += BackClick;
            internet.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("http://" + url));
            if (Device.RuntimePlatform == "iOS")
                Title = title;
            else
                NavigationPage.SetHasNavigationBar(this, false);
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (PositionInList(favs, $"{title}֍{url}") != -1)
                save = new Button
                {
                    Text = "★",
                    BackgroundColor = Styles.BackColor,
                    TextColor = Color.Yellow,
                    BorderColor = Color.Yellow,
                    VerticalOptions = LayoutOptions.End,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    FontSize = 20
                };
            save.Clicked += SaveClick;
            Content = new StackLayout { Children = { new WebView { Source = "http://" + url, VerticalOptions = LayoutOptions.FillAndExpand }, new StackLayout { Children = { back, internet, save }, Orientation = StackOrientation.Horizontal } } };
        }

        void SaveClick(object sender, EventArgs e)
        {
            List<string> favs = Formats.FromStringIntoList((string)App.Current.Properties["save"]);
            if (save.Text == "☆")
            {
                favs.Add($"{title}֍{url}");
                save.Text = "★";
                save.TextColor = Color.Yellow;
            }
            else
            {
                favs.Remove($"{title}֍{url}");
                save.Text = "☆";
                save.TextColor = Styles.UserColor;
            }
            App.Current.Properties["save"] = Formats.FromListIntoString(favs);
        }

        async void BackClick(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        static int PositionInList(List<string> list, string line)
        {
            for (int i = 0; i < list.Count; i++)
                if (list[i] == line)
                    return i;
            return -1;
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Size : ContentPage
    {

        MainPage main;
        string t = "\nРазмер шрифта\n";
        Slider slider = new Slider
        {
            Minimum = 0,
            Maximum = 18,
            ThumbColor = Styles.UserColor,
            MaximumTrackColor = Styles.UserColor,
            MinimumTrackColor = Styles.UserColor,
            Value = (int)App.Current.Properties["size"] - 8
        };
        Button ok = new Button
        {
            Text = "Применить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        int size = Styles.Size;
        Label my = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Привет, как тебя зовут?", BackgroundColor = Styles.UserColor, FontSize = Styles.Size };
        Label bot = new Label { TextColor = Xamarin.Forms.Color.White, Text = "Меня зовут XBot!", BackgroundColor = Styles.BotColor, FontSize = Styles.Size };
        Frame fr;
        public Size(MainPage m)
        {
            fr = new Frame
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Frame
                        {
                            Content = my,
                            BorderColor = Styles.UserColor,
                            HorizontalOptions = LayoutOptions.End,
                            BackgroundColor = Styles.UserColor,
                            CornerRadius = 30,
                            HasShadow = false
                        },
                        new Frame
                        {
                            Content = bot,
                            BorderColor = Styles.BotColor,
                            HorizontalOptions = LayoutOptions.Start,
                            BackgroundColor = Styles.BotColor,
                            CornerRadius = 30,
                            HasShadow = false
                        }
                    }
                },
                VerticalOptions = LayoutOptions.FillAndExpand,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                HasShadow = false,
                BackgroundColor = Styles.BackColor
            };
            main = m;
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Размер шрифта";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            slider.ValueChanged += Slider_ValueChanged;
            ok.Clicked += Ok_Clicked;
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    fr,
                    slider,
                    ok
                }
            };
        }

        async void Ok_Clicked(object sender, EventArgs e)
        {
            App.Current.Properties["size"] = size;
            main.Display();
            await Navigation.PopAsync();
        }


        void Slider_ValueChanged(object sender, ValueChangedEventArgs e)
        {
            size = (int)(e.NewValue + 8);
            my.FontSize = size;
            bot.FontSize = size;
        }


        

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SizeIntro : ContentPage
    {
        MainPage main;
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SizeIntro(MainPage m)
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Размер шрифта";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            main = m;
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Размер шрифта\"!\n\n" +
                                "В этом разделе можно выбрать размер шрифта сообщений в чате.\n\n" +
                                "Обратите внимание, что размер шрифта в первую очередь зависит от разрешения экрана.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["size_intro"] = false;
            await Navigation.PushAsync(new Size(main));
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;
using System.Collections.Generic;
using System.Text;
using Xamarin.Forms;

namespace XBot
{
    static class Styles
    {

        public static Xamarin.Forms.Color BackColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["back"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color UserColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["user"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static Xamarin.Forms.Color BotColor
        {
            get 
            {
                string[] c = ((string)App.Current.Properties["bot"]).Split(' ');
                return System.Drawing.Color.FromArgb(int.Parse(c[0]), int.Parse(c[1]), int.Parse(c[2]));
            }
        }

        public static int Size
        {
            get => (int)App.Current.Properties["size"];
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Subscribes : ContentPage
    {

        Entry entry = new Entry();

        string t = "\nМои подписки\n";

        public Subscribes()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Мои подписки";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            Button button1 = new Button
            {
                Text = "⊕",
                FontSize = 20,
                TextColor = Xamarin.Forms.Color.Green,
                FontAttributes = FontAttributes.Bold,
                BackgroundColor = Styles.BackColor,
                BorderColor = Styles.UserColor,
                HorizontalOptions = LayoutOptions.Start,
            };
            button1.Clicked += Add;
            entry = new Entry
            {
                Placeholder = "Дополнительная подписка",
                FontSize = 14,
                PlaceholderColor = Xamarin.Forms.Color.LightSkyBlue,
                VerticalOptions = LayoutOptions.Center,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                TextColor = Styles.UserColor,
                BackgroundColor = Styles.BackColor
            };
            entry.Completed += Add;
            Frame newframe = new Frame
            {
                CornerRadius = 30,
                BorderColor = Styles.UserColor,
                Content = new StackLayout
                {
                    Children =
                    {
                        button1,
                        entry
                    },
                    Orientation = StackOrientation.Horizontal
                },
                BackgroundColor = Styles.BackColor,
                HasShadow = false
            };
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            for (int i = subs.Count - 1; i >= 0; i--)
            {
                Button button = new Button
                {
                    Text = "⊖",
                    FontSize = 20,
                    ClassId = i.ToString(),
                    TextColor = Xamarin.Forms.Color.Red,
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.Start,
                    BackgroundColor = Styles.BackColor
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    subs.RemoveAt(int.Parse(((Button)sender).ClassId));
                    App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    CornerRadius = 30,
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    Content = new StackLayout
                    {
                        Children =
                        {
                            button,
                            new Label
                            {
                                Text = subs[i],
                                TextColor = Styles.UserColor,
                                HorizontalTextAlignment = TextAlignment.Start,
                                VerticalTextAlignment = TextAlignment.Center
                            }
                        },
                        Orientation = StackOrientation.Horizontal
                    },
                    HasShadow = false
                };
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    newframe,
                    new ScrollView { Content = sl }
                }
            };
        }

        void Add(object sender, EventArgs e)
        {
            List<string> subs = Formats.FromStringIntoList((string)App.Current.Properties["subscribes"]);
            if (entry.Text != null && entry.Text.Length != 0)
            {
                subs.Add(entry.Text);
                App.Current.Properties["subscribes"] = Formats.FromListIntoString(subs);
                MakeContent();
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class SubscribesIntro : ContentPage
    {

        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public SubscribesIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Мои подписки";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Мои подписки\"!\n\n" +
                                "В этом разделе можно добавить ключевые слова, по которым будет автоматически проводиться поиск.\n\n" +
                                "Обратите внимание, что если ключевое слово внесено в родительский контроль, система поиска будет его игнорировать.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["subscribes_intro"] = false;
            await Navigation.PushAsync(new Subscribes());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Support : ContentPage
    {
        Button ok = new Button
        {
            Text = "Поддержать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public Support()
        {
            ok.Clicked += (object sender, EventArgs e) => Device.OpenUri(new Uri("https://money.yandex.ru/to/410014676758208"));
            if (Device.RuntimePlatform == "iOS")
                Title = "Поддержать";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Большое спасибо за скачивание и использование моего приложения!\n\n" +
                                "Я верю в то, что оно тебе нравится, и ты поставил ему оценку в магазине приложений.\n\n" +
                                "Если хочешь поддержать меня материально, а также сделать вклад в будущие проекты, нажми на кнопку ниже😉",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            HorizontalOptions = LayoutOptions.FillAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    Elements.ButtonInFrame(ok)
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Timing : ContentPage
    {

        string t = "\nОбласть поиска\n";
        public Timing()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Область поиска";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "10 минут", "час", "день", "неделя", "месяц" };
            string[] code = new string[] { "online", "hour", "day", "week", "month" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["frequency"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["frequency"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class TimingIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TimingIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Область поиска";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Область поиска\"!\n\n" +
                                "В этом разделе можно выбрать промежуток времени, в который будет проводиться поиск.\n\n" +
                                "Обратите внимание, что при выборе большого промежутка, новости могут быть устаревшими.",
                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["frequency_intro"] = false;
            await Navigation.PushAsync(new Timing());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class Type : ContentPage
    {
        string t = "\nТематика новостей\n";
        public Type()
        {
            if (Device.RuntimePlatform == "iOS")
            {
                Title = "Тематика новостей";
                t = "";
            }
            else
                NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            MakeContent();
        }

        void MakeContent()
        {
            StackLayout sl = new StackLayout();
            string[] subs = new string[] { "Общие", "LifeStyle", "Hi-tech", "Спорт", "Бизнес" };
            string[] code = new string[] { "", "magazine/", "hitech/", "sport/", "business/" };
            for (int i = 0; i < subs.Length; i++)
            {
                Button button = new Button
                {
                    FontSize = 20,
                    ClassId = i.ToString(),
                    FontAttributes = FontAttributes.Bold,
                    BorderColor = Styles.UserColor,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    BackgroundColor = Styles.BackColor,
                    Text = subs[i],
                    TextColor = Styles.UserColor,
                    CornerRadius = 30
                };
                button.Clicked += (object sender, EventArgs e) =>
                {
                    App.Current.Properties["type"] = code[int.Parse(((Button)sender).ClassId)];
                    MakeContent();
                };
                Frame newf = new Frame
                {
                    BorderColor = Styles.UserColor,
                    BackgroundColor = Styles.BackColor,
                    CornerRadius = 30,
                    Content = button,
                    HasShadow = false
                };
                if ((string)App.Current.Properties["type"] == code[i])
                {
                    button.TextColor = Color.White;
                    button.BackgroundColor = Styles.UserColor;
                    newf.BackgroundColor = Styles.UserColor;
                }
                sl.Children.Add(newf);
            }
            Content = new StackLayout
            {
                Children =
                {
                    new Label
                    {
                        Text = t,
                        HorizontalTextAlignment = TextAlignment.Center,
                        FontSize = 20,
                        HorizontalOptions = LayoutOptions.FillAndExpand,
                        VerticalOptions = LayoutOptions.End,
                        TextColor = Styles.UserColor,
                        FontAttributes = FontAttributes.Bold,
                        BackgroundColor = Styles.BackColor
                    },
                    new ScrollView { Content = sl }
                }
            };
        }
    }
}

using System;

using Xamarin.Forms;

namespace XBot
{
    public class TypeIntro : ContentPage
    {
        Button ok = new Button
        {
            Text = "OK",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        Button ignore = new Button
        {
            Text = "Больше не показывать",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.CenterAndExpand
        };
        public TypeIntro()
        {
            if (Device.RuntimePlatform == "iOS")
                Title = "Тематика новостей";
            else
                NavigationPage.SetHasNavigationBar(this, false);
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Добро пожаловать в раздел \"Тематика новостей\"!\n\n" +
                                "В этом разделе можно выбрать тематику, по которой будет проводиться поиск.\n\n",                                TextColor = Styles.UserColor,
                                FontSize = 24
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["type_intro"] = false;
            await Navigation.PushAsync(new Type());
            Navigation.RemovePage(Navigation.NavigationStack[2]);
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Xamarin.Forms;

namespace XBot
{
    public class Welcome : ContentPage
    {
        Button ok = new Button
        {
            Text = "Настроить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        Button ignore = new Button
        {
            Text = "Пропустить",
            BackgroundColor = Styles.BackColor,
            TextColor = Styles.UserColor,
            BorderColor = Styles.UserColor,
            VerticalOptions = LayoutOptions.End,
            HorizontalOptions = LayoutOptions.FillAndExpand
        };
        public Welcome()
        {
            ok.Clicked += OkClick;
            ignore.Clicked += IgnoreClick;
            NavigationPage.SetHasNavigationBar(this, false);
            BackgroundColor = Styles.BackColor;
            Content = new StackLayout
            {
                Children =
                {
                    new ScrollView
                    {
                        Content = new Frame
                        {
                            Content = new Label
                            {
                                Text =
                                "Привет, я XBot! Я буду присылать тебе новости, но на этом мои функции не ограничиваются!\n\n" +
                                "Еще я умею обрабатывать запросы, сохранять их, вычислять курс валют, а также ограничивать доступ к ненужному контенту.\n\n" +
                                "Я использую открытое API Mediametrics и центрального банка России, за что им огромное спасибо!\n\n" +
                                "Я являюсь некоммерческим проектом и создан в образовательных целях. Если у тебя возникли замечания или предложения, напиши моему создателю: emmtvv@icloud.com.\n\n" +
                                "Нажми на кнопку \"Настроить\", чтобы я работал максимально комфортно для тебя!\n\n" +
                                "Приятного пользования!",
                                TextColor = Styles.UserColor,
                                FontSize = 18
                            },
                            VerticalOptions = LayoutOptions.CenterAndExpand,
                            BackgroundColor = Styles.BackColor,
                            HasShadow = false
                        },
                        VerticalOptions = LayoutOptions.FillAndExpand
                    },
                    new StackLayout
                    {
                        Children = {ignore, ok},
                        Orientation = StackOrientation.Horizontal
                    }
                }
            };
        }

        async void OkClick(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new XBot.SettingsOnStart.Intro1());
        }

        async void IgnoreClick(object sender, EventArgs e)
        {
            App.Current.Properties["welcome"] = false;
            await Navigation.PushAsync(new MainPage());
            Navigation.RemovePage(Navigation.NavigationStack[0]);
        }
    }
}

